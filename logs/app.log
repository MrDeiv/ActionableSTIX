[2025-02-26 19:18:38,514 INFO] Application started
[2025-02-26 19:19:37,902 INFO] Connectivity computed using 9 documents. The documents are:
[Document(id='ecb52155-b29b-40c6-8d28-85bed75fe4b6', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='If the protocol type  is RDP , it will also query the client address, before concatenating the \ngathered information into a pipe separated string to be returned to the C2 .'), Document(id='f0c5e460-700b-4451-b0f1-7d734d49c674', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Once extracted , it \nmasquerades  as a Google update component.\n\n• Goofy Guineapig maintains persistence as a Windows service.\n\n• Goofy Guineapig provides a framework into which additional plugins may be loaded .\n\n• The backdoor supports multiple communications methods, including HTTP, HTTPS and KCP .'), Document(id='283e21c3-2ff1-4b17-9004-d2013b449cc0', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Should  this fail the hardcoded default  shown in the  example beacon in Figure 2 will be  \nused instead .\n\nThe HTTP authorisation string header  is unique per infected machine, as described \nfurther in the ‘ Functionality  (Backdoor )’ section of this report.\n\nAs this  HTTP header  is unusually \nstructured5, it is possible this could be signatured .'), Document(id='b08693fc-8590-42ca-b91e-fc67e2132c70', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='This could be an attempt to prevent dynamic analysi s \nsolutions successfully detecting the malicious behaviour, although they are likely too short to be \neffective.\n\nThis same behaviour was observed during analysis of the Jolly Jellyfish malware.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1008  Fallback Channels  Goofy Guineapig contains the \nfunctionality to communicate using UDP \nand the KCP protocol, or direct socket \ncommunications, dependant on an \nembedded configuration string .\n\nT1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='The KEYPLUG samples identi\x00ed communicate with two different C&C domains.\n\nABBE7D13B13EA4315543BDAD187F14B3 beacons to\nhxxps://static.tcplog.com:4443, and\xa0\nF888AD62E906B0722E674F73DB4DBEB1 beacons to the IP hxxps://139[.]59[.]116[.]0:4443.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The rest of the information is collected by the relevant Windows APIs.\n\nIf the malware fails to collect any of this information, it will be replaced with the string ‘ (none) ’.\n\nThe \nadapter informati on and host name are co ncatenat ed and an MD5 hash of the result is taken.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T his malware has been assessed to be of \nlow sophistication.\n\nThe Goofy Guineapig malware  contains multiple  similarities with the Jolly Jellyfish malware , \nparticularly relating to the defence  evasion techniques  implemented.\n\nThis could indicate a shared \norigin .')]
[2025-02-26 19:19:40,071 INFO] OS computed using 9 documents. The documents are:
[Document(id='f0c5e460-700b-4451-b0f1-7d734d49c674', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Once extracted , it \nmasquerades  as a Google update component.\n\n• Goofy Guineapig maintains persistence as a Windows service.\n\n• Goofy Guineapig provides a framework into which additional plugins may be loaded .\n\n• The backdoor supports multiple communications methods, including HTTP, HTTPS and KCP .'), Document(id='9eb2b627-c4c1-4f73-ba4b-373a73f722d9', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.001  Virtualization/Sandbox \nEvasion: System \nChecks  Goofy Guineapig checks the disk size, \nphysical memory size, and number of \nlogical processors, and will not continue \nexecution if any of the checks fail.'), Document(id='ecb52155-b29b-40c6-8d28-85bed75fe4b6', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='If the protocol type  is RDP , it will also query the client address, before concatenating the \ngathered information into a pipe separated string to be returned to the C2 .'), Document(id='f8bae3cd-3a15-4eda-913a-042d570493e2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Otherwise, this is \nsent as a response with the response ID 0x32 , as described in ‘ Tasking  (Comma nd Responses )’.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The information  sent about the victim machine  includes:  \n• Operating system caption  \n• Antivirus product display name  \n• Adapters information  \n• Host and host name  \n• Computer name  \nThe operating system caption and Antivirus product display name are both collected by utilising COM  \nto access WMI information3.\n\nThe rest of the information is collected by the relevant Windows APIs.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The session ID is only required where the command ID \nis 0x2E  (spawn child process).\n\nMultiple tasks can be sent in the same request , and certain request ID’s have dependencies on other \ncommands having completed in the same request cycle.\n\nAn example of this is where  the request \n0x15  initialises some structures  required by  the plugin load / unload commands ( 0x18 , 0x19  and \n0x1A ).'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial Goopdate.dll  execution writes some commands to a batch file, then creates a hidden \nprocess, which calls the batch file via the command line:  \ncmd /c call C: \\<path>\\tmp.bat \nThe first command  sets echo  to be off ; the second command is :  \nchoice /t %d /d y /n >nul  \nThe format string ‘%d’ is never replaced with a numeric value, therefore when executed this command \nwill error , the script will continu e on to run the subsequent commands .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The second time Goofy Gu ineapig  is executed  it will be running from the required directory, meaning \nall the above actions should have already been completed .\n\nDuring t his iteration  the malware  will \ndecode  and load  the config.dat  file.\n\nFor each byte in the file, 0x73  is subtracted then the result \nXORed with 0x6D .')]
[2025-02-26 19:19:56,847 INFO] Vulnerability computed using 9 documents. The documents are:
[Document(id='9eb2b627-c4c1-4f73-ba4b-373a73f722d9', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.001  Virtualization/Sandbox \nEvasion: System \nChecks  Goofy Guineapig checks the disk size, \nphysical memory size, and number of \nlogical processors, and will not continue \nexecution if any of the checks fail.'), Document(id='f0c5e460-700b-4451-b0f1-7d734d49c674', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Once extracted , it \nmasquerades  as a Google update component.\n\n• Goofy Guineapig maintains persistence as a Windows service.\n\n• Goofy Guineapig provides a framework into which additional plugins may be loaded .\n\n• The backdoor supports multiple communications methods, including HTTP, HTTPS and KCP .'), Document(id='ecb52155-b29b-40c6-8d28-85bed75fe4b6', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='If the protocol type  is RDP , it will also query the client address, before concatenating the \ngathered information into a pipe separated string to be returned to the C2 .'), Document(id='b08693fc-8590-42ca-b91e-fc67e2132c70', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='This could be an attempt to prevent dynamic analysi s \nsolutions successfully detecting the malicious behaviour, although they are likely too short to be \neffective.\n\nThis same behaviour was observed during analysis of the Jolly Jellyfish malware.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T his malware has been assessed to be of \nlow sophistication.\n\nThe Goofy Guineapig malware  contains multiple  similarities with the Jolly Jellyfish malware , \nparticularly relating to the defence  evasion techniques  implemented.\n\nThis could indicate a shared \norigin .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Masquerading as legitimate processes  \nGoofy Guineapig has trojanised  a legitimate FireFox NSIS installation package and is dropped \nalongside legitimate FireFox files.\n\nIn addition to this, the malicious DLL is sideloaded by the \nlegitimate , signed,  executable  GoogleUpdate.exe  (also dropped as part of the NSIS installer).'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content=']0 over port 4443.\n\nFor more information, please see the Technical Annex of this report.\n\nLinks to APT41\nWe assess with moderate con\x00dence that this activity has ties to APT41 based on malware and shellcode overlaps as well as the use of a probable\ncompromised code signing certi\x00cate, which is characteristic of the group.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='The loaders result in the KEYPLUG backdoor.\n\nTechnical analysis notes malware and tactic, technique, and procedure (TTP) overlaps with APT41, though we track this activity as a separate cluster at\nthis time.')]
[2025-02-26 19:20:18,621 INFO] Inserted state with id: fd563e2b-128d-4449-81c4-fd093f3ece94
[2025-02-26 19:20:21,692 INFO] Processing step relative to tactic: persistence
[2025-02-26 19:20:21,692 INFO] + Processing action: Create or Modify System Process: Windows Service as used by Goofy Guineapig
[2025-02-26 19:20:24,602 INFO] ++ Embedding computed for: Create or Modify System Process: Windows Service as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:20:28,153 INFO] ++ Similar techniques found (in 1 attemps):
['create or modify system process: windows service']
[2025-02-26 19:20:28,153 INFO] ++ Querying the QA model for action Create or Modify System Process: Windows Service as used by Goofy Guineapig with the following context:
create or modify system process: windows service
[2025-02-26 19:20:28,680 INFO] ++ Refining the action: Create or Modify System Process: Windows Service as used by Goofy Guineapig using 9 documents:
[Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(id='e5f58b2d-4a0a-45c5-842d-38af4e70dd75', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nPersistence  T1543.003  Create or Modify \nSystem Process: \nWindows Service  Goofy Guineapig maintains persistence \nas a Windows service.\n\nDefense Evasion  T1036.005  Masquerading: Match \nLegitimate Name or \nLocation  Goofy Guineapig masquerades as a \nFireFox installer and a Google updater.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='Onward distribution in part or in whole of any Google proprietary materials or intellectual property is restricted per the terms\nof agreement.\n\nBy accessing and using this and related content and links, you agree to be bound by the subscription.\n\n© 2025, Google.\n\nAll rights reserved.\n\nCon\x00dential and Proprietary / Copyright © 2025 Google.\n\nAll rights reserved.')]
[2025-02-26 19:20:48,036 INFO] + Computing pre-conditions for the next attack step using the following actions:
Create or Modify System Process: Windows Service as used by Goofy Guineapig - To maintain persistence as a Windows service, Goofy Guineapig uses the following steps:

1. **Create a new Windows service**: Goofy Guineapig creates a new Windows service using the `sc` command-line utility or through the Windows Management Instrumentation (WMI) interface.
2. **Configure the service settings**: The service is configured to run under a specific account, with a specific startup type (e.g., automatic), and with a specific display name.
3. **Install the service**: The new service is installed on the system using the `sc` command or WMI.
4. **Set the service to start automatically**: The service is set to start automatically when the system boots up, ensuring that it runs continuously in the background.

The specific steps may vary depending on the implementation details of Goofy Guineapig, but this provides a general overview of how it maintains persistence as a Windows service.
[2025-02-26 19:20:48,883 INFO] Processing step relative to tactic: defense-evasion
[2025-02-26 19:20:48,883 INFO] + Processing action: Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig
[2025-02-26 19:20:50,608 INFO] ++ Embedding computed for: Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:20:55,842 INFO] ++ Similar techniques found (in 2 attemps):
['masquerading']
[2025-02-26 19:20:55,842 INFO] ++ Querying the QA model for action Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig with the following context:
masquerading
[2025-02-26 19:20:56,180 INFO] ++ Refining the action: Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig using 9 documents:
[Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nPersistence  T1543.003  Create or Modify \nSystem Process: \nWindows Service  Goofy Guineapig maintains persistence \nas a Windows service.\n\nDefense Evasion  T1036.005  Masquerading: Match \nLegitimate Name or \nLocation  Goofy Guineapig masquerades as a \nFireFox installer and a Google updater.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='Onward distribution in part or in whole of any Google proprietary materials or intellectual property is restricted per the terms\nof agreement.\n\nBy accessing and using this and related content and links, you agree to be bound by the subscription.\n\n© 2025, Google.\n\nAll rights reserved.\n\nCon\x00dential and Proprietary / Copyright © 2025 Google.\n\nAll rights reserved.')]
[2025-02-26 19:21:10,927 INFO] + Processing action: Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig
[2025-02-26 19:21:12,588 INFO] ++ Embedding computed for: Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:21:15,300 INFO] ++ Similar techniques found (in 1 attemps):
['virtualization/sandbox evasion', 'virtualization/sandbox evasion: system checks', 'virtualization/sandbox evasion: user activity based checks', 'virtualization/sandbox evasion: time based evasion']
[2025-02-26 19:21:15,300 INFO] ++ Querying the QA model for action Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig with the following context:
virtualization/sandbox evasion,virtualization/sandbox evasion: system checks,virtualization/sandbox evasion: user activity based checks,virtualization/sandbox evasion: time based evasion
[2025-02-26 19:21:15,704 INFO] ++ Refining the action: Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig using 8 documents:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.001  Virtualization/Sandbox \nEvasion: System \nChecks  Goofy Guineapig checks the disk size, \nphysical memory size, and number of \nlogical processors, and will not continue \nexecution if any of the checks fail.'), Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.003  Virtualization/Sandbox \nEvasion: Time Based \nEvasion  Goofy Guineapig checks the time \nregister twice for a delay of more than \n100 milliseconds and will not continue \nexecution if more time has elapsed.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.')]
[2025-02-26 19:21:39,707 INFO] + Processing action: Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig
[2025-02-26 19:21:41,446 INFO] ++ Embedding computed for: Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:21:44,166 INFO] ++ Similar techniques found (in 1 attemps):
['virtualization/sandbox evasion', 'virtualization/sandbox evasion: system checks', 'virtualization/sandbox evasion: user activity based checks', 'virtualization/sandbox evasion: time based evasion']
[2025-02-26 19:21:44,166 INFO] ++ Querying the QA model for action Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig with the following context:
virtualization/sandbox evasion,virtualization/sandbox evasion: system checks,virtualization/sandbox evasion: user activity based checks,virtualization/sandbox evasion: time based evasion
[2025-02-26 19:21:44,626 INFO] ++ Refining the action: Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig using 8 documents:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.001  Virtualization/Sandbox \nEvasion: System \nChecks  Goofy Guineapig checks the disk size, \nphysical memory size, and number of \nlogical processors, and will not continue \nexecution if any of the checks fail.'), Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).')]
[2025-02-26 19:22:10,514 INFO] + Processing action: Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig
[2025-02-26 19:22:12,241 INFO] ++ Embedding computed for: Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:22:14,697 INFO] ++ Similar techniques found (in 1 attemps):
['debugger evasion', 'virtualization/sandbox evasion', 'virtualization/sandbox evasion: system checks', 'virtualization/sandbox evasion: user activity based checks', 'virtualization/sandbox evasion: time based evasion']
[2025-02-26 19:22:14,697 INFO] ++ Querying the QA model for action Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig with the following context:
debugger evasion,virtualization/sandbox evasion,virtualization/sandbox evasion: system checks,virtualization/sandbox evasion: user activity based checks,virtualization/sandbox evasion: time based evasion
[2025-02-26 19:22:15,060 INFO] ++ Refining the action: Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig using 8 documents:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.001  Virtualization/Sandbox \nEvasion: System \nChecks  Goofy Guineapig checks the disk size, \nphysical memory size, and number of \nlogical processors, and will not continue \nexecution if any of the checks fail.'), Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).')]
[2025-02-26 19:22:36,221 INFO] + Processing action: Obfuscated Files or Information: Software Packing as used by Goofy Guineapig
[2025-02-26 19:22:37,897 INFO] ++ Embedding computed for: Obfuscated Files or Information: Software Packing as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:22:43,848 INFO] ++ Similar techniques found (in 2 attemps):
['obfuscated files or information', 'obfuscated files or information: binary padding', 'obfuscated files or information: software packing']
[2025-02-26 19:22:43,848 INFO] ++ Querying the QA model for action Obfuscated Files or Information: Software Packing as used by Goofy Guineapig with the following context:
obfuscated files or information,obfuscated files or information: binary padding,obfuscated files or information: software packing
[2025-02-26 19:22:44,162 INFO] ++ Refining the action: Obfuscated Files or Information: Software Packing as used by Goofy Guineapig using 9 documents:
[Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1027.002  Obfuscated Files or \nInformation: Software \nPacking  Goofy Guineapig is UPX packed and \npackaged in with a legitimate NSIS \ninstaller.\n\nT1140   Deobfuscate/Decode \nFiles or Information  Goofy Guineapig contains stack -based \nstrings which are obfuscated with single \nbyte XOR or subtraction throughout the \nbinary.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='Onward distribution in part or in whole of any Google proprietary materials or intellectual property is restricted per the terms\nof agreement.\n\nBy accessing and using this and related content and links, you agree to be bound by the subscription.\n\n© 2025, Google.\n\nAll rights reserved.\n\nCon\x00dential and Proprietary / Copyright © 2025 Google.\n\nAll rights reserved.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.')]
[2025-02-26 19:23:09,588 INFO] + Processing action: Deobfuscate/Decode Files or Information as used by Goofy Guineapig
[2025-02-26 19:23:11,285 INFO] ++ Embedding computed for: Deobfuscate/Decode Files or Information as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:23:14,392 INFO] ++ Similar techniques found (in 1 attemps):
['deobfuscate/decode files or information', 'obfuscated files or information', 'obfuscated files or information: binary padding']
[2025-02-26 19:23:14,393 INFO] ++ Querying the QA model for action Deobfuscate/Decode Files or Information as used by Goofy Guineapig with the following context:
deobfuscate/decode files or information,obfuscated files or information,obfuscated files or information: binary padding
[2025-02-26 19:23:14,843 INFO] ++ Refining the action: Deobfuscate/Decode Files or Information as used by Goofy Guineapig using 8 documents:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1027.002  Obfuscated Files or \nInformation: Software \nPacking  Goofy Guineapig is UPX packed and \npackaged in with a legitimate NSIS \ninstaller.\n\nT1140   Deobfuscate/Decode \nFiles or Information  Goofy Guineapig contains stack -based \nstrings which are obfuscated with single \nbyte XOR or subtraction throughout the \nbinary.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='Onward distribution in part or in whole of any Google proprietary materials or intellectual property is restricted per the terms\nof agreement.\n\nBy accessing and using this and related content and links, you agree to be bound by the subscription.\n\n© 2025, Google.\n\nAll rights reserved.\n\nCon\x00dential and Proprietary / Copyright © 2025 Google.\n\nAll rights reserved.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.')]
[2025-02-26 19:23:38,279 INFO] + Processing action: Hide Artifacts: Hidden Window as used by Goofy Guineapig
[2025-02-26 19:23:40,328 INFO] ++ Embedding computed for: Hide Artifacts: Hidden Window as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:23:43,148 INFO] ++ Similar techniques found (in 1 attemps):
['hide artifacts: hidden window']
[2025-02-26 19:23:43,148 INFO] ++ Querying the QA model for action Hide Artifacts: Hidden Window as used by Goofy Guineapig with the following context:
hide artifacts: hidden window
[2025-02-26 19:23:43,527 INFO] ++ Refining the action: Hide Artifacts: Hidden Window as used by Goofy Guineapig using 8 documents:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='Onward distribution in part or in whole of any Google proprietary materials or intellectual property is restricted per the terms\nof agreement.\n\nBy accessing and using this and related content and links, you agree to be bound by the subscription.\n\n© 2025, Google.\n\nAll rights reserved.\n\nCon\x00dential and Proprietary / Copyright © 2025 Google.\n\nAll rights reserved.')]
[2025-02-26 19:24:07,630 INFO] + Processing action: Indicator Removal on Host: File Deletion as used by Goofy Guineapig
[2025-02-26 19:24:09,548 INFO] ++ Embedding computed for: Indicator Removal on Host: File Deletion as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:24:15,823 INFO] ++ Similar techniques found (in 2 attemps):
['indicator removal', 'indicator removal: file deletion', 'indicator removal: relocate malware', 'obfuscated files or information: indicator removal from tools']
[2025-02-26 19:24:15,823 INFO] ++ Querying the QA model for action Indicator Removal on Host: File Deletion as used by Goofy Guineapig with the following context:
indicator removal,indicator removal: file deletion,indicator removal: relocate malware,obfuscated files or information: indicator removal from tools
[2025-02-26 19:24:15,851 WARNING] ++ Technique not found: indicator removal,indicator removal: file deletion in ['indicator removal', 'indicator removal: file deletion', 'indicator removal: relocate malware', 'obfuscated files or information: indicator removal from tools']. Trying to refine the answer.
[2025-02-26 19:24:16,139 INFO] ++ Refining the action: Indicator Removal on Host: File Deletion as used by Goofy Guineapig using 8 documents:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(id='e5f58b2d-4a0a-45c5-842d-38af4e70dd75', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.')]
[2025-02-26 19:24:35,030 INFO] + Processing action: Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig
[2025-02-26 19:24:36,664 INFO] ++ Embedding computed for: Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:24:39,143 INFO] ++ Similar techniques found (in 1 attemps):
['hijack execution flow: dll search order hijacking', 'hijack execution flow: dll side-loading', 'hijack execution flow: path interception by search order hijacking', 'hijack execution flow: appdomainmanager', 'process injection: dynamic-link library injection', 'system binary proxy execution: rundll32']
[2025-02-26 19:24:39,143 INFO] ++ Querying the QA model for action Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig with the following context:
hijack execution flow: dll search order hijacking,hijack execution flow: dll side-loading,hijack execution flow: path interception by search order hijacking,hijack execution flow: appdomainmanager,process injection: dynamic-link library injection,system binary proxy execution: rundll32
[2025-02-26 19:24:39,548 INFO] ++ Refining the action: Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig using 8 documents:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.')]
[2025-02-26 19:24:53,891 INFO] + Processing action: Process Injection: Process Hollowing as used by Goofy Guineapig
[2025-02-26 19:24:56,422 INFO] ++ Embedding computed for: Process Injection: Process Hollowing as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:24:59,524 INFO] ++ Similar techniques found (in 1 attemps):
['process injection: process hollowing']
[2025-02-26 19:24:59,525 INFO] ++ Querying the QA model for action Process Injection: Process Hollowing as used by Goofy Guineapig with the following context:
process injection: process hollowing
[2025-02-26 19:24:59,938 INFO] ++ Refining the action: Process Injection: Process Hollowing as used by Goofy Guineapig using 9 documents:
[Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1055.012  Process Inje ction: \nProcess Hollowing  Goofy Guineapig can perform process \nhollowing on the dllhost.exe  binary, \ninjecting content downloaded by the C2.\n\nT1218.011  System Binary Proxy \nExecution: Rundll32  The Goofy Guineapig persistence \nmechanism utilises rundll32.exe  and \nurl.dll  to execute the legitimate \nbinary whi ch will load the malicious DLL .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='This same behaviour was observed during analysis of the Jolly Jellyfish malware.\n\nIn addition to this, Goofy Guineapig checks the name of each r unning process on the machine, and if \nany process containing the string ‘dbg’, ‘debug ’, or ‘ida’ is determined to be running , the malware \nwill not continue execution.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.')]
[2025-02-26 19:25:23,675 INFO] + Processing action: Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig
[2025-02-26 19:25:25,868 INFO] ++ Embedding computed for: Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:25:28,668 INFO] ++ Similar techniques found (in 1 attemps):
['hijack execution flow: dll search order hijacking', 'process injection: dynamic-link library injection', 'system binary proxy execution', 'system binary proxy execution: control panel', 'system binary proxy execution: msiexec', 'system binary proxy execution: regsvcs/regasm', 'system binary proxy execution: regsvr32', 'system binary proxy execution: rundll32', 'system binary proxy execution: verclsid', 'system script proxy execution']
[2025-02-26 19:25:28,668 INFO] ++ Querying the QA model for action Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig with the following context:
hijack execution flow: dll search order hijacking,process injection: dynamic-link library injection,system binary proxy execution,system binary proxy execution: control panel,system binary proxy execution: msiexec,system binary proxy execution: regsvcs/regasm,system binary proxy execution: regsvr32,system binary proxy execution: rundll32,system binary proxy execution: verclsid,system script proxy execution
[2025-02-26 19:25:28,720 WARNING] ++ Technique not found: rundll32 in ['hijack execution flow: dll search order hijacking', 'process injection: dynamic-link library injection', 'system binary proxy execution', 'system binary proxy execution: control panel', 'system binary proxy execution: msiexec', 'system binary proxy execution: regsvcs/regasm', 'system binary proxy execution: regsvr32', 'system binary proxy execution: rundll32', 'system binary proxy execution: verclsid', 'system script proxy execution']. Trying to refine the answer.
[2025-02-26 19:25:28,721 ERROR] ++ Technique not found: rundll32 in ['hijack execution flow: dll search order hijacking', 'process injection: dynamic-link library injection', 'system binary proxy execution', 'system binary proxy execution: control panel', 'system binary proxy execution: msiexec', 'system binary proxy execution: regsvcs/regasm', 'system binary proxy execution: regsvr32', 'system binary proxy execution: rundll32', 'system binary proxy execution: verclsid', 'system script proxy execution']
[2025-02-26 19:25:29,104 INFO] ++ Refining the action: Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig using 9 documents:
[Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='e5f58b2d-4a0a-45c5-842d-38af4e70dd75', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1055.012  Process Inje ction: \nProcess Hollowing  Goofy Guineapig can perform process \nhollowing on the dllhost.exe  binary, \ninjecting content downloaded by the C2.\n\nT1218.011  System Binary Proxy \nExecution: Rundll32  The Goofy Guineapig persistence \nmechanism utilises rundll32.exe  and \nurl.dll  to execute the legitimate \nbinary whi ch will load the malicious DLL .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='Onward distribution in part or in whole of any Google proprietary materials or intellectual property is restricted per the terms\nof agreement.\n\nBy accessing and using this and related content and links, you agree to be bound by the subscription.\n\n© 2025, Google.\n\nAll rights reserved.\n\nCon\x00dential and Proprietary / Copyright © 2025 Google.\n\nAll rights reserved.')]
[2025-02-26 19:25:48,206 INFO] + Computing pre-conditions for the next attack step using the following actions:
Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig - According to the Malware Analysis Report, Goofy Guineapig performs "Masquerading: Match Legitimate Name or Location" by:

**Masquerading as a Firefox installer**

* The malware masquerades as a legitimate NSIS (Nullsoft Scriptable Install System) installer for Firefox.
* Once extracted, it pretends to be a Google update component.

**Masquerading as a Google updater**

* Goofy Guineapig also masquerades as a legitimate Google updater, which is used to deceive the victim into thinking that the malware is a genuine software update from Google.

By using these tactics, Goofy Guineapig evades detection and gains trust with the victim, allowing it to establish persistence on the compromised system.##########Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig - The action "Virtualization/Sandbox Evasion: Time Based Evasion" as used by Goofy Guineapig involves checking the time register twice to determine if a delay of more than 100 milliseconds has occurred.

Here's how it works:

1. **Initial Check**: The malware checks the time register (likely using the `RDTSC` instruction, which returns the number of clock cycles since the processor was powered on) once.
2. **Delay**: If the elapsed time is less than 100 milliseconds, the malware waits for a short period of time ( likely around 100-150 milliseconds).
3. **Second Check**: After the delay, the malware checks the time register again to see if more than 100 milliseconds have passed since the initial check.
4. **Decision**: If the elapsed time is still less than 100 milliseconds, the malware will not continue execution, indicating that it has detected a sandbox or virtualized environment.

By implementing this time-based evasion technique, Goofy Guineapig aims to prevent itself from being executed in a controlled environment, such as a sandbox or virtual machine, where the elapsed time between checks would be significantly shorter than 100 milliseconds.##########Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig - The action "Virtualization/Sandbox Evasion: System Checks" as used by Goofy Guineapig is performed through a series of system checks that are designed to detect whether the malware is running in a virtualized or sandboxed environment.

Here's how it works:

1. **Disk size check**: Goofy Guineapig checks the disk size of the system. If the disk size is smaller than a certain threshold (not specified), the malware will not continue execution.
2. **Physical memory size check**: The malware also checks the physical memory size of the system. If the physical memory size is smaller than a certain threshold, the malware will not continue execution.
3. **Number of logical processors check**: Finally, Goofy Guineapig checks the number of logical processors on the system. If the number of logical processors is smaller than a certain threshold, the malware will not continue execution.

If any of these checks fail, the malware will not proceed with its execution. This is done to prevent detection by virtualization or sandboxing tools that may have limitations in terms of disk size, physical memory, or processor resources.

In essence, Goofy Guineapig uses these system checks as a form of evasion technique to ensure that it##########Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig - The action "Virtualization/Sandbox Evasion: User Activity Based Checks" as used by Goofy Guineapig involves the following steps:

1. **Process Monitoring**: Goofy Guineapig monitors the processes running on the system to detect any signs of reverse engineering or debugging.
2. **Check for Suspicious Processes**: It checks for specific processes that are commonly associated with reverse engineering or debugging tools, such as:
	* OllyDbg
	* IDA Pro
	* x64dbg
	* CDB (Microsoft Console Debugger)
	* WinDbg
3. **Mutex Check**: Goofy Guineapig also checks for the presence of a mutex named "msvsmon" which is commonly used by Visual Studio to attach to processes.
4. **Behavioral Analysis**: If any suspicious process or mutex is detected, Goofy Guineapig will not continue execution and will likely terminate itself.

The purpose of this evasion technique is to prevent the malware from being analyzed or debugged in a sandbox environment, thereby making it more difficult for security researchers to understand its behavior and develop effective detection methods.##########Obfuscated Files or Information: Software Packing as used by Goofy Guineapig - The action "Obfuscated Files or Information: Software Packing" as used by Goofy Guineapig is performed through the use of UPX (Ultimate Packer for eXecutables) packing.

Here's how it works:

1. The legitimate NSIS (Nullsoft Scriptable Install System) installer is created.
2. Goofy Guineapig, a malicious DLL, is packed using UPX and embedded within the NSIS installer.
3. When the NSIS installer is executed, it unpacks the Goofy Guineapig DLL from its packed state.

The use of UPX packing serves to obfuscate the presence of the malicious code within the legitimate installer, making it more difficult for security software or analysts to detect the malware.

In this case, the action "Obfuscated Files or Information: Software Packing" is performed through the following steps:

* Goofy Guineapig is packed using UPX.
* The packed Goofy Guineapig DLL is embedded within a legitimate NSIS installer.
* When the NSIS installer is executed, it unpacks the Goofy Guineapig DLL from its packed state.

This technique allows the malware to evade detection and maintain persistence on the infected machine.##########Deobfuscate/Decode Files or Information as used by Goofy Guineapig - The action "Deobfuscate/Decode Files or Information" as used by Goofy Guineapig involves deobfuscating stack-based strings that are obfuscated using single-byte XOR or subtraction.

To perform this action, Goofy Guineapig uses a technique called "stack-based string obfuscation", where the strings are stored on the stack and then obfuscated using a simple encryption algorithm. The algorithm used is either single-byte XOR (XOR) or subtraction, which replaces each byte of the original string with its corresponding value after applying the operation.

Here's a step-by-step explanation of how this action is performed:

1. **Obfuscation**: Goofy Guineapig stores the strings on the stack and applies the obfuscation algorithm (XOR or subtraction) to each byte of the string.
2. **Storage**: The obfuscated strings are stored in memory, along with their corresponding original values.
3. **Decryption**: When Goofy Guineapig needs to access the original string, it uses a decryption function that reverses the obfuscation algorithm (i.e., applies the inverse operation of XOR or subtraction).
4. **Recovery**: The decrypted strings are then recovered from memory and used by Go##########Hide Artifacts: Hidden Window as used by Goofy Guineapig - Based on the provided context, here's a step-by-step explanation of how Goofy Guineapig performs the action "Hide Artifacts: Hidden Window" using process hollowing on dllhost.exe:

1. **Process Hollowing**: Process hollowing is a technique used to hide malware by replacing the legitimate code of an existing process with malicious code. In this case, Goofy Guineapig uses process hollowing on dllhost.exe.
2. **dllhost.exe Selection**: The malware selects dllhost.exe as the target process for hollowing. Dllhost.exe is a legitimate Windows process that hosts dynamic link libraries (DLLs).
3. **Hollowing Process**: Goofy Guineapig replaces the legitimate code of dllhost.exe with its own malicious code, effectively "hollowing out" the original process.
4. **Hidden Process Creation**: When the hollowing process is complete, a new instance of dllhost.exe is created, but this time it's hidden from view. The hidden process is not visible in the Task Manager or other system monitoring tools.

By performing process hollowing on dllhost.exe and creating a hidden process, Goofy Guineapig effectively hides its malicious activity from detection by security software and human##########Indicator Removal on Host: File Deletion as used by Goofy Guineapig - The action "Indicator Removal on Host: File Deletion" as used by Goofy Guineapig is performed through the following steps:

1. **Initial Execution**: Goofy Guineapig initially runs in the location to which it was downloaded, which means it executes from its original download location.
2. **File Movement**: The files associated with Goofy Guineapig are then moved to a legitimate-looking directory on the infected machine. This is done to make it more difficult for security software or analysts to detect the malware's presence in the original download location.
3. **Deletion of Original Files**: Once the files have been moved, they are deleted from their original download location. This removes any potential indicators of compromise (IOCs) that may be present in the original download location.

By performing these steps, Goofy Guineapig effectively removes any evidence of its initial execution and presence on the infected machine, making it more challenging to detect and analyze the malware.##########Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig - The action of "Hijack Execution Flow: DLL Side-Loading" as used by Goofy Guineapig is performed in the following steps:

1. **Installation**: A legitimate executable is installed on the victim's system using the Goofy Guineapig loader.
2. **Co-location**: The malicious DLL, which is part of the Goofy Guineapig malware, is also installed alongside the legitimate executable.
3. **Loading**: The legitimate executable loads the malicious DLL into memory, effectively hijacking the execution flow.

This technique allows the malware to execute its payload without being detected by traditional antivirus software, as the legitimate executable is signed and trusted by the system. Once loaded, the malicious DLL can perform various malicious activities, such as maintaining persistence, hiding artifacts, and establishing a backdoor connection.##########Process Injection: Process Hollowing as used by Goofy Guineapig - According to the provided context, the action "Process Injection: Process Hollowing" as used by Goofy Guineapig is performed in the following steps:

1. **dllhost.exe hollowing**: Goofy Guineapig contains a functionality to perform process hollowing on dllhost.exe.
2. **Creating a hidden process**: When this process hollowing is performed, the resulting process is created hidden.

In other words, Goofy Guineapig uses process hollowing to inject content downloaded by the Command and Control (C2) server into a new instance of dllhost.exe, which is then executed in a hidden manner. This allows the malware to execute malicious code without being detected.

Here's a simplified representation of the steps:

1. Goofy Guineapig downloads content from the C2 server.
2. It uses process hollowing to inject this content into a new instance of dllhost.exe.
3. The resulting dllhost.exe process is created hidden, allowing the malware to execute malicious code without being detected.

This technique allows Goofy Guineapig to maintain persistence and evade detection by hiding its malicious activities within a legitimate process (dllhost.exe).##########Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig - The action "Signed Binary Proxy Execution: Rundll32" as used by Goofy Guineapig is performed as follows:

1. The Goofy Guineapig loader, a UPX packed, trojanised NSIS installer, is executed on the victim's machine.
2. The loader masquerades as a Google update component and extracts its contents.
3. The extracted contents include a legitimate binary (e.g., url.dll) and a malicious DLL.
4. The Goofy Guineapig persistence mechanism uses `rundll32.exe` to execute the legitimate binary, which is `url.dll`.
5. `Rundll32.exe` loads the `url.dll` library, which in turn loads the malicious DLL.

This process allows the malicious DLL to be loaded into memory without being detected as a standalone executable, thereby evading traditional security measures. The use of a legitimate binary (`url.dll`) and the `rundll32.exe` proxy execution mechanism makes it difficult for defenders to detect the malicious activity.
[2025-02-26 19:25:49,776 INFO] Processing step relative to tactic: discovery
[2025-02-26 19:25:49,776 INFO] + Processing action: System Information Discovery as used by Goofy Guineapig
[2025-02-26 19:25:51,427 INFO] ++ Embedding computed for: System Information Discovery as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:25:53,368 INFO] ++ Similar techniques found (in 3 attemps):
['network service discovery', 'process discovery', 'remote system discovery', 'software discovery', 'system information discovery', 'system location discovery', 'system location discovery: system language discovery', 'system network configuration discovery: internet connection discovery', 'system network connections discovery', 'system owner/user discovery']
[2025-02-26 19:25:53,369 INFO] ++ Querying the QA model for action System Information Discovery as used by Goofy Guineapig with the following context:
network service discovery,process discovery,remote system discovery,software discovery,system information discovery,system location discovery,system location discovery: system language discovery,system network configuration discovery: internet connection discovery,system network connections discovery,system owner/user discovery
[2025-02-26 19:25:53,713 INFO] ++ Refining the action: System Information Discovery as used by Goofy Guineapig using 9 documents:
[Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content=']100\nMITRE ATT&CK Framework\nT1027: Obfuscated Files or Information\nT1033: System Owner/User Discovery\nT1071.001: Web Protocols\nT1082: System Information DiscoveryT1087: Account Discovery\nT1095: Non-Application Layer Protocol\nYARA Rules\nrule MTI_HUNTING_SICKMAN_1\n{\n\xa0\xa0\xa0 meta:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 author = "MTI"\n\xa0\xa0\xa0\xa0\xa0\xa0 disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 description = "SICKMAN con\x00g decryption rule."'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Discovery  T1082  System Information \nDiscovery  Goofy Guineapig sends information \nabout the infected machine in each C2 \npacket, as an obfuscated ‘Authorization’ \nstring  in the HTTP header .\n\nCommand and \nControl  T1071.001  Application Layer \nProtocol: Web \nProtocols  Goofy Guineapig uses HTTPS for its C2 \ncommun ications .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).')]
[2025-02-26 19:26:12,566 INFO] + Computing pre-conditions for the next attack step using the following actions:
System Information Discovery as used by Goofy Guineapig - The action "System Information Discovery" as used by Goofy Guineapig is performed through the following steps:

1. **Obfuscation of system information**: Goofy Guineapig sends an obfuscated 'Authorization' string in the HTTP header with each C2 packet.
2. **Decoding of obfuscated string**: The obfuscated string is decoded to reveal the actual system information, which includes details about the infected machine.

The specific steps involved in this process are not explicitly stated in the provided text, but based on the context, it can be inferred that Goofy Guineapig uses a custom mechanism to encode and decode the system information. This mechanism is likely implemented within the malware itself.

To answer the question of how the action "System Information Discovery" as used by Goofy Guineapig is performed, I would say:

**The action is performed through the obfuscation and decoding of an 'Authorization' string in the HTTP header with each C2 packet.**

This process allows Goofy Guineapig to collect system information from the infected machine without raising suspicion, as the encoded data appears innocuous at first glance.
[2025-02-26 19:26:13,243 INFO] Processing step relative to tactic: command-and-control
[2025-02-26 19:26:13,243 INFO] + Processing action: Application Layer Protocol: Web Protocols as used by Goofy Guineapig
[2025-02-26 19:26:14,944 INFO] ++ Embedding computed for: Application Layer Protocol: Web Protocols as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:26:16,144 INFO] ++ Similar techniques found (in 2 attemps):
['application layer protocol: web protocols', 'application layer protocol: mail protocols', 'application layer protocol: publish/subscribe protocols']
[2025-02-26 19:26:16,144 INFO] ++ Querying the QA model for action Application Layer Protocol: Web Protocols as used by Goofy Guineapig with the following context:
application layer protocol: web protocols,application layer protocol: mail protocols,application layer protocol: publish/subscribe protocols
[2025-02-26 19:26:16,531 INFO] ++ Refining the action: Application Layer Protocol: Web Protocols as used by Goofy Guineapig using 9 documents:
[Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Discovery  T1082  System Information \nDiscovery  Goofy Guineapig sends information \nabout the infected machine in each C2 \npacket, as an obfuscated ‘Authorization’ \nstring  in the HTTP header .\n\nCommand and \nControl  T1071.001  Application Layer \nProtocol: Web \nProtocols  Goofy Guineapig uses HTTPS for its C2 \ncommun ications .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content=']100\nMITRE ATT&CK Framework\nT1027: Obfuscated Files or Information\nT1033: System Owner/User Discovery\nT1071.001: Web Protocols\nT1082: System Information DiscoveryT1087: Account Discovery\nT1095: Non-Application Layer Protocol\nYARA Rules\nrule MTI_HUNTING_SICKMAN_1\n{\n\xa0\xa0\xa0 meta:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 author = "MTI"\n\xa0\xa0\xa0\xa0\xa0\xa0 disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 description = "SICKMAN con\x00g decryption rule."')]
[2025-02-26 19:26:36,616 INFO] + Processing action: Fallback Channels as used by Goofy Guineapig
[2025-02-26 19:26:38,484 INFO] ++ Embedding computed for: Fallback Channels as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:26:39,768 INFO] ++ Similar techniques found (in 2 attemps):
['fallback channels']
[2025-02-26 19:26:39,768 INFO] ++ Querying the QA model for action Fallback Channels as used by Goofy Guineapig with the following context:
fallback channels
[2025-02-26 19:26:40,203 INFO] ++ Refining the action: Fallback Channels as used by Goofy Guineapig using 9 documents:
[Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1008  Fallback Channels  Goofy Guineapig contains the \nfunctionality to communicate using UDP \nand the KCP protocol, or direct socket \ncommunications, dependant on an \nembedded configuration string .\n\nT1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='Onward distribution in part or in whole of any Google proprietary materials or intellectual property is restricted per the terms\nof agreement.\n\nBy accessing and using this and related content and links, you agree to be bound by the subscription.\n\n© 2025, Google.\n\nAll rights reserved.\n\nCon\x00dential and Proprietary / Copyright © 2025 Google.\n\nAll rights reserved.')]
[2025-02-26 19:26:59,871 INFO] + Processing action: Non-Standard Port as used by Goofy Guineapig
[2025-02-26 19:27:01,651 INFO] ++ Embedding computed for: Non-Standard Port as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 19:27:03,086 INFO] ++ Similar techniques found (in 2 attemps):
['non-standard port']
[2025-02-26 19:27:03,086 INFO] ++ Querying the QA model for action Non-Standard Port as used by Goofy Guineapig with the following context:
non-standard port
[2025-02-26 19:27:03,415 INFO] ++ Refining the action: Non-Standard Port as used by Goofy Guineapig using 9 documents:
[Document(id='6411ffd8-efa2-4812-92d9-ea153799c2b4', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .\n\nFunctionality  \nOverview  \nGoofy Guineapig is a malicious DLL  which is  loaded by a legitimate signed  executable  and maintains \npersistence using a Windows service.'), Document(id='2ad9757d-7fcd-479a-a0d9-4f0ee6724f39', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(id='b4215349-7ccc-4a32-9cc3-349a2e46ee96', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Malware Analysis Report  Goofy Guineapig  \n13th December  2022 \n© Crown Copyright 202 2 Version 1.0  \n  \n    \n \n \n \n \nGoofy Guineapig  \nPersistent Windows backdoor with HTTPS C2 communications  \n \nExecutive summary   \nThe Goofy Guineapig loader  is a UPX packed,  trojanised NSIS1 Firefox installer .\n\nOnce extracted , it \nmasquerades  as a Google update component.'), Document(id='8756389e-0206-4520-8356-f59efdb4579e', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='However, we are currently tracking this activity as a separate activity cluster given the\nlack of indicators related to speci\x00c victimology or an overlap in infrastructure.\n\nThe custom tool KEYPLUG has only been observed being leveraged by APT41.\n\nThe shellcode loader used to execute KEYPLUG has also been previously\nleveraged by APT41 to load DEADEYE malware (21-00017828).'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1008  Fallback Channels  Goofy Guineapig contains the \nfunctionality to communicate using UDP \nand the KCP protocol, or direct socket \ncommunications, dependant on an \nembedded configuration string .\n\nT1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .'), Document(metadata={'source': './documents\\other\\21-00021921.pdf'}, page_content='Onward distribution in part or in whole of any Google proprietary materials or intellectual property is restricted per the terms\nof agreement.\n\nBy accessing and using this and related content and links, you agree to be bound by the subscription.\n\n© 2025, Google.\n\nAll rights reserved.\n\nCon\x00dential and Proprietary / Copyright © 2025 Google.\n\nAll rights reserved.')]
[2025-02-26 19:27:23,378 INFO] + Computing pre-conditions for the next attack step using the following actions:
Application Layer Protocol: Web Protocols as used by Goofy Guineapig - The action "Application Layer Protocol: Web Protocols" as used by Goofy Guineapig refers to the use of HTTPS (Hypertext Transfer Protocol Secure) for Command and Control (C2) communications.

To perform this action, Goofy Guineapig would follow these steps:

1. Establish a connection to a remote server using the HTTPS protocol.
2. Authenticate with the server using credentials or other authentication mechanisms.
3. Send an HTTP request to the server, which includes the C2 communication data in the request body or headers.
4. The server responds with an HTTP response, which may include additional instructions or data for Goofy Guineapig.

In more technical terms, this action is performed by using a library or framework that implements the HTTPS protocol, such as OpenSSL or a similar TLS/SSL library. The specific implementation details would depend on the programming language and platform used to develop Goofy Guineapig.

Here's an example of how this might be implemented in Python:
```python
import ssl
import socket

# Establish a connection to the remote server
context = ssl.create_default_context()
with socket.create_connection(("remote_server", 443)) as sock:
    with context.wrap_socket(sock, server_hostname="##########Fallback Channels as used by Goofy Guineapig - To answer this question accurately, I will follow these steps:

1.  Identify the key points related to "Fallback Channels" in the provided context.
2.  Determine how Goofy Guineapig uses Fallback Channels for communication.

**Step 1: Key Points**

The relevant information about "Fallback Channels" is as follows:

*   **T1008 Fallback Channels**: This refers to a tactic used by Goofy Guineapig, which involves communicating using different protocols.
*   **Protocols Used**: The malware can communicate over UDP and the KCP protocol or direct socket communications.

**Step 2: How Goofy Guineapig Uses Fallback Channels**

Based on the provided context, here's how Goofy Guineapig uses Fallback Channels:

1.  **Embedded Configuration String**: The malware relies on an embedded configuration string to determine which communication protocol to use.
2.  **Communication Protocols**: Depending on the configuration string, Goofy Guineapig can communicate using UDP and the KCP protocol or direct socket communications.

**Action Statement**

To state how the action "Fallback Channels as used by Goofy Guineapig" is performed:

Goofy Guineapig uses##########Non-Standard Port as used by Goofy Guineapig - To answer this question, I will provide a step-by-step explanation of how Goofy Guineapig communicates over the non-standard HTTPS port 4443.

**Step 1: Understanding the context**
Goofy Guineapig is a malicious DLL that maintains persistence using a Windows service and communicates with its C2 (Command and Control) server over a non-standard HTTPS port.

**Step 2: Identifying the communication method**
According to the report, Goofy Guineapig uses the following methods for communication:

* UDP
* KCP protocol
* Direct socket communications

However, it is also mentioned that Goofy Guineapig communicates over a non-standard HTTPS port.

**Step 3: Determining the specific action**
The question asks how Goofy Guineapig performs the action of using a non-standard port. Based on the report, we can infer that this action involves establishing a connection to the C2 server over the non-standard HTTPS port 4443.

**Step 4: Providing a detailed explanation**
To perform this action, Goofy Guineapig likely uses its built-in functionality for communication over non-standard ports. This may involve:

* Establishing a socket connection to the C2 server
[2025-02-26 19:27:24,257 INFO] Saving output
[2025-02-26 19:27:24,260 INFO] Application finished

from langchain.schema import Document

def highlight_text(full_text: str, reference_texts: list[str]) -> None:
    """
    Prints the full text and highlights the reference text in yellow.
    """
    YELLOW = "\033[93m"
    RESET = "\033[0m"

    highlighted_text = full_text
    for reference_text in reference_texts:
        for word in reference_text.split():
            if word in highlighted_text:
                highlighted_text = highlighted_text.replace(word, f"{YELLOW}{word}{RESET}")

    print(highlighted_text)


if __name__ == "__main__":
    docs = [Document(id='1b90ae03-ef62-4894-8730-4903f18528bf', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Should  this fail the hardcoded default  shown in the  example beacon in Figure 2 will be  \nused instead .\n\nThe HTTP authorisation string header  is unique per infected machine, as described \nfurther in the � Functionality  (Backdoor )� section of this report.\n\nAs this  HTTP header  is unusually \nstructured5, it is possible this could be signatured .'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='13e8300a-2cdb-4ae8-9bff-592231a0a77d', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Masquerading as legitimate processes  \nGoofy Guineapig has trojanised  a legitimate FireFox NSIS installation package and is dropped \nalongside legitimate FireFox files.\n\nIn addition to this, the malicious DLL is sideloaded by the \nlegitimate , signed,  executable  GoogleUpdate.exe  (also dropped as part of the NSIS installer).'), Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1008  Fallback Channels  Goofy Guineapig contains the \nfunctionality to communicate using UDP \nand the KCP protocol, or direct socket \ncommunications, dependant on an \nembedded configuration string .\n\nT1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T his malware has been assessed to be of \nlow sophistication.\n\nThe Goofy Guineapig malware  contains multiple  similarities with the Jolly Jellyfish malware , \nparticularly relating to the defence  evasion techniques  implemented.\n\nThis could indicate a shared \norigin .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The rest of the information is collected by the relevant Windows APIs.\n\nIf the malware fails to collect any of this information, it will be replaced with the string � (none) �.\n\nThe \nadapter informati on and host name are co ncatenat ed and an MD5 hash of the result is taken.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='This same behaviour was observed during analysis of the Jolly Jellyfish malware.\n\nIn addition to this, Goofy Guineapig checks the name of each r unning process on the machine, and if \nany process containing the string �dbg�, �debug �, or �ida� is determined to be running , the malware \nwill not continue execution.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1027.002  Obfuscated Files or \nInformation: Software \nPacking  Goofy Guineapig is UPX packed and \npackaged in with a legitimate NSIS \ninstaller.\n\nT1140   Deobfuscate/Decode \nFiles or Information  Goofy Guineapig contains stack -based \nstrings which are obfuscated with single \nbyte XOR or subtraction throughout the \nbinary.')]
    
    full_text = "Based on the provided documents, the malware Goofy Guineapig has the capability to communicate with external servers. Here are the relevant findings:\n\n1. **HTTPS Communication**: The malware uses HTTPS for command and control (C2) communication, configured to utilize the non-standard port 4443 (Document id: '891c34b6-a467-4846-9a6e-1c8cd611a397').\n2. **UDP and KCP Protocol**: The malware contains functionality to communicate using UDP and the KCP protocol, or direct socket communications, depending on an embedded configuration string (Document id: '47c8a347-db52-409b-91b6-cd9a83a79db2').\n3. **HTTP Authorization String Header**: The malware uses a unique HTTP authorization string header, which is generated per infected machine, for C2 communication (Document id: '1b90ae03-ef62-4894-8730-4903f18528bf').\n\nThese findings indicate that the malware has the capability to communicate with external servers using various protocols, including HTTPS, UDP, and KCP."
    reference_texts = [doc.page_content for doc in docs]

    highlight_text(full_text, reference_texts)

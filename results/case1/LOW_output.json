[{"id": "60f3a48b-e7a6-4c75-84ad-d1939d366d23", "attack_steps": [{"id": "49f48523-6d3e-43d6-b778-3156e863be54", "name": "Create or Modify System Process: Windows Service as used by the malware", "description": "A new Windows service is created by the Goofy Guineapig malware utilizing functions such as CreateService or analogous API calls. This service definition encompasses parameters including the service name, description, executable file path (presumably its own code), and startup type (e.g., automatic).  Subsequently, the newly defined service is registered with the Windows Service Control Manager (SCM). Upon system startup or restart, the registered Goofy Guineapig service is automatically initiated by the SCM, ensuring continuous malware operation even after regular shutdowns or reboots. \n\n\n", "mitre_technique": {"id": "T1543.003", "name": "Create or modify system process: windows service", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry."}, "pre-conditions": ["\nWindows operating system.\n", "\nAbility to write to system files and registry keys.\n", "\nThe malware has successfully executed its initial payload.\n", "\nThe malware has access to necessary system functions for creating services.\n", "\nThe malware has determined it needs to establish persistence.\n", "\nAccess to the Windows Service Control Manager API.\n"], "post-conditions": ["\nAltered system settings\n", "\nCompromised system security\n", "\nNetwork traffic to command and control server\n", "\nHidden files or folders\n", "\nSystem instability\n", "\nData theft\n", "\nRemote access by attacker\n", "\nModified system files\n", "\nEvidence of data exfiltration\n", "\nRegistry modifications\n", "\nLog entries indicating suspicious activity\n", "\nNew processes running\n"], "indicators": ["A file named \"tmp.bat\" is located at \"C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\"."]}], "pre-conditions": ["\nWindows operating system.\n", "\nAbility to write to system files and registry keys.\n", "\nThe malware has successfully executed its initial payload.\n", "\nThe malware has access to necessary system functions for creating services.\n", "\nThe malware has determined it needs to establish persistence.\n", "\nAccess to the Windows Service Control Manager API.\n"], "post-conditions": ["\nAltered system settings\n", "\nCompromised system security\n", "\nNetwork traffic to command and control server\n", "\nHidden files or folders\n", "\nSystem instability\n", "\nData theft\n", "\nRemote access by attacker\n", "\nModified system files\n", "\nEvidence of data exfiltration\n", "\nRegistry modifications\n", "\nLog entries indicating suspicious activity\n", "\nNew processes running\n"]}, {"id": "e4bd9c7e-9d08-49de-bb2c-6327202e3653", "attack_steps": [{"id": "4b3cdf66-ba12-4cb5-9927-492881fc6c04", "name": "Masquerading: Match Legitimate Name or Location as used by the malware", "description": "The malware employs a technique of masquerading by incorporating itself within a legitimate NSIS Firefox installer package. This packaging strategy leads users to perceive the installation as an update for Firefox, thereby inducing them to execute the malicious code.  Furthermore, upon installation, the malware may present itself as a Google updater component, thus perpetuating the facade of legitimacy. \n\n\n", "mitre_technique": {"id": "T1036.005", "name": "Masquerading: match legitimate name or location", "description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous."}, "pre-conditions": ["\nAccess to the target system's file system.\n", "\nA target system with a running operating system.\n", "\nA legitimate GoogleUpdate.exe executable exists.\n", "\nA legitimate Firefox installation package exists.\n", "\nThe ability to execute code on the target system.\n"], "post-conditions": ["\nMasquerading as legitimate software (Firefox installer and Google updater).\n", "\nLog entries related to service creation and execution.\n", "\nData exfiltration to a command and control server via HTTPS.\n", "\nUnusual process activity logs.\n", "\nFiles modified or created by the malware.\n", "\nNetwork traffic to the C2 server over HTTPS.\n", "\nPersistence on the system through a Windows service.\n", "\nModified system processes.\n", "\nUPX packed binary files.\n", "\nNew Windows service created.\n", "\nModified system files.\n"], "indicators": ["The file \"tmp.bat\" is located in the directory \"C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\"."]}, {"id": "159afa09-8d7c-4863-9f9c-802de99e3206", "name": "Virtualization/Sandbox Evasion: Time Based Evasion as used by the malware", "description": "Upon initialization, Goofy Guineapig retrieves the current value of the CPU timestamp counter. Subsequently, an immediate second reading of the timestamp counter is performed. The difference between these two readings is then compared against a threshold of 100 milliseconds. If the time difference exceeds this threshold, execution of Goofy Guineapig is terminated. This behavior suggests that the malware employs a time-based evasion technique, potentially designed to detect artificially slowed execution environments commonly encountered in sandboxes or virtual analysis platforms.  \n", "mitre_technique": {"id": "T1497.003", "name": "Virtualization/sandbox evasion: time based evasion", "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time."}, "pre-conditions": ["\nA host system with a functioning CPU.\n", "\nThe Goofy Guineapig malware is running.\n", "\nThe system has a functioning CPU timestamp counter.\n", "\nThe malware is executing.\n"], "post-conditions": ["\nPotential data exfiltration\n", "\nMalware execution\n", "\nPersistence on the system\n", "\nNew files created by the malware\n", "\nModified system files\n", "\nRegistry entries added or modified\n", "\nLogs containing suspicious activity\n", "\nSystem compromise\n", "\nChanges in system performance\n", "\nUnusual process activity\n", "\nNetwork connections to command and control servers\n"], "indicators": ["The malware utilizes a time-based evasion technique."]}, {"id": "e8989e62-6204-4200-8174-39c723987556", "name": "Virtualization/Sandbox Evasion: System Checks as used by the malware", "description": "System resource checks are conducted by Goofy Guineapig malware to identify virtualization or sandbox environments.  These checks encompass an evaluation of disk size, physical memory, and logical processor count. Discrepancies between measured values and predefined expectations for these resources may indicate a restricted environment, leading to the termination of malware execution. \n\n\n", "mitre_technique": {"id": "T1497.001", "name": "Virtualization/sandbox evasion: system checks", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors."}, "pre-conditions": ["\nA Windows operating system.\n", "\nThe system has a disk.\n", "\nThe malware is executing.\n", "\nThe system has physical memory.\n", "\nThe system has logical processors.\n", "\nAccess to relevant Windows APIs.\n"], "post-conditions": ["\nNew files created with malicious code.\n", "\nGoofy Guineapig malware will not execute if system checks fail.\n", "\nTraces of communication protocols like HTTP, HTTPS, and KCP.\n", "\nChanges to system time.\n", "\nModified system registry entries.\n", "\nDeleted or modified original files.\n", "\nNetwork connections to command and control servers.\n", "\nLogs indicating suspicious activity.\n", "\nModified system configuration files.\n"], "indicators": ["The system checks for virtualization software presence."]}, {"id": "83ee7605-9930-4dfc-b15c-2362c514beb1", "name": "Virtualization/Sandbox Evasion: User Activity Based Checks as used by the malware", "description": "Process name enumeration is employed by Goofy Guineapig to identify potential sandbox or debugging environments.  A list of running processes is acquired from the infected system. Each process name is subsequently examined for strings indicative of debugging or reverse engineering tools. The presence of strings such as \"dbg\", \"debug\", or \"ida\" within a process name triggers immediate termination of Goofy Guineapig's execution. \n", "mitre_technique": {"id": "T1497.002", "name": "Virtualization/sandbox evasion: user activity based checks", "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors."}, "pre-conditions": ["\nThe malware can read process names.\n", "\nProcesses are running on the system.\n", "\nThe malware is running.\n"], "post-conditions": ["\nData exfiltration\n", "\nCompromised system\n", "\nExecution of malicious plugins\n", "\nUnusual disk activity patterns\n", "\nSystem instability\n", "\nNew processes running (e.g., dllhost.exe with injected payload)\n", "\nModified system files\n", "\nHidden or encrypted files containing malware data\n", "\nNetwork traffic to C2 server\n", "\nAltered registry settings\n", "\nLog entries indicating suspicious activity\n"], "indicators": ["The process name is \"tmp.bat\".", "The file path includes \"C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\\tmp.bat\"."]}, {"id": "2ede4790-505b-429c-8837-8f4495fe68c4", "name": "Obfuscated Files or Information: Software Packing as used by the malware", "description": "The malware \"Goofy Guineapig\" undergoes UPX packing for code obfuscation. Its original binary is compressed and encrypted utilizing the UPX packer tool.  Additionally, it is presented as a legitimate program by being incorporated within an NSIS installer, commonly associated with Firefox updates. This combination of techniques effectively conceals the malicious intent of \"Goofy Guineapig\" from security software analysis and user scrutiny. \n\n\n", "mitre_technique": {"id": "T1027.002", "name": "Obfuscated files or information: software packing", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code."}, "pre-conditions": ["\nThe malware executable exists.\n", "\nThe malware utilizes UPX packing.\n", "\nA system with sufficient resources to execute the malware.\n", "\nThe presence of a UPX unpacking tool.\n"], "post-conditions": ["\nData exfiltration\n", "\nCompromised system\n", "\nHidden processes\n", "\nAltered system files\n", "\nLogs of suspicious activity\n", "\nSystem instability\n", "\nUPX packed files\n", "\nRemote access by attacker\n", "\nBackdoor functionality embedded in legitimate software\n", "\nEncrypted data files\n", "\nModified registry entries\n", "\nNew user accounts\n", "\nNetwork traffic to C2 server\n", "\nObfuscated code\n"], "indicators": ["The file \"tmp.bat\" is located in the directory \"C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\".", "The file \"config.dat\" has a SHA-256 hash of \"3a1af09a0250c602569d458e79db90a45e305b76d8423b81eeeca14c69847b81c\".", "The file \"GoogUpdate\" is located in the directory \"C:\\ProgramData\\GoogleUpdate\"."]}, {"id": "9a8ca7e5-84a3-4466-a52d-7bc9d7fa44fa", "name": "Deobfuscate/Decode Files or Information as used by the malware", "description": "The malware \"Goofy Guineapig\" employs stack-based string obfuscation techniques involving single-byte XOR or subtraction operations.  String data is stored on the program's call stack rather than directly within the binary executable. Each character within these strings is subjected to either XOR or subtraction operations utilizing a specific key for obfuscation purposes. Decryption necessitates the application of the same operation (XOR or subtraction) with the corresponding key to recover the original characters.  \n\nThe deobfuscation process appears to be contingent upon the successful completion of \"request 0x15\" preceding the XOR or subtraction operations, indicating a potential sequential dependency within the malware's execution flow.   \n", "mitre_technique": {"id": "T1140", "name": "Deobfuscate/decode files or information", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system."}, "pre-conditions": ["\nThe ability to analyze and interpret binary code.\n", "\nThe malware binary contains stack-based strings.\n", "\nThe malware binary \"Goofy Guineapig\" is present.\n"], "post-conditions": ["\nData exfiltration\n", "\nDeobfuscated shellcode\n", "\nBackdoor configuration embedded in binary\n", "\nAltered file timestamps\n", "\nCommand and control communication established\n", "\nModified system registry entries\n", "\nProcess creation and termination logs\n", "\nSandbox evasion attempts logged\n", "\nNetwork traffic logs (HTTP, HTTPS, KCP)\n", "\nObfuscated files\n", "\nNew or modified files on the system\n", "\nSystem compromise\n", "\nMalware persistence\n", "\nUnusual memory usage patterns\n"], "indicators": ["The file \"tmp.bat\" is located at \"C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\".", "The malware uses the User Agent string \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36\"."]}, {"id": "dbc685c2-aef5-4f46-a40d-4a5d1d2201bf", "name": "Hide Artifacts: Hidden Window as used by the malware", "description": "The malware \"Goofy Guineapig\" employs process hollowing to conceal its presence within the legitimate dllhost.exe process.  This technique involves the identification of the dllhost.exe process, which is commonly utilized for hosting ActiveX controls and Browser Helper Objects (BHOs). Subsequently, malicious code is injected into the memory space of the running dllhost.exe process, replacing the original legitimate code. This results in a \"hollowed-out\" shell of the original process.  The malware's own code then executes within this hollowed-out dllhost.exe process. Due to the execution of malicious code within an existing, legitimate process, detection by security software focused on identifying unknown or suspicious processes is less likely. As a consequence, a hidden backdoor communication channel is established utilizing a non-standard HTTPS port (4443). \n\n\n", "mitre_technique": {"id": "T1564.003", "name": "Hide artifacts: hidden window", "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks."}, "pre-conditions": ["\nThe malware has access to system processes and memory.\n", "\nThe malware has successfully executed process hollowing on a legitimate process.\n", "\nA running instance of the Goofy Guineapig malware exists.\n", "\nAn active internet connection is required for the malware to communicate with its command and control server.\n"], "post-conditions": ["\nData exfiltration\n", "\nAltered process listings\n", "\nUnusual network traffic logs\n", "\nSuspicious command-and-control communication logs\n", "\nNew files created in unexpected locations\n", "\nRemote code execution\n", "\nSystem instability\n", "\nModified system registry entries\n", "\nCompromised system functionality\n", "\nModified system timestamps\n", "\nEncrypted data transfers\n", "\nPersistence mechanisms (e.g., scheduled tasks, boot-time execution)\n", "\nHidden windows and processes\n", "\nIncreased security risks\n"], "indicators": ["The process hides its window."]}, {"id": "0f49cb5e-cdf7-405f-a5e7-d557c797755a", "name": "Indicator Removal on Host: File Deletion as used by the malware", "description": "\"Indicator Removal on Host: File Deletion\" is achieved through a multi-step process. Initial execution initiates the malware's operation from its downloaded location. Subsequently, malicious files, including the malware itself, are relocated to a directory designed to appear legitimate and secure. This relocation obfuscates the malware's original presence from security tools. Following relocation, the original files are deleted from the initial download location, effectively removing traces of the initial infection point.  \n", "mitre_technique": {"id": "T1070.004", "name": "Indicator removal: file deletion", "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint."}, "pre-conditions": ["\nThe malicious files have been copied to the ProgramData directory.\n", "\nThe malware possesses knowledge of the original file path of GoogleUpdate.exe and Goopdate.dll.\n", "\nA command line interface is available.\n", "\nThe malware has successfully established persistence on the host system.\n", "\nThe malware has write access to the directory containing the extracted Firefox files.\n", "\nA file system is present and accessible.\n"], "post-conditions": ["\nData exfiltration potentially occurring via HTTPS.\n", "\nNew files in ProgramData directory.\n", "\nMalicious files present in ProgramData directory.\n", "\nPotential artifacts from sandbox evasion techniques (e.g., modified system configurations).\n", "\nNetwork traffic logs showing HTTPS connections to C2 server.\n", "\nFiles deleted from initial download location.\n", "\nSystem event logs indicating process creation and file modifications.\n", "\nCompromised system with malicious backdoor installed.\n", "\nModified registry entries for persistence.\n", "\nPersistence mechanism established on the system.\n"], "indicators": ["A file named \"tmp.bat\" was located in the directory \"C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\".", "The file \"config.dat\" had its MD5 hash value calculated as \"3dc1096e73db4886fb66ed9413ca994c\"."]}, {"id": "27fc8f28-adfc-43a4-9e63-33f7573406ba", "name": "Hijack Execution Flow: DLL Side-Loading as used by the malware", "description": "The \"Hijack Execution Flow: DLL Side-Loading\" tactic employed by the Goofy Guineapig malware involves the following steps:\n\nA trojanized NSIS installer, disguised as a Firefox update component and packed with UPX, is utilized to deliver two key components: a legitimate signed executable (e.g., GoogleUpdate.exe) and a malicious DLL file (Goofy Guineapig). \n\nThe legitimate executable is designed to dynamically load DLLs.  Exploitation of this behavior occurs when the malicious Goofy Guineapig DLL is placed in the same directory as the legitimate executable. Upon execution, the legitimate executable automatically attempts to load available DLLs in its directory, resulting in the malicious Goofy Guineapig DLL being loaded into memory alongside it.\n\nPersistence is achieved by the creation of a Windows service by the Goofy Guineapig malware, ensuring continuous background operation even after user logouts or system restarts. \n\n\n", "mitre_technique": {"id": "T1574.002", "name": "Hijack execution flow: dll side-loading", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s)."}, "pre-conditions": ["\nThe system's architecture is compatible with the malware.\n", "\nA malicious DLL is present alongside the legitimate executable.\n", "\nA legitimate executable is installed by the Goofy Guineapig loader.\n", "\nA system with a running instance of the legitimate signed executable GoogleUpdate.exe.\n"], "post-conditions": ["", "\nModified system registry entries.\n", "\nUnusual file access patterns.\n", "\nLog files containing suspicious activity.\n"], "indicators": ["The file \"tmp.bat\" is located in the directory \"C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\".", "The malware utilizes a DLL side-loading technique by referencing the file \"config.dat\"."]}, {"id": "5dae49fd-aaeb-4193-af0e-aa9e1c26129d", "name": "Process Injection: Process Hollowing as used by the malware", "description": "The dllhost.exe binary is targeted by Goofy Guineapig for Process Hollowing to inject malicious code retrieved from its Command and Control (C2) server.  A copy of the target process's memory space is created by allocating a new memory region of equal size and copying crucial process headers from the original dllhost.exe process into this newly allocated memory. Subsequently, malicious code downloaded from the C2 server is written into the now-empty memory space of the hollowed dllhost.exe process. The Entry Point of the original dllhost.exe process is redirected to the newly injected malicious code. As a result, the seemingly legitimate dllhost.exe process executes the downloaded malware, effectively concealing its true nature and enabling undetected execution. \n\n\n", "mitre_technique": {"id": "T1055.012", "name": "Process injection: process hollowing", "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process."}, "pre-conditions": ["\nThe malware has downloaded malicious content from the C2 server.\n", "\nThe malware has access to the memory space of the dllhost.exe process.\n"], "post-conditions": ["\nHidden files or folders containing malicious code.\n", "\nUnusual activity logs related to network traffic and process creation.\n", "\nAltered system files or registry settings.\n", "\nNetwork connections to C2 server.\n", "\nLog entries indicating process injection and execution.\n", "\nNew DLL file present in system.\n", "\nModified dllhost.exe process memory.\n", "\nPersistence mechanism established.\n", "\nData exfiltration potentially occurring.\n", "\nCompromised system with malicious DLL loaded.\n"], "indicators": ["The process name is \"tmp.bat\".", "The file path includes \"C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\\tmp.bat\"."]}, {"id": "aa177a8f-37d6-4f23-862b-c3180aa2a8e5", "name": "Signed Binary Proxy Execution: Rundll32 as used by the malware", "description": "The malware employs rundll32.exe and url.dll to facilitate persistent execution.  A legitimate signed executable is utilized by the Goofy Guineapig loader to enhance its perceived legitimacy. Rundll32.exe is leveraged to execute functions within url.dll, rather than directly launching the malicious DLL. Specific functions within url.dll are invoked to dynamically load and execute the malicious DLL. This indirect method obfuscates the true nature of the loaded code from system monitoring tools.  \n\n\n", "mitre_technique": {"id": "T1218.011", "name": "System binary proxy execution: rundll32", "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction})."}, "pre-conditions": ["exe tool is available.", "\nThe url.dll library is accessible.\n", "\nNetwork connectivity is available for the malware to download the malicious DLL.\n"], "post-conditions": ["\nCompromised system\n", "\nSystem instability\n", "\nData theft\n", "\nRemote access by attacker\n", "\nModified system files\n", "\nHidden or encrypted data\n", "\nModified legitimate executable\n", "\nNew Windows service\n", "\nUnusual process creation and execution patterns\n", "\nLog files containing suspicious activity\n", "\nNetwork traffic to C2 server\n", "\nMalicious DLL file\n", "\nAltered registry entries\n"], "indicators": ["The file \"tmp.bat\" is located at \"C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\"."]}], "pre-conditions": ["\nAccess to the target system's file system.\n", "\nA target system with a running operating system.\n", "\nA legitimate GoogleUpdate.exe executable exists.\n", "\nA legitimate Firefox installation package exists.\n", "\nThe ability to execute code on the target system.\n", "\nA host system with a functioning CPU.\n", "\nThe Goofy Guineapig malware is running.\n", "\nThe system has a functioning CPU timestamp counter.\n", "\nThe malware is executing.\n", "\nA Windows operating system.\n", "\nThe system has a disk.\n", "\nThe malware is executing.\n", "\nThe system has physical memory.\n", "\nThe system has logical processors.\n", "\nAccess to relevant Windows APIs.\n", "\nThe malware can read process names.\n", "\nProcesses are running on the system.\n", "\nThe malware is running.\n", "\nThe malware executable exists.\n", "\nThe malware utilizes UPX packing.\n", "\nA system with sufficient resources to execute the malware.\n", "\nThe presence of a UPX unpacking tool.\n", "\nThe ability to analyze and interpret binary code.\n", "\nThe malware binary contains stack-based strings.\n", "\nThe malware binary \"Goofy Guineapig\" is present.\n", "\nThe malware has access to system processes and memory.\n", "\nThe malware has successfully executed process hollowing on a legitimate process.\n", "\nA running instance of the Goofy Guineapig malware exists.\n", "\nAn active internet connection is required for the malware to communicate with its command and control server.\n", "\nThe malicious files have been copied to the ProgramData directory.\n", "\nThe malware possesses knowledge of the original file path of GoogleUpdate.exe and Goopdate.dll.\n", "\nA command line interface is available.\n", "\nThe malware has successfully established persistence on the host system.\n", "\nThe malware has write access to the directory containing the extracted Firefox files.\n", "\nA file system is present and accessible.\n", "\nThe system's architecture is compatible with the malware.\n", "\nA malicious DLL is present alongside the legitimate executable.\n", "\nA legitimate executable is installed by the Goofy Guineapig loader.\n", "\nA system with a running instance of the legitimate signed executable GoogleUpdate.exe.\n", "\nThe malware has downloaded malicious content from the C2 server.\n", "\nThe malware has access to the memory space of the dllhost.exe process.\n", "exe tool is available.", "\nThe url.dll library is accessible.\n", "\nNetwork connectivity is available for the malware to download the malicious DLL.\n"], "post-conditions": ["\nMasquerading as legitimate software (Firefox installer and Google updater).\n", "\nLog entries related to service creation and execution.\n", "\nData exfiltration to a command and control server via HTTPS.\n", "\nUnusual process activity logs.\n", "\nFiles modified or created by the malware.\n", "\nNetwork traffic to the C2 server over HTTPS.\n", "\nPersistence on the system through a Windows service.\n", "\nModified system processes.\n", "\nUPX packed binary files.\n", "\nNew Windows service created.\n", "\nModified system files.\n", "\nPotential data exfiltration\n", "\nMalware execution\n", "\nPersistence on the system\n", "\nNew files created by the malware\n", "\nModified system files\n", "\nRegistry entries added or modified\n", "\nLogs containing suspicious activity\n", "\nSystem compromise\n", "\nChanges in system performance\n", "\nUnusual process activity\n", "\nNetwork connections to command and control servers\n", "\nNew files created with malicious code.\n", "\nGoofy Guineapig malware will not execute if system checks fail.\n", "\nTraces of communication protocols like HTTP, HTTPS, and KCP.\n", "\nChanges to system time.\n", "\nModified system registry entries.\n", "\nDeleted or modified original files.\n", "\nNetwork connections to command and control servers.\n", "\nLogs indicating suspicious activity.\n", "\nModified system configuration files.\n", "\nData exfiltration\n", "\nCompromised system\n", "\nExecution of malicious plugins\n", "\nUnusual disk activity patterns\n", "\nSystem instability\n", "\nNew processes running (e.g., dllhost.exe with injected payload)\n", "\nModified system files\n", "\nHidden or encrypted files containing malware data\n", "\nNetwork traffic to C2 server\n", "\nAltered registry settings\n", "\nLog entries indicating suspicious activity\n", "\nData exfiltration\n", "\nCompromised system\n", "\nHidden processes\n", "\nAltered system files\n", "\nLogs of suspicious activity\n", "\nSystem instability\n", "\nUPX packed files\n", "\nRemote access by attacker\n", "\nBackdoor functionality embedded in legitimate software\n", "\nEncrypted data files\n", "\nModified registry entries\n", "\nNew user accounts\n", "\nNetwork traffic to C2 server\n", "\nObfuscated code\n", "\nData exfiltration\n", "\nDeobfuscated shellcode\n", "\nBackdoor configuration embedded in binary\n", "\nAltered file timestamps\n", "\nCommand and control communication established\n", "\nModified system registry entries\n", "\nProcess creation and termination logs\n", "\nSandbox evasion attempts logged\n", "\nNetwork traffic logs (HTTP, HTTPS, KCP)\n", "\nObfuscated files\n", "\nNew or modified files on the system\n", "\nSystem compromise\n", "\nMalware persistence\n", "\nUnusual memory usage patterns\n", "\nData exfiltration\n", "\nAltered process listings\n", "\nUnusual network traffic logs\n", "\nSuspicious command-and-control communication logs\n", "\nNew files created in unexpected locations\n", "\nRemote code execution\n", "\nSystem instability\n", "\nModified system registry entries\n", "\nCompromised system functionality\n", "\nModified system timestamps\n", "\nEncrypted data transfers\n", "\nPersistence mechanisms (e.g., scheduled tasks, boot-time execution)\n", "\nHidden windows and processes\n", "\nIncreased security risks\n", "\nData exfiltration potentially occurring via HTTPS.\n", "\nNew files in ProgramData directory.\n", "\nMalicious files present in ProgramData directory.\n", "\nPotential artifacts from sandbox evasion techniques (e.g., modified system configurations).\n", "\nNetwork traffic logs showing HTTPS connections to C2 server.\n", "\nFiles deleted from initial download location.\n", "\nSystem event logs indicating process creation and file modifications.\n", "\nCompromised system with malicious backdoor installed.\n", "\nModified registry entries for persistence.\n", "\nPersistence mechanism established on the system.\n", "", "\nModified system registry entries.\n", "\nUnusual file access patterns.\n", "\nLog files containing suspicious activity.\n", "\nHidden files or folders containing malicious code.\n", "\nUnusual activity logs related to network traffic and process creation.\n", "\nAltered system files or registry settings.\n", "\nNetwork connections to C2 server.\n", "\nLog entries indicating process injection and execution.\n", "\nNew DLL file present in system.\n", "\nModified dllhost.exe process memory.\n", "\nPersistence mechanism established.\n", "\nData exfiltration potentially occurring.\n", "\nCompromised system with malicious DLL loaded.\n", "\nCompromised system\n", "\nSystem instability\n", "\nData theft\n", "\nRemote access by attacker\n", "\nModified system files\n", "\nHidden or encrypted data\n", "\nModified legitimate executable\n", "\nNew Windows service\n", "\nUnusual process creation and execution patterns\n", "\nLog files containing suspicious activity\n", "\nNetwork traffic to C2 server\n", "\nMalicious DLL file\n", "\nAltered registry entries\n"]}, {"id": "9fd86533-1e97-4d8a-8ba6-1f9583f86c9e", "attack_steps": [{"id": "7cb7bd29-f2c8-49da-b87d-87c1f1879dea", "name": "System Information Discovery as used by the malware", "description": "System Information Discovery performed by Goofy Guineapig involves the surreptitious collection of victim machine data through various techniques.  \n\nData acquisition encompasses Operating System Caption, Antivirus Product Display Name, Adapter Information, Host and Host Name, and Computer Name. \n\nCOM and WMI are leveraged to retrieve Operating System Caption and Antivirus Product Display Name. Windows APIs facilitate the collection of Adapter Information, Host and Host Name, and Computer Name.\n\nCollected information undergoes obfuscation and is subsequently embedded within an \"Authorization\" string contained in the HTTP header of communications directed to the Command and Control (C2) server.  This method enables discreet transmission of sensitive system details to the C2 server without eliciting suspicion through direct data transfers. \n\n\n", "mitre_technique": {"id": "T1082", "name": "System information discovery", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."}, "pre-conditions": ["\nNetwork connectivity to send the collected information to the C2 server.\n", "\nAccess to the Windows Management Instrumentation (WMI) through COM.\n", "\nA running Windows operating system.\n", "\nThe malware is running on a victim machine.\n", "\nAccess to relevant Windows APIs.\n", "\nThe malware has access to COM to access WMI information.\n"], "post-conditions": ["\nData exfiltration\n", "\nCompromised system\n", "\nWMI information accessed and potentially modified\n", "\nMD5 hashes of concatenated information\n", "\nObfuscated strings in HTTP headers\n", "\nModified system registry\n", "\nXOR encoded data\n", "\nRC4 encrypted data\n", "\nPotential for further malicious activity\n", "\nNetwork traffic logs showing communication with C2 server\n", "\nNew files created or modified\n", "\nProcess hollowing of dllhost.exe\n", "\nWindows API calls logged\n"], "indicators": ["The system's operating system is Windows NT 6.1.", "The system architecture is WOW64."]}], "pre-conditions": ["\nNetwork connectivity to send the collected information to the C2 server.\n", "\nAccess to the Windows Management Instrumentation (WMI) through COM.\n", "\nA running Windows operating system.\n", "\nThe malware is running on a victim machine.\n", "\nAccess to relevant Windows APIs.\n", "\nThe malware has access to COM to access WMI information.\n"], "post-conditions": ["\nData exfiltration\n", "\nCompromised system\n", "\nWMI information accessed and potentially modified\n", "\nMD5 hashes of concatenated information\n", "\nObfuscated strings in HTTP headers\n", "\nModified system registry\n", "\nXOR encoded data\n", "\nRC4 encrypted data\n", "\nPotential for further malicious activity\n", "\nNetwork traffic logs showing communication with C2 server\n", "\nNew files created or modified\n", "\nProcess hollowing of dllhost.exe\n", "\nWindows API calls logged\n"]}, {"id": "494eac3d-47c4-4b1f-b654-62cc64b769e0", "attack_steps": [{"id": "7f8d6697-b537-4bc2-8c86-e31f846cada0", "name": "Application Layer Protocol: Web Protocols as used by the malware", "description": "Command and Control (C2) communications are conducted via HTTPS (Hypertext Transfer Protocol Secure).  Encrypted connections are established with command servers to ensure the confidentiality of data exchanged between the malware and its operators. \n\n\n", "mitre_technique": {"id": "T1071.001", "name": "Application layer protocol: web protocols", "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server."}, "pre-conditions": ["\nNetwork connectivity to static[.]tcplog[.]com.\n", "\nThe malware is running.\n", "\nHTTPS protocol support.\n", "\nA system infected with the Goofy Guineapig malware.\n"], "post-conditions": ["\nData exfiltration\n", "\nCompromised system\n", "\nModified system configuration files\n", "\nNew files created in various directories\n", "\nSystem instability\n", "\nModified system registry entries\n", "\nUPX packed loader file\n", "\nXOR encrypted data\n", "\nLog entries indicating suspicious activity\n", "\nObfuscated code remnants\n", "\nNetwork traffic to C2 server (HTTPS, UDP)\n", "\nRC4 encrypted communication logs\n", "\nMalware persistence\n"], "indicators": ["The URL HTTPS://static.tcplog.com is accessed.", "A User Agent string indicating Chrome/54.0.2840.71 Safari/537.36 is used."]}, {"id": "903b1b47-4ab1-45a2-8620-fbf8ec555c81", "name": "Fallback Channels as used by the malware", "description": "Fallback communication channels within the \"Goofy Guineapig\" malware are determined by an embedded configuration string.  Protocol selection for communication is dynamically executed based on the contents of this string. The available protocols include UDP, KCP, and direct socket communications. Each protocol offers distinct characteristics: UDP facilitates faster but less reliable communication; KCP provides a fast and secure protocol optimized for high-performance, low-latency connections; and direct socket communications enable more controlled and potentially encrypted interactions.  \n\n\n", "mitre_technique": {"id": "T1008", "name": "Fallback channels", "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds."}, "pre-conditions": ["\nThe ability to communicate over UDP.\n", "\nA system with a network connection.\n", "\nKnowledge of the KCP protocol.\n", "\nThe malware is running.\n", "\nThe embedded configuration string contains UDP rather than HTTP(S).\n"], "post-conditions": ["\nData exfiltration\n", "\nCompromised system\n", "\nModified system configuration files\n", "\nNew executables and registry entries\n", "\nSystem instability\n", "\nModified firewall rules\n", "\nNetwork traffic to malicious servers\n", "\nUnusual log entries\n", "\nDNS requests to suspicious domains\n", "\nEncrypted data files\n", "\nMalware persistence\n", "\nShadow copies of infected files\n"], "indicators": ["The file tmp.bat is located in the directory C:\\ProgramData\\GoogleUpdate\\GoogleUpdate."]}, {"id": "fa51b383-f827-428a-bf14-6cc1ceee021d", "name": "Non-Standard Port as used by the malware", "description": "Goofy Guineapig malware establishes communication with its command and control (C2) server on non-standard HTTPS port 4443.  This practice deviates from the standard utilization of port 443 for HTTPS traffic.  \n", "mitre_technique": {"id": "T1571", "name": "Non-standard port", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data."}, "pre-conditions": ["\nThe malware is configured to use HTTPS communication.\n", "\nNetwork connectivity to observe the malware's communication.\n", "\nAbility to monitor network traffic.\n", "\nThe malware \"Goofy Guineapig\" is present in the system.\n"], "post-conditions": ["\nData exfiltration\n", "\nCompromised system\n", "\nNew files created (e.g., malicious DLLs, configuration files)\n", "\nDNS queries for malicious domains\n", "\nSystem instability\n", "\nFirewall rules modifications\n", "\nModified system registry entries\n", "\nUnusual process activity logs\n", "\nAltered system event logs\n", "\nNetwork traffic to command and control servers (static[.]tcplog[.]com)\n", "\nModified system services configurations\n", "\nMalware persistence\n"], "indicators": []}], "pre-conditions": ["\nNetwork connectivity to static[.]tcplog[.]com.\n", "\nThe malware is running.\n", "\nHTTPS protocol support.\n", "\nA system infected with the Goofy Guineapig malware.\n", "\nThe ability to communicate over UDP.\n", "\nA system with a network connection.\n", "\nKnowledge of the KCP protocol.\n", "\nThe malware is running.\n", "\nThe embedded configuration string contains UDP rather than HTTP(S).\n", "\nThe malware is configured to use HTTPS communication.\n", "\nNetwork connectivity to observe the malware's communication.\n", "\nAbility to monitor network traffic.\n", "\nThe malware \"Goofy Guineapig\" is present in the system.\n"], "post-conditions": ["\nData exfiltration\n", "\nCompromised system\n", "\nModified system configuration files\n", "\nNew files created in various directories\n", "\nSystem instability\n", "\nModified system registry entries\n", "\nUPX packed loader file\n", "\nXOR encrypted data\n", "\nLog entries indicating suspicious activity\n", "\nObfuscated code remnants\n", "\nNetwork traffic to C2 server (HTTPS, UDP)\n", "\nRC4 encrypted communication logs\n", "\nMalware persistence\n", "\nData exfiltration\n", "\nCompromised system\n", "\nModified system configuration files\n", "\nNew executables and registry entries\n", "\nSystem instability\n", "\nModified firewall rules\n", "\nNetwork traffic to malicious servers\n", "\nUnusual log entries\n", "\nDNS requests to suspicious domains\n", "\nEncrypted data files\n", "\nMalware persistence\n", "\nShadow copies of infected files\n", "\nData exfiltration\n", "\nCompromised system\n", "\nNew files created (e.g., malicious DLLs, configuration files)\n", "\nDNS queries for malicious domains\n", "\nSystem instability\n", "\nFirewall rules modifications\n", "\nModified system registry entries\n", "\nUnusual process activity logs\n", "\nAltered system event logs\n", "\nNetwork traffic to command and control servers (static[.]tcplog[.]com)\n", "\nModified system services configurations\n", "\nMalware persistence\n"]}]
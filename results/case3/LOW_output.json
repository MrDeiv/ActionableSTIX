[{"id": "ba94baac-d1b5-42ce-bf5e-0a86182f6659", "attack_steps": [{"id": "4e62512e-b297-4efc-b9b0-975f7e613c91", "name": "Command and Scripting Interpreter: Python as used by the malware", "description": "The MuddyWater Small Sieve backdoor is implemented as a Python script packaged using PyInstaller. This packaging process results in an executable file capable of execution on systems independent of a pre-installed Python interpreter.  \n", "mitre_technique": {"id": "T1059.006", "name": "Command and scripting interpreter: python", "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables."}, "pre-conditions": ["\nA Python interpreter is available on the target system.\n", "\nAccess for the malware to execute Python scripts.\n"], "post-conditions": ["\nCompromised system with persistent access for attackers.\n", "\nModified system startup settings for persistent access.\n", "\nExecution of malicious scripts and payloads.\n", "\nBase64 encoded data and JSON files related to C2 communication.\n", "\nLogs from the NSIS installer used for distribution.\n", "\nData exfiltration from the victim system.\n", "\nPython scripts and associated files (\"Small Sieve\" backdoor).\n", "\nWeb service logs showing communication with compromised websites.\n", "\nNew files created with .old extension containing DLLs.\n", "\nPotential modification of system settings and configurations.\n", "\nPowerShell scripts and logs indicating execution of malicious code.\n", "\nRegistry keys modifications (HKLM\\Software \\NFC\\IPA and HKLM\\Software \\NFC\\(Default )).\n", "\nModified Office documents containing exploits (CVE-2017-0199).\n", "\nNetwork connections to command and control (C2) servers.\n"], "indicators": []}]}, {"id": "2f2ce4ab-27b1-4f74-a013-1dc252457b63", "attack_steps": [{"id": "8fc4939b-ea80-49af-bf40-f022d3820274", "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder as used by the malware", "description": "Persistence is established by the malware through the addition of a registry run key under the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run subkey.  A new entry, designated as \"SystemTextEncoding\" or potentially \"OutlookMicrosift\", is created with the path to the malicious binary as its value. This configuration results in the automatic execution of the malware upon each system boot or user logon. \n", "mitre_technique": {"id": "T1547.001", "name": "Boot or logon autostart execution: registry run keys / startup folder", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level."}, "pre-conditions": ["\nA Windows operating system with administrative privileges.\n", "\nThe ability to write to the registry.\n", "\nThe malware code itself.\n", "\nThe malware has access to the registry.\n", "\nThe target system is running a supported operating system.\n"], "post-conditions": ["", "\nPython script (Small Sieve) packed with PyInstaller.\n", "\nBackdoor binary index.exe installed in the user's AppData/Roaming directory.\n", "\nLog entries related to PowerShell script execution and backdoor activity.\n"], "indicators": ["Registry value name: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift", "Path: %AppData%\\OutlookMicrosift\\index.exe"]}]}, {"id": "673f7868-9767-463b-a938-1859c2477dea", "attack_steps": [{"id": "807e7eda-32e6-43c7-bf62-c0f4ec8d80f1", "name": "Obfuscated Files or Information as used by the malware", "description": "The program strings and Telegram credentials employed by Small Sieve are subject to a two-stage obfuscation process.  \n\nInitially, custom hexadecimal byte swapping is executed, rearranging the data's constituent bytes according to a predetermined pattern. Subsequently, an obfuscated variant of the Base64 encoding scheme is applied to the byte-swapped data, rendering it more resistant to direct interpretation and necessitating specialized decryption methodologies. \n", "mitre_technique": {"id": "T1027.013", "name": "Obfuscated files or information: encrypted/encoded file", "description": "Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use."}, "pre-conditions": ["\nAn obfuscated Base64 function is available.\n", "\nProgram strings and Telegram credentials exist within the malware.\n", "\nThe malware Small Sieve is present in the environment.\n", "\nA custom hex byte swapping encoding scheme is available.\n"], "post-conditions": ["\nCompromised system with persistent access for attackers.\n", "\nPowerShell scripts used for maintaining persistent access.\n", "\nData exfiltration from victim systems.\n", "\nIncreased risk of further attacks and malware infections.\n", "\nLog entries indicating communication with the C2 server.\n", "\nModified Registry Keys (HKLM\\Software\\NFC\\IPA, HKLM\\Software\\NFC(Default)).\n", "\nNetwork traffic using HTTP over IPv4 or IPv6 to C2 server.\n", "\nModified %LocalAppData%\\MicrosoftWindowsOutlookDataPlus.txt file.\n", "\nCustom hex byte swapping encoding scheme applied to tasking traffic.\n", "\nObfuscated program strings and Telegram credentials stored in memory.\n", "\nPotential disruption of normal system operations.\n", "\nNew files with .old extensions containing obfuscated code.\n"], "indicators": ["Small Sieve sample (Filename: gram_app.exe)", "Small Sieve sample (Filename: index.exe)", "Path: %LocalAppData%\\MicrosoftWindowsOutlookDataPlus.txt", "Registry value name: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift", "Path: %AppData%\\OutlookMicrosift\\index.exe"]}, {"id": "a0028d40-10f5-4e50-9b45-4f7ce01c8da0", "name": "Execution Guardrails as used by the malware", "description": "The malware implements an \"Execution Guardrail\" technique utilizing a command-line argument requirement for payload activation.  Successful execution of the Small Sieve payload is contingent upon the specific word \"Platypus\" being provided as a command-line argument. This mechanism serves to restrict unauthorized or accidental activation, ensuring that only authorized individuals possessing knowledge of this specific trigger can initiate the malware's full functionality. \n", "mitre_technique": {"id": "T1480.001", "name": "Execution guardrails: environmental keying", "description": "Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment."}, "pre-conditions": ["\nThe ability to execute commands on the system.\n", "\nCommand line interface access to the system.\n", "\nThe word \"Platypus\" is present in the command line arguments.\n", "\nA system running the Small Sieve payload.\n"], "post-conditions": ["\nLogs indicating execution of PowerShell scripts and Python modules.\n", "\nModified Registry Keys (HKLM\\Software \\NFC\\IPA and HKLM\\Software \\NFC\\(Default )).\n", "\nCompromised system with persistent backdoor access.\n", "\nData exfiltration from compromised system.\n", "\nNetwork connections to C2 server using custom hex byte swapping encoding scheme.\n", "\nNew files created with .old extension containing DLLs.\n", "\nPotential for further malicious activity on the compromised system.\n", "\nModified system proxy settings.\n", "\nTelegram channel activity with bot ID and commands.\n"], "indicators": ["Small Sieve sample (Filename: gram_app.exe)", "Small Sieve sample (Filename: index.exe)", "Path: %LocalAppData%\\MicrosoftWindowsOutlookDataPlus.txt", "Registry value name: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift", "Path: %AppData%\\OutlookMicrosift\\index.exe"]}, {"id": "1ae0d535-ebcb-4180-900d-5b45170d5f1f", "name": "Masquerading: Match Legitimate Name or Location as used by the malware", "description": "Filename manipulation is employed by the \"Small Sieve\" malware as a technique for obfuscation.  Variations of legitimate file names, such as \"Microsoft\" (rendered as \"Microsift\") and \"Outlook,\" are incorporated into its filenames. This practice aims to reduce the perceived suspiciousness during cursory file inspections, potentially facilitating evasion of detection by security personnel or users conducting superficial file name reviews. \n", "mitre_technique": {"id": "T1036.005", "name": "Masquerading: match legitimate name or location", "description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous."}, "pre-conditions": ["\nThe malware has access to a list of legitimate file names and registry key names associated with Windows Defender.\n", "\nThe ability to create and modify registry entries.\n", "\nThe ability to create and modify files.\n", "\nAccess to the target system's registry.\n", "\nAccess to the target system's file system.\n"], "post-conditions": ["\nData exfiltration from victim systems.\n", "\nNetwork connections to C2 servers using protocols like HTTPS and Telegram API.\n", "\nAltered system configurations and settings.\n", "\nDisruption of normal system operations.\n", "\nNew files created with malicious code (e.g., index.exe, Goopdate.dll).\n", "\nRegistry key modifications (HKLM\\Software \\NFC\\IPA and HKLM\\Software \\NFC\\(Default )).\n", "\nPotential for further malware infections and lateral movement within the network.\n", "\nCompromised systems with persistent access for attackers.\n", "\nTraces of data transfer between victim systems and C2 servers.\n", "\nPresence of backdoors and other malware within the compromised systems.\n", "\nModified or added registry run keys for persistence.\n", "\nLogs containing suspicious activity related to file execution, network communication, and registry modifications.\n"], "indicators": ["Path: %LocalAppData%\\MicrosoftWindowsOutlookDataPlus.txt", "Registry value name: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift", "Path: %AppData%\\OutlookMicrosift\\index.exe"]}]}, {"id": "f2cdae84-5127-41c0-ab40-cfe7a2eeb6e9", "attack_steps": [{"id": "3e741733-40ac-42f2-b037-35701b3849d1", "name": "Application Layer Protocol: Web Protocols as used by the malware", "description": "The malware Small Sieve, attributed to the threat actor MuddyWater, utilizes the Telegram Bot API over HTTPS for both beaconing and task reception from its operators.  \n\nHTTPS encryption is employed by Small Sieve to secure communications with Telegram Bot API servers, thereby obscuring the nature of the communication from network monitoring tools. Interaction with a designated Telegram bot via its API facilitates discreet communication, as the bot presents itself as a legitimate service within the Telegram platform. \n\n\nThe confluence of HTTPS encryption and the Telegram Bot API effectively obfuscates Small Sieve's command and control (C2) communications, posing challenges for detection and analysis by security researchers and defenders.  \n", "mitre_technique": {"id": "T1071.001", "name": "Application layer protocol: web protocols", "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server."}, "pre-conditions": ["\nAccess to the Telegram Bot API.\n", "\nThe malware is active.\n", "\nAn internet connection.\n", "\nA system infected with the Small Sieve malware.\n", "\nThe malware has established a connection to the Telegram Bot API.\n"], "post-conditions": ["\nLogs of unusual activity\n", "\nNetwork infrastructure manipulation\n", "\nPresence of malware binaries\n", "\nNetwork traffic to C2 servers (HTTP, HTTPS, DNS tunneling)\n", "\nTelegram API interactions\n", "\nAltered system configurations\n", "\nCompromised systems\n", "\nSystem instability\n", "\nNew files with suspicious names and extensions (.old)\n", "\nProxy server logs\n", "\nJSON files containing C2 commands or results\n", "\nModified registry keys\n", "\nBase64 encoded data\n", "\nData exfiltration\n"], "indicators": []}, {"id": "e3977835-bd67-4016-adc3-d21e63a53f14", "name": "Data Encoding: Non-Standard Encoding as used by the malware", "description": "The malware's tasking traffic is obfuscated through the utilization of a custom hex byte swapping encoding scheme.  Data transmitted between the malware and its command and control (C2) server undergoes scrambling via an algorithm that reorders bytes within each data unit. This process impedes the decipherment of communication content by security tools. \n", "mitre_technique": {"id": "T1132.002", "name": "Data encoding: non-standard encoding", "description": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request."}, "pre-conditions": ["\nThe malware is running.\n", "\nAccess to the data to be encoded.\n", "\nA communication channel with the C2 server exists.\n", "\nThe Small Sieve tool is available.\n"], "post-conditions": ["\nNew files created in %LocalAppData%\\ MicrosoftWindowsOutlookDataPlus.txt\n", "\nLogs containing suspicious activity related to the malware\n", "\nPresence of Base64 and JSON encoded data\n", "\nSmall Sieve encoded data in network traffic\n", "\nCompromised system functionality\n", "\nTelegram API interactions\n", "\nNetwork connections to C2 servers using HTTP over IPv4 or IPv6\n", "\nModified DLL file with .old extension\n", "\nSystem instability\n", "\nIncreased security risks\n", "\nModified registry keys (HKLM\\Software \\NFC\\IPA and HKLM\\Software \\NFC\\(Default ))\n", "\nData exfiltration\n"], "indicators": []}]}]
[{"id": "179fa700-71e8-4a9f-8480-9b73b66d0b42", "pre-conditions": {"connectivity": {"value": true, "summary": "Based on the provided documents, the Goofy Guineapig malware is capable of communication with an external server. \n\nHere are the key points that indicate this capability:\n\n1. The malware contains functionality to communicate using UDP and the KCP protocol, or direct socket communications, depending on an embedded configuration string (Document with id '6b6a3d5f-269e-4830-89af-06401b3a7b83').\n2. The malware communicates over a non-standard HTTPS port 4443 (Document with id '6b6a3d5f-269e-4830-89af-06401b3a7b83').\n3. The malware collects information about the infected machine and includes this information in the 'Authorization:' header in the HTTP headers when using HTTP(S) communication (Document with id '8a5e879d-840b-4936-92c0-11a8e4ac6f68').\n\nThese points indicate that the Goofy Guineapig malware is designed to communicate with an external server, likely for the purpose of reporting back to its command and control (C2) server or receiving further instructions."}, "os": {"value": "**Windows**", "summary": "The operative system necessary to run the malware is **Windows**.\n\nThis inference is made based on several clues in the text:\n\n1. The document mentions \"C:\\\\ProgramData \\\\GoogleUpdate\" which is a Windows-specific directory.\n2. The document refers to COM (Component Object Model) and WMI (Windows Management Instrumentation), both of which are Windows-specific technologies.\n3. The document mentions using Windows APIs to collect information about the victim machine, such as adapters information and host name.\n\nTherefore, it can be inferred that the malware is designed to run on a Windows operating system."}, "vulnerability": "Based on the provided text, I can determine that:\n\n1. The malware exploits the following software vulnerability: **None**. There is no mention of any specific software vulnerability being exploited by the Goofy Guineapig malware.\n2. However, the malware disguises itself as a legitimate software: **Yes**. According to the text, \"Goofy Guineapig has trojanised a legitimate FireFox NSIS installation package and is dropped alongside legitimate FireFox files.\" Additionally, it uses a legitimate, signed executable (GoogleUpdate.exe) to sideload the malicious DLL.\n\nTherefore, I conclude that the malware disguises itself as a legitimate software by masquerading as a legitimate Firefox installer and using a legitimate executable to sideload its malicious components."}, "attack_steps": [{"id": "f9581a0b-090c-477c-8cc8-1074feaf9572", "name": "Create or Modify System Process: Windows Service as used by Goofy Guineapig", "description": "Here's the answer to the question:\n\n**Action:** Create or Modify System Process: Windows Service\n**Performed by:** Goofy Guineapig malware\n**How it is performed:** The Goopdate.dll DLL checks if it is running from the location `C:\\ProgramData\\GoogleUpdate`. If not, a service is started for persistence.\n\nAccording to the report, when the binary is executed for the first time, the Goopdate.dll DLL checks its location. If it's not in the expected location, it starts a Windows service for persistence. This indicates that the malware uses this technique to maintain persistence on the infected machine by creating or modifying a system process (a Windows service).", "mitre_technique": {"id": "T1543.003", "name": "Create or modify system process: windows service", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry."}, "pre-conditions": ["1. The Goopdate.dll DLL is executed.", "2. The Goopdate.dll DLL is not located in the expected location `C:\\ProgramData\\GoogleUpdate`.", "3. The malware has the necessary privileges to create or modify a Windows service.", "", "**Traces left behind by the actions:**", "", "1. A Windows service is created or modified.", "2. A new service is listed in the Windows Services Manager.", "3. A new service is listed in the registry under `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services`.", "4. A new service is listed in the registry under `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Services`.", "5. A new service is listed in the Windows Event Log."], "post-conditions": ["1. Windows Service created or modified", "2. Goopdate.dll DLL in C:\\ProgramData\\GoogleUpdate", "3. Service configuration files in C:\\ProgramData\\GoogleUpdate", "4. Service logs in Windows Event Viewer", "5. Service entry in Windows Services Manager", "6. Service executable in C:\\ProgramData\\GoogleUpdate", "7. Registry key modification for service persistence", "8. Service startup entry in Windows Registry", "9. Service executable file in C:\\ProgramData\\GoogleUpdate", "10. Service configuration files in C:\\ProgramData\\GoogleUpdate"], "indicators": []}]}, {"id": "fdae62ed-6283-43c4-b421-1719ec0d7949", "attack_steps": [{"id": "17624259-e0d9-415b-99bc-981472a3bc03", "name": "Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig", "description": "Here's how the action of \"Masquerading: Match Legitimate Name or Location\" is performed by Goofy Guineapig:\n\n**Action:** Masquerading: Match Legitimate Name or Location\n**Performer:** Goofy Guineapig malware\n**Description:** Goofy Guineapig masquerades as a FireFox installer and a Google updater.\n\n**How it's done:**\n\n1. **Filename manipulation**: The malware uses the filename \"Firefox-latest.exe\" to masquerade as a legitimate Firefox installer.\n2. **Description manipulation**: The malware also uses a description that matches a legitimate Google updater, making it difficult to distinguish from a genuine update process.\n3. **File size and hash matching**: The malware's file size and hashes (MD5, SHA-1, and SHA-256) match those of a legitimate Firefox installer or Google updater, further convincing the system that it is a legitimate process.\n\nBy masquerading as a legitimate process, Goofy Guineapig aims to evade detection by security software and blend in with normal system activity.", "mitre_technique": {"id": "T1036", "name": "Masquerading", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names."}, "pre-conditions": ["1. Access to a system with internet connectivity.", "2. Ability to download and execute malicious files.", "3. Presence of a legitimate Firefox installer or Google updater on the system.", "4. System files and registry entries are writable.", "5. Malware has the necessary permissions to manipulate system files and registry entries.", "", "**Traces left behind by the actions**", "", "1. Modified system files (e.g., Firefox-latest.exe).", "2. Altered registry entries (e.g., descriptions and file associations).", "3. Changed file sizes and hashes (MD5, SHA-1, and SHA-256) in system files.", "4. Presence of malware code in system memory.", "5. Modified system logs (e.g., event logs, process logs).", "6. Changes to system file timestamps and permissions.", "7. Presence of malware-related files and registry entries in system backups."], "post-conditions": ["1. Modified system files with matching hashes (MD5, SHA-1, and SHA-256)", "2. Altered system registry entries", "3. Modified system file timestamps", "4. Presence of \"Firefox-latest.exe\" in system directories", "5. Description of the malware in system logs", "6. System logs indicating a legitimate Google updater process", "7. Modified system file sizes", "8. Presence of malware in system restore points"], "indicators": []}, {"id": "cdbd7661-b26f-4f5b-92d4-94b1bf30e415", "name": "Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig", "description": "Here is the answer in the required format:\n\n**Action:** Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig\n\n**How it is performed:**\n\n1. **Initial Read**: The malware reads the CPU timestamp counter.\n2. **Save Result**: The result of the initial read is saved.\n3. **Second Read**: The malware immediately reads the timestamp counter again.\n4. **Compare Results**: The two results are compared to determine if more than 100 milliseconds have elapsed.\n5. **Evasion Check**: If more time has elapsed, the malware will not continue execution.\n\nThis technique is used by Goofy Guineapig to evade detection in virtualized or sandboxed environments by checking for unusual timing patterns that may indicate it is being run in a controlled environment.", "mitre_technique": {"id": "T1497", "name": "Virtualization/sandbox evasion", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors."}, "pre-conditions": ["1. Access to the CPU timestamp counter.", "2. Ability to read and compare the timestamp counter values.", "3. Presence of a malware or malicious code that can perform the actions.", "4. A system or environment with a timestamp counter that can be read.", "5. The malware or malicious code has the necessary permissions to read the timestamp counter.", "", "**Traces:**", "", "1. Changes in the system's timestamp counter values.", "2. Temporary files or registry entries created by the malware for saving the timestamp counter values.", "3. System calls or API calls related to reading the timestamp counter.", "4. Changes in the system's performance or resource usage due to the repeated reads of the timestamp counter.", "5. Potential changes in the system's security logs or audit trails due to the malicious activity."], "post-conditions": ["1. Modified CPU timestamp counter value", "2. Saved result in malware's memory", "3. Modified malware's execution flow", "4. Changes in system call logs", "5. Timestamp differences in system logs"], "indicators": []}, {"id": "3c2217e3-0d44-4411-9ea5-4dca6c03da6d", "name": "Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig", "description": "Here is a step-by-step explanation of how Virtualization/Sandbox Evasion: System Checks are performed by Goofy Guineapig:\n\n**Action:** Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig\n\n**How it's performed:**\n\n1. **Disk size check**: Goofy Guineapig checks the disk size of the system.\n2. **Physical memory size check**: Goofy Guineapig checks the physical memory (RAM) size of the system.\n3. **Number of logical processors check**: Goofy Guineapig checks the number of logical processors available on the system.\n\n**If any of these checks fail:**\n\n* The malware will not continue execution, indicating that it has detected a virtualization or sandbox environment and is attempting to evade detection.\n\n**Note:** These checks are performed by Goofy Guineapig as part of its evasion techniques to prevent itself from being detected in virtualized or sandboxed environments.", "mitre_technique": {"id": "T1497", "name": "Virtualization/sandbox evasion", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors."}, "pre-conditions": ["1. The system has a disk.", "2. The system has physical memory (RAM).", "3. The system has logical processors.", "4. The malware (Goofy Guineapig) has the necessary permissions to access system information.", "5. The system is running and accessible to the malware.", "", "**Traces left behind by the actions:**", "", "1. System information logs (e.g., disk size, physical memory size, number of logical processors) may be updated or created.", "2. System configuration files may be modified to reflect the malware's checks.", "3. Malware execution logs may be created to record the evasion checks.", "4. System performance metrics may be affected due to the malware's resource-intensive checks.", "5. Disk usage and physical memory usage may be temporarily increased due to the malware's checks."], "post-conditions": ["1. Disk usage statistics", "2. System configuration files", "3. Registry entries", "4. System logs", "5. Disk usage patterns", "6. System performance metrics", "7. Logical processor configuration files", "8. Physical memory usage statistics", "9. System event logs", "10. Disk size and usage reports"], "indicators": []}, {"id": "de592392-2737-472d-833a-86662b39a0da", "name": "Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig", "description": "Here's how the action \"Virtualization/Sandbox Evasion: User Activity Based Checks\" is performed by Goofy Guineapig:\n\n**Action:** Virtualization/Sandbox Evasion: User Activity Based Checks\n**Performer:** Goofy Guineapig malware\n**Description:** Goofy Guineapig checks for processes running on a system which indicate that it is being reverse engineered or debugged and will not continue execution if any of the checks fail.\n\n**How it's performed:**\n\n1. **Process scanning**: Goofy Guineapig scans the system for running processes.\n2. **Check for suspicious process names**: The malware checks each process name to see if it contains the strings 'dbg', 'debug', or 'ida'. These strings are indicative of debugging or reverse engineering tools.\n3. **If a suspicious process is found, execution is halted**: If any process containing these strings is detected, Goofy Guineapig will not continue its execution.\n\nBy performing this check, Goofy Guineapig attempts to evade detection by virtualization and sandbox environments, which often use debugging or reverse engineering tools to analyze malware.", "mitre_technique": {"id": "T1622", "name": "Debugger evasion", "description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads."}, "pre-conditions": ["1. The system is running processes that can be scanned.", "2. The system has processes that can be checked for suspicious names.", "3. The malware has the capability to scan and check processes.", "4. The malware has the necessary strings ('dbg', 'debug', or 'ida') to check for suspicious process names.", "", "**Traces left behind by the actions**", "", "1. Modified process list or system call logs indicating process scanning.", "2. Changes to system files or registry entries related to process scanning or suspicious process detection.", "3. Temporary files or memory dumps containing the strings 'dbg', 'debug', or 'ida' used for suspicious process detection.", "4. System logs or event logs indicating process termination or system shutdown due to suspicious activity detection.", "5. Changes to system configuration or settings related to process scanning or suspicious process detection."], "post-conditions": ["1. Modified process list", "2. Suspicious process names in system logs", "3. Changes in system call logs", "4. Process creation/deletion logs", "5. System registry modifications", "6. Suspicious process names in system event logs", "7. Changes in system file system access logs", "8. Process execution logs", "9. System memory dumps", "10. Suspicious process names in system crash dumps"], "indicators": []}, {"id": "7287b434-952d-4d91-b5c8-a0fb97e2d83b", "name": "Obfuscated Files or Information: Software Packing as used by Goofy Guineapig", "description": "Here's the answer:\n\n**Action:** Obfuscation of files through software packing\n**Performed by:** Goofy Guineapig malware\n**Method:** Goofy Guineapig is UPX packed and packaged in with a legitimate NSIS installer.\n\nIn other words, Goofy Guineapig uses software packing (specifically UPX) to obfuscate its files, making it difficult to detect or analyze. This packing is done within a legitimate NSIS (Nullsoft Scriptable Install System) installer, which adds an extra layer of stealthiness to the malware's operation.", "mitre_technique": {"id": "Unknown", "name": "Obfuscated files", "description": "Unknown"}, "pre-conditions": ["1. Presence of Goofy Guineapig malware", "2. Availability of UPX software packing tool", "3. Presence of a legitimate NSIS installer", "4. Access to the system for modification", "5. System files and folders accessible for modification", "", "**Traces left behind by the actions:**", "", "1. Modified system files and folders", "2. Presence of UPX packed files", "3. NSIS installer executable with embedded malware", "4. System logs indicating installation of NSIS installer", "5. Changes in system file timestamps and permissions", "6. Presence of malware-specific files and registry entries"], "post-conditions": ["1. Modified NSIS installer executable", "2. UPX packed Goofy Guineapig malware executable", "3. Installed files and registry entries", "4. System logs of installation and execution", "5. Modified system files (e.g. DLLs, EXEs)", "6. Registry keys and values related to NSIS and Goofy Guineapig", "7. Installed program entry in Add/Remove Programs", "8. System file timestamps and metadata changes"], "indicators": []}, {"id": "9881b90f-6b1b-43f7-9b1a-27e5f4f91ba5", "name": "Deobfuscate/Decode Files or Information as used by Goofy Guineapig", "description": "The action of \"Deobfuscate/Decode Files or Information\" is performed in the following way:\n\n**Method:** Stack-based strings are used to store obfuscated data.\n\n**Technique:** Single-byte XOR and subtraction operations are applied to the stack-based strings to obfuscate the data.\n\n**Process:**\n\n1. The malware, Goofy Guineapig, stores its obfuscated data in stack-based strings.\n2. When needed, the malware applies single-byte XOR or subtraction operations to the stored data to decode it.\n3. This decoded data is then used for further processing or execution by the malware.\n\n**Tools/Techniques Used:**\n\n* Stack-based storage of obfuscated data\n* Single-byte XOR and subtraction operations for decoding\n\n**Impact:** The use of stack-based strings and single-byte XOR/subtraction operations makes it difficult to detect and analyze the malware's behavior, as the decoded data is not immediately visible.", "mitre_technique": {"id": "Unknown", "name": "\nobfuscated files or information: binary padding", "description": "Unknown"}, "pre-conditions": ["1. Presence of stack-based strings containing obfuscated data.", "2. Existence of single-byte XOR or subtraction operations in the malware's code.", "3. Malware's ability to access and manipulate the stack-based strings.", "4. Availability of the correct decoding key or operation (XOR or subtraction).", "5. Malware's execution environment (e.g., memory, registers).", "", "**Traces left behind by the actions:**", "", "1. Modified stack-based strings containing decoded data.", "2. Changes in memory layout due to decoding operations.", "3. Temporary storage of decoded data in registers or memory.", "4. Altered program flow due to decoding operations.", "5. Presence of XOR or subtraction operation artifacts in the malware's code."], "post-conditions": ["1. Modified stack-based strings", "2. Changes in memory allocation", "3. Temporary files or registry entries for decoded data", "4. Altered system call logs", "5. Modified process memory", "6. Changes in system configuration files", "7. Temporary network connections", "8. Altered system logs", "9. Changes in file system metadata", "10. Decoded data in system buffers"], "indicators": []}, {"id": "d484a1c0-8b0e-427c-91ed-e2917d0e35c5", "name": "Hide Artifacts: Hidden Window as used by Goofy Guineapig", "description": "To hide artifacts using the \"Hidden Window\" technique as implemented in Goofy Guineapig, the following steps are taken:\n\n1. **Process Hollowing**: Goofy Guineapig performs process hollowing on the `dllhost.exe` process. This involves replacing the legitimate executable with a malicious payload.\n\n2. **Creation of Hidden Process**: When process hollowing is performed, the new process created by Goofy Guineapig is made hidden. This means that it will not be visible in process listings or task manager unless specifically looked for.\n\n3. **Request 0x15 Completion**: The success of this action relies on request 0x15 having completed first. Request 0x15 is likely a preparatory step or a check to ensure the environment is suitable for hiding the process.\n\nThe \"Hidden Window\" technique, as part of Goofy Guineapig's functionality, aims to evade detection by making malicious processes invisible in system monitoring tools. This technique is particularly effective because it manipulates how processes are displayed in the operating system, rather than attempting to hide files or registry entries directly.", "mitre_technique": {"id": "T1564.003", "name": "Hide artifacts: hidden window", "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks."}, "pre-conditions": ["1. Request 0x15 has completed.", "2. The environment is suitable for hiding the process.", "3. The `dllhost.exe` process exists.", "4. The operating system has the necessary permissions to perform process hollowing.", "", "**Traces left behind by the actions:**", "", "1. Changes to the `dllhost.exe` process executable.", "2. Creation of a new hidden process.", "3. Modifications to the Windows Task Manager process listing.", "4. Changes to the Windows Process Explorer process listing.", "5. Potential registry modifications to support the hidden process.", "6. Changes to the Windows Event Log (e.g., process creation events).", "7. Potential changes to the Windows System Configuration (e.g., startup items)."], "post-conditions": ["1. Modified `dllhost.exe` executable", "2. New hidden process in Task Manager", "3. Request 0x15 completion log", "4. System call logs for process hollowing", "5. Changes in Windows Event Viewer logs", "6. Modified system process list", "7. Changes in Windows Performance Monitor logs", "8. New registry entry for hidden process", "9. System file modification logs", "10. Changes in Windows System Configuration (msconfig) logs"], "indicators": []}, {"id": "1b8c9d66-e7a3-4a12-9f81-1391be0daaa1", "name": "Indicator Removal on Host: File Deletion as used by Goofy Guineapig", "description": "Here's how the action of Indicator Removal on Host: File Deletion is performed by Goofy Guineapig:\n\n**Step 1: Initial Execution**\n\nGoofy Guineapig initially runs in the location to which it is downloaded.\n\n**Step 2: File Movement**\n\nThe files are moved to a legitimate-looking directory. This suggests that the malware creates a new folder with a name that resembles a legitimate application or system folder, making it difficult for the user to detect the malicious activity.\n\n**Step 3: File Deletion**\n\nThe files are deleted from the initial download location. This is done to remove any evidence of the malware's presence and make it harder to track its activities.\n\n**Step 4: Batch Script Execution**\n\nA batch script is executed, which deletes the files from the original file path of GoogleUpdate.exe and Goopdate.dll, before restarting the GoogleUpdate.exe process from the ProgramData directory. The final command in the batch script deletes itself, ensuring that there are no remaining indicators of the malware's presence.\n\nBy performing these steps, Goofy Guineapig effectively removes any indicators of its presence on the host system, making it difficult to detect and analyze the malware.", "mitre_technique": {"id": "Unknown", "name": "\nindicator removal: file deletion", "description": "Unknown"}, "pre-conditions": ["1. Goofy Guineapig is downloaded to a host system.", "2. The host system has a legitimate-looking directory where files can be moved.", "3. The host system has a GoogleUpdate.exe and Goopdate.dll file that can be deleted.", "4. The host system has a ProgramData directory where the GoogleUpdate.exe process can be restarted.", "5. The host system has a batch script execution capability.", "", "**Traces left behind by the actions:**", "", "1. A new folder with a name that resembles a legitimate application or system folder.", "2. A deleted GoogleUpdate.exe file in the original file path.", "3. A deleted Goopdate.dll file in the original file path.", "4. A deleted batch script file.", "5. A restarted GoogleUpdate.exe process in the ProgramData directory."], "post-conditions": ["1. New folder created in the legitimate-looking directory", "2. Empty initial download location", "3. Modified ProgramData directory with a restarted GoogleUpdate.exe process", "4. Deleted files from the original file path of GoogleUpdate.exe and Goopdate.dll", "5. Batch script execution logs", "6. New folder in the legitimate-looking directory with the same name as the malware's folder"], "indicators": []}, {"id": "6c73eadd-e5d9-4461-89f4-3954d10484fc", "name": "Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig", "description": "Here's how the action of \"Hijack Execution Flow: DLL Side-Loading\" is performed by Goofy Guineapig:\n\n**Step 1: Installation of Legitimate Executable**\n\nThe Goofy Guineapig loader installs a legitimate executable, such as a trojanized Firefox installer (setup-stub.exe), on the victim's system.\n\n**Step 2: Co-location with Malicious DLL**\n\nAlongside the legitimate executable, the malicious DLL (Goopdate.dll) is also installed on the victim's system. This DLL will be loaded by the legitimate executable.\n\n**Step 3: Loading of Malicious DLL**\n\nWhen the legitimate executable is launched, it loads the malicious DLL into memory using a technique called DLL side-loading. This allows the malware to execute its payload without being detected as a standalone executable.\n\nBy hijacking the execution flow of a legitimate process (in this case, the Firefox installer), Goofy Guineapig achieves persistence and evasion from detection by security software that may be monitoring for standalone malicious executables.", "mitre_technique": {"id": "T1574.001", "name": "Hijack execution flow: dll search order hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution."}, "pre-conditions": ["1. Access to the victim's system.", "2. Ability to install a legitimate executable on the victim's system.", "3. Ability to co-locate the malicious DLL with the legitimate executable.", "4. Ability to launch the legitimate executable.", "5. Presence of a legitimate executable that can load the malicious DLL.", "", "**Traces left behind by the actions:**", "", "1. Presence of the legitimate executable (e.g. setup-stub.exe) on the victim's system.", "2. Presence of the malicious DLL (e.g. Goopdate.dll) on the victim's system.", "3. Registry entries related to the legitimate executable and the malicious DLL.", "4. File system entries related to the legitimate executable and the malicious DLL.", "5. System call logs indicating the loading of the malicious DLL by the legitimate executable."], "post-conditions": ["1. setup-stub.exe executable", "2. Goopdate.dll DLL", "3. Registry entries for setup-stub.exe and Goopdate.dll", "4. File system entries for setup-stub.exe and Goopdate.dll", "5. Windows Event Log entries for setup-stub.exe and Goopdate.dll", "6. Process creation records for setup-stub.exe and Goopdate.dll", "7. System call records for setup-stub.exe and Goopdate.dll", "8. Memory dump of setup-stub.exe and Goopdate.dll", "9. System file integrity changes", "10. System time and date changes"], "indicators": []}, {"id": "9ee83ec4-95a8-4729-9387-30f72de46692", "name": "Process Injection: Process Hollowing as used by Goofy Guineapig", "description": "Here's a breakdown of how the action \"Process Injection: Process Hollowing\" is performed by Goofy Guineapig:\n\n**Action:** Process Injection: Process Hollowing\n**Performed by:** Goofy Guineapig\n**Description:** Goofy Guineapig can perform process hollowing on the dllhost.exe binary, injecting content downloaded by the C2.\n\n**Step-by-Step Explanation:**\n\n1. **dllhost.exe is identified as a target**: The malware identifies the dllhost.exe process as a potential target for process hollowing.\n2. **Content is downloaded from the C2**: Goofy Guineapig downloads content from its Command and Control (C2) server, which will be injected into the dllhost.exe process.\n3. **dllhost.exe is hollowed out**: The malware uses process hollowing to remove the original contents of the dllhost.exe process, creating a \"hollow\" shell that can be filled with malicious content.\n4. **Malicious content is injected**: The downloaded content from the C2 is injected into the hollowed-out dllhost.exe process, allowing Goofy Guineapig to execute its payload under the guise of a legitimate process.\n\n**Tools and Techniques Used:", "mitre_technique": {"id": "T1055.012", "name": "Process injection: process hollowing", "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process."}, "pre-conditions": ["1. dllhost.exe process is running on the system.", "2. Goofy Guineapig has established a connection to its Command and Control (C2) server.", "3. The C2 server has the capability to download content to the malware.", "4. The malware has the necessary privileges to perform process hollowing and injection.", "5. The system has the necessary libraries and frameworks to support process hollowing and injection.", "", "**Traces left behind by the actions:**", "", "1. Modified dllhost.exe process with injected malicious content.", "2. Changes to the system's process list, showing the dllhost.exe process with altered memory layout.", "3. Network traffic logs showing communication between the malware and the C2 server.", "4. System call logs showing the process hollowing and injection operations.", "5. Changes to the system's memory layout, including the creation of a \"hollow\" shell in the dllhost.exe process.", "6. Potential changes to the system's registry, depending on the specific implementation of the malware.", "7. Potential changes to the system's file system, depending on the specific implementation of the malware."], "post-conditions": ["1. Modified dllhost.exe process memory", "2. Changes to dllhost.exe process file size", "3. Network traffic logs of C2 communication", "4. Downloaded content stored in temporary files", "5. Process hollowing tool usage logs", "6. dllhost.exe process creation timestamp", "7. Modified dllhost.exe process file hash", "8. System call logs of process hollowing", "9. Injected malicious content stored in dllhost.exe process memory", "10. Changes to dllhost.exe process permissions", "11. System event logs of process creation and modification", "12. Temporary files created during content download", "13. Network connection logs of C2 communication", "14. Modified dllhost.exe process image file execution options", "15. System registry keys modified by process hollowing tool"], "indicators": []}, {"id": "f04a2c22-2d60-4535-a7ce-916e4fc052c5", "name": "Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig", "description": "The action performed by Goofy Guineapig is:\n\n**Signed Binary Proxy Execution: Rundll32**\n\nThis is achieved through the following steps:\n\n1. The malware uses `rundll32.exe` and `url.dll` to execute a legitimate binary.\n2. This legitimate binary loads the malicious DLL.\n\nThe persistence mechanism of Goofy Guineapig utilizes this technique to ensure that the malicious DLL is executed on the infected machine.", "mitre_technique": {"id": "Unknown", "name": "\n", "description": "Unknown"}, "pre-conditions": ["1. Presence of `rundll32.exe` on the infected machine.", "2. Presence of `url.dll` on the infected machine.", "3. Presence of a legitimate binary that can be used to load the malicious DLL.", "4. The legitimate binary has the necessary permissions to execute the malicious DLL.", "5. The malicious DLL is present on the infected machine.", "6. The infected machine has a valid Windows operating system.", "7. The infected machine has the necessary dependencies installed.", "", "**Traces left behind by the actions**", "", "1. A new entry in the Windows Registry, specifically in the `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run` key, pointing to the legitimate binary.", "2. A new entry in the Windows Task Scheduler, scheduling the legitimate binary to run at startup.", "3. A new file created in the `C:\\Windows\\System32` directory, containing the malicious DLL.", "4. A new entry in the Windows Event Log, indicating the execution of the legitimate binary.", "5. A new entry in the Windows System Configuration, specifically in the `Startup` tab, listing the legitimate binary as a startup program."], "post-conditions": ["1. `rundll32.exe` entry in the Windows Task Manager's Processes tab", "2. `url.dll` entry in the Windows Task Manager's Processes tab", "3. `rundll32.exe` entry in the Windows Event Viewer's Application log", "4. `url.dll` entry in the Windows Event Viewer's Application log", "5. New registry key created under `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run` or `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run`", "6. New registry key created under `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunServices` or `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunServices`", "7. New registry key created under `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce` or `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce`", "8. New registry key created under `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx` or `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx`", "9. New file created in the Windows system directory (e.g., `C:\\Windows\\System32`)", "10. New file created in the Windows system directory (e.g., `C:\\Windows\\System32`) with a name similar to the legitimate binary used."], "indicators": []}]}, {"id": "82ed874c-9a63-49b4-ba63-e550125f8a88", "attack_steps": [{"id": "ec5dad05-c632-4ae3-8368-65313b2d71af", "name": "System Information Discovery as used by Goofy Guineapig", "description": "Here's how the action is performed:\n\n**System Information Discovery**\n\nGoofy Guineapig performs System Information Discovery by sending information about the infected machine in each Command and Control (C2) packet, as an obfuscated \"Authorization\" string in the HTTP header.\n\n**How it works:**\n\n1. Goofy Guineapig collects system information from the infected machine, including details such as:\n\t* Computer name\n\t* System time\n\t* Running processes\n\t* Properties of the infected machine\n2. The collected information is then obfuscated and encoded into an \"Authorization\" string.\n3. The obfuscated \"Authorization\" string is sent in the HTTP header of each C2 packet.\n\n**Tactics, Techniques, and Procedures (TTPs):**\n\nThis action is performed using the following TTPs:\n\n* **Discovery**: Goofy Guineapig collects system information from the infected machine.\n* **Command and Control**: The collected information is sent to the C2 server in each C2 packet.\n* **Application Layer Protocol: Web Protocols**: HTTPS is used for C2 communications.\n\n**MITRE ATT&CK Tactic:** System Information Discovery (T1082)", "mitre_technique": {"id": "Unknown", "name": "Internet connection discovery\nsystem network connections discovery\nsystem owner/user discovery", "description": "Unknown"}, "pre-conditions": ["1. Infected machine is connected to the internet.", "2. Goofy Guineapig malware is installed on the infected machine.", "3. C2 server is reachable and configured to receive C2 packets.", "4. HTTPS protocol is enabled on the C2 server.", "5. Infected machine has necessary permissions to collect system information.", "", "**Traces left behind by the actions:**", "", "1. System information collected from the infected machine.", "2. Obfuscated \"Authorization\" string in the HTTP header of each C2 packet.", "3. C2 packets sent to the C2 server.", "4. HTTPS communication logs on the C2 server.", "5. System time and date of the infected machine.", "6. Computer name of the infected machine.", "7. Running processes on the infected machine.", "8. Properties of the infected machine."], "post-conditions": ["1. Obfuscated \"Authorization\" string in HTTP headers of C2 packets", "2. System time changes in the infected machine", "3. New processes running on the infected machine", "4. Properties of the infected machine changed", "5. Computer name changes in the infected machine", "6. C2 server logs containing system information", "7. HTTPS traffic logs on the C2 server", "8. Permanent changes to system settings on the infected machine"], "indicators": []}]}, {"id": "f42efd62-ad32-4b82-bca5-638922b29099", "attack_steps": [{"id": "41f5590a-93e3-44cb-8965-9391ee87870b", "name": "Application Layer Protocol: Web Protocols as used by Goofy Guineapig", "description": "The action of using Application Layer Protocol: Web Protocols, specifically HTTPS, for Command and Control (C2) communications is performed through the following steps:\n\n1. **Establishing a connection**: Goofy Guineapig creates a secure connection to the Command and Control server using HTTPS.\n2. **Encrypting data**: The malware encrypts any data it wants to send to the C2 server, such as system information or plugin requests.\n3. **Sending encrypted data**: The encrypted data is sent to the C2 server in a POST request.\n4. **Receiving responses**: The C2 server responds with any necessary instructions or data, which are also encrypted and received by Goofy Guineapig.\n\nThis process allows Goofy Guineapig to communicate securely with its C2 server using HTTPS, making it difficult for security software to detect the communication.", "mitre_technique": {"id": "Unknown", "name": "Publish/subscribe protocols", "description": "Unknown"}, "pre-conditions": ["1. Access to the Command and Control server's HTTPS endpoint.", "2. A valid HTTPS connection (TLS/SSL certificate).", "3. Network connectivity to the Command and Control server.", "4. Malware installed on the compromised system.", "5. System resources (CPU, memory, etc.) to support HTTPS communication.", "6. A valid HTTPS client (e.g., a web browser or a custom HTTPS client).", "7. A way to handle and store encrypted data.", "", "**Traces left behind by the actions:**", "", "1. HTTPS connection logs on the Command and Control server.", "2. Encrypted data stored on the compromised system.", "3. Temporary files used for encryption and decryption.", "4. Network traffic logs showing HTTPS communication.", "5. System logs showing malware activity.", "6. Changes to system configuration to support HTTPS communication.", "7. Certificate files used for HTTPS connection.", "8. Encrypted data stored on the Command and Control server."], "post-conditions": ["1. HTTPS connection logs", "2. Encrypted data in system logs", "3. POST request logs", "4. C2 server response logs", "5. Temporary files used for encryption", "6. System information sent to C2 server", "7. Plugin requests sent to C2 server", "8. Certificate trust chain", "9. HTTPS session ID", "10. System time stamps of communication", "11. Network traffic logs", "12. System call logs for encryption and decryption", "13. C2 server IP address in system logs", "14. HTTPS protocol version used", "15. System configuration files modified for HTTPS communication"], "indicators": []}, {"id": "32d49107-e99b-4684-a4c8-07b6e941ed4c", "name": "Fallback Channels as used by Goofy Guineapig", "description": "The action of using Fallback Channels as implemented in Goofy Guineapig is performed through the following steps:\n\n1. **Embedded Configuration String**: An embedded configuration string within the malware determines which communication protocol to use.\n2. **Protocol Selection**: Depending on the configuration string, Goofy Guineapig selects one of the following protocols:\n\t* UDP (User Datagram Protocol)\n\t* KCP (Kryptic Control Protocol) \n\t* Direct Socket Communications\n3. **Communication Setup**: The selected protocol is used to establish a communication channel between the infected machine and the command and control (C2) server.\n4. **Data Exchange**: Once the communication channel is established, Goofy Guineapig can exchange data with the C2 server using the chosen protocol.\n\nThis allows Goofy Guineapig to adapt its communication method based on the embedded configuration string, making it more difficult for security measures to detect and block its communications.", "mitre_technique": {"id": "T1008", "name": "Fallback channels", "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds."}, "pre-conditions": ["1. Embedded configuration string within the malware exists.", "2. Configuration string is in a format that can be interpreted by Goofy Guineapig.", "3. Malware has access to the necessary protocols (UDP, KCP, Direct Socket Communications).", "4. Malware has the necessary permissions to establish a communication channel.", "5. C2 server is reachable and accessible.", "", "**Traces left behind by the actions**", "", "1. Network traffic logs showing communication between infected machine and C2 server.", "2. System logs showing protocol selection and communication setup.", "3. Configuration string embedded in the malware, potentially visible in memory dumps or reverse-engineered malware samples.", "4. Established communication channels, potentially visible in network scans or port scans.", "5. Data exchanged between infected machine and C2 server, potentially visible in network traffic logs or system logs."], "post-conditions": ["1. Embedded Configuration String:", "   - Configuration string in malware code", "   - Changes in malware code structure", "", "2. Protocol Selection:", "   - UDP protocol packets", "   - KCP protocol packets", "   - Direct Socket Communications packets", "", "3. Communication Setup:", "   - Established communication channel", "   - Socket connections", "   - Port bindings", "", "4. Data Exchange:", "   - Exchanged data packets", "   - Network traffic logs", "   - Changes in C2 server logs"], "indicators": []}, {"id": "8b47b217-0efe-4ce3-9c69-7b0189a2ff12", "name": "Non-Standard Port as used by Goofy Guineapig", "description": "The action of using a Non-Standard Port, specifically port 4443, is performed through the following steps:\n\n1. **Goofy Guineapig malware reads the CPU timestamp counter**: The malware reads the current value of the CPU timestamp counter.\n2. **Saves the result**: The malware saves the initial value of the CPU timestamp counter.\n3. **Reads the timestamp counter again immediately**: The malware reads the CPU timestamp counter again, immediately after the first read.\n4. **Saves the result**: The malware saves the second value of the CPU timestamp counter.\n5. **Creates a mutex to ensure only one instance is running at any given time**: The malware creates a mutex (a synchronization object) with a name generated by taking an MD5 hash of the computer name, then taking another MD5 hash of the outputted hash three times.\n6. **Communicates over port 4443 using HTTPS protocol**: Once the above steps are completed, Goofy Guineapig communicates with its command and control (C2) server over the non-standard HTTPS port 4443.\n\nThe use of a non-standard port like 4443 is an attempt to evade detection by security software that may be monitoring standard ports.", "mitre_technique": {"id": "T1571", "name": "Non-standard port", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data."}, "pre-conditions": ["1. The system has a CPU with a timestamp counter.", "2. The system has a network connection.", "3. The system has the necessary permissions to read the CPU timestamp counter.", "4. The system has the necessary permissions to create a mutex.", "5. The system has the necessary permissions to communicate over port 4443.", "6. The system has the necessary libraries and frameworks to perform MD5 hashing.", "7. The system has the necessary libraries and frameworks to establish an HTTPS connection.", "8. The system has the necessary libraries and frameworks to handle mutex synchronization.", "", "**Traces left behind by the actions:**", "", "1. A mutex with a name generated by taking an MD5 hash of the computer name, then taking another MD5 hash of the outputted hash three times.", "2. A record of the initial and second values of the CPU timestamp counter.", "3. A record of the computer name used to generate the mutex name.", "4. A record of the MD5 hashes used to generate the mutex name.", "5. A record of the HTTPS connection established over port 4443.", "6. A record of the communication with the C2 server over port 4443."], "post-conditions": ["1. Saved initial CPU timestamp counter value", "2. Saved second CPU timestamp counter value", "3. Mutex created with a specific name", "4. MD5 hash of computer name", "5. MD5 hash of MD5 hash of computer name", "6. MD5 hash of MD5 hash of MD5 hash of computer name", "7. Mutex file on disk", "8. HTTPS connection logs on the C2 server", "9. Communication logs on the C2 server", "10. Port 4443 connection logs on the system where the malware is running", "11. Mutex file on the system where the malware is running", "12. Saved CPU timestamp counter values in memory (not permanent)"], "indicators": []}]}]
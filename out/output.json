[
    {
        "pre-conditions": {
            "is_connectivity_required": {
                "short": "",
                "summary": ""
            },
            "os": {
                "short": "",
                "summary": ""
            },
            "target_software": {
                "short": "",
                "summary": ""
            }
        },
        "actions": [
            {
                "action": "Create or Modify System Process: Windows Service as used by Goofy Guineapig",
                "description": " The action \"Create or Modify System Process: Windows Service as used by Goofy Guineapig\" fits into the MITRE technique T1082, System Information Discovery, as it involves the adversary maintaining persistence within the Windows operating system by creating or modifying a Windows service. This action is a form of System Information Discovery because it involves gathering and utilizing system-level information (in this case, the capability to create or modify a Windows service) to achieve persistence.\n\nBy establishing a Windows service, Goofy Guineapig is able to maintain a foothold on the target system, which allows for continued access and control. This persistence mechanism can be used to gather more detailed system information, shape follow-on behaviors, and potentially execute further malicious actions.\n\nIn the context of MITRE technique T1082, this action demonstrates how adversaries may leverage system information to develop and conceal their payloads, as well as to shape their attack strategies. The creation or modification of a Windows service provides the adversary with a means to gather information about the target system's architecture, operating system version, and other relevant details, which can be used to refine their attack approach and ensure successful infiltration and maintenance of their presence on the compromised system.\n\nIn summary, the action of creating or modifying a Windows service as used by Goofy Guineapig aligns with the MITRE technique T1082, System Information Discovery, as it involves leveraging system-level information to maintain persistence and potentially shape subsequent attack behaviors.",
                "mitre_technique": "T1082 - System Information Discovery",
                "mitre_description": "\nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]\n",
                "indicators": [
                    "Windows Service creation",
                    "Service Control Manager EventID 7045",
                    "ServiceName \"GoogleUpdate\"",
                    "ImagePath containing \"rundll32\", \"FileProtocolHandler\", \"\\\\ProgramData\\\\GoogleUpdate\\\\GoogleUpdate.exe\"",
                    "Global structure for process tracking",
                    "Named pipe creation with MD5 hashed computer name",
                    "HTTP POST request for tasking response payload data",
                    "0x11 byte return payload data header with randomized values",
                    "Persistence mechanism for continued access and control",
                    "System Information Discovery (T1082)",
                    "Leveraging"
                ]
            }
        ]
    },
    {
        "actions": [
            {
                "action": "Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig",
                "description": " The action of Goofy Guineapig masquerading as a FireFox installer and a Google updater directly aligns with the MITRE technique T1036.005, which is titled \"Match Legitimate Name or Location.\" This technique involves adversaries imitating the names or locations of legitimate files or resources to evade detection and defenses. By presenting itself as a trusted entity, such as a well-known software installer or updater, Goofy Guineapig aims to bypass security measures that might otherwise scrutinize or block unfamiliar or suspicious files.\n\nIn this case, Goofy Guineapig's masquerade as a Firefox installer and Google updater is a strategic attempt to exploit the trust users and systems have in these legitimate applications. By doing so, it can potentially avoid raising alarms, gain unauthorized access, and execute its malicious activities without immediate detection. This tactic is a clear example of how adversaries use the \"Match Legitimate Name or Location\" technique to enhance their evasion capabilities and increase the chances of successful infiltration and persistence within a targeted environment.",
                "mitre_technique": "T1036.005 - Match Legitimate Name or Location",
                "mitre_description": "\nAdversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.Adversaries may also use the same icon of the file they are trying to mimic.\n",
                "indicators": [
                    "Legitimate Name: Firefox installer, Google updater",
                    "Technique: Masquerading: Match",
                    "Indicator: Hard coded User Agent string: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
                    "URL: static.tcplog.com",
                    "Filepath: C:\\ProgramData \\GoogleUpdate \\GoogleUpdate \\tmp.bat",
                    "Action:"
                ]
            },
            {
                "action": "Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig",
                "description": " The action of Virtualization/Sandbox Evasion: Time Based Evasion, as implemented by Goofy Guineapig, fits into the MITRE technique T1082 - System Information Discovery by attempting to gather system information indirectly. Goofy Guineapig checks the time register twice with a delay of more than 100 milliseconds, which could be seen as a method to avoid detection by dynamically analyzing the system's behavior.\n\nWhile T1082 primarily focuses on adversaries obtaining detailed system information such as OS version, architecture, and hardware specifics, Goofy Guineapig's time-based evasion technique could be interpreted as a way to understand the system's timing and performance characteristics. This knowledge could help the adversary shape their actions, such as determining the optimal time to execute certain payloads or avoid triggering security mechanisms that rely on timing anomalies.\n\nBy not continuing execution if the time difference exceeds 100 milliseconds, Goofy Guineapig may be trying to mimic normal system behavior and avoid raising suspicion. This evasion technique could be part of a broader strategy to gather information about the system's timing behavior, which is a form of System Information Discovery.\n\nIn summary, Goofy Guineapig's time-based evasion technique indirectly relates to MITRE technique T1082 by potentially providing the adversary with insights into the system's timing behavior, which could be used to refine their attack strategy and avoid detection. However, it's essential to note that this connection is more indirect compared to the direct gathering of system information as described in T1082.",
                "mitre_technique": "T1082 - System Information Discovery",
                "mitre_description": "\nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]\n",
                "indicators": [
                    "Checks the time register twice",
                    "Delay of more than 100 milliseconds",
                    "Does not continue execution if the time difference exceeds 100 milliseconds",
                    "Avoids detection by dynamically analyzing system's timing behavior",
                    "Indirectly gathers system information (timing characteristics)",
                    "Mimics normal system behavior to avoid raising suspicion",
                    "Part of a broader strategy for System Information Discovery (T1082)"
                ]
            },
            {
                "action": "Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig",
                "description": " The action \"Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig\" fits into the MITRE technique T1082, which is \"System Information Discovery,\" because Goofy Guineapig performs checks on the system's disk size, physical memory size, and number of logical processors. By doing so, it gathers detailed information about the operating system and hardware. This aligns with the System Information Discovery technique, where adversaries seek to obtain system data to inform their actions. In this case, Goofy Guineapig uses the acquired information to determine whether to continue execution, thereby evading detection by ensuring it only operates in environments that meet its specific system requirements. This behavior is indicative of an adversary using System Information Discovery to tailor their malware's behavior based on the target system's characteristics, which is the essence of the T1082 technique.",
                "mitre_technique": "T1082 - System Information Discovery",
                "mitre_description": "\nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]\n",
                "indicators": [
                    "Disk size check",
                    "",
                    "Physical memory size check",
                    "",
                    "Number of logical processors check",
                    "",
                    "Comparison of disk size and physical memory size",
                    "",
                    "Execution continuation condition based on system checks",
                    "",
                    "System requirements for execution continuation (disk size > 1GB, physical memory > 2GB, logical processors > 2)",
                    "",
                    "Malware exit condition if system checks fail",
                    "",
                    "Similar behavior observed in Jolly Jellyfish malware analysis",
                    "",
                    "Use of 'dbg', 'debug', 'ida' string checks in process names",
                    "",
                    "Self-de"
                ]
            },
            {
                "action": "Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig",
                "description": " The action \"Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig\" fits into the MITRE technique T1555.003 by demonstrating how adversaries may acquire credentials from web browsers, which is a part of the broader technique. In this specific case, Goofy Guineapig performs checks to determine if it is being reverse-engineered or debugged by examining user activity indicators such as the number of logical processors, disk size, and physical memory size. If these checks fail, it implies that the system might be under analysis, similar to how an adversary might detect the presence of a security tool or a debugger.\n\nBy not continuing execution when these checks fail, Goofy Guineapig is evading detection, akin to how an adversary would avoid leaving traces when extracting credentials from web browsers. The MITRE technique T1555.003 describes the process of extracting credentials from web browsers, which can be used to gain unauthorized access to systems. Although Goofy Guineapig's action is not directly about extracting credentials, the evasion technique it employs is conceptually related to the broader theme of avoiding detection and maintaining stealth, which is a critical aspect of the MITRE technique T1555.003.\n\nIn summary, while Goofy Guineapig's action is not about acquiring credentials, it aligns with the MITRE technique T1555.003 in terms of the underlying principle of evading detection mechanisms. Both involve sophisticated tactics to avoid being identified by security measures, whether it's through checking system properties or extracting sensitive information from web browsers.",
                "mitre_technique": "T1555.003 - Credentials from Web Browsers",
                "mitre_description": "\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser.[1] Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim\u2019s cached logon credentials as the decryption key.[2]Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.[3][4] Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.[5]After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).\n",
                "indicators": [
                    "Number of logical processors > 2",
                    "Disk size > 1GB",
                    "Physical memory size > 2GB",
                    "Self-deletion command in temp.bat script",
                    "HTTPS, UDP, and raw TCP socket communications support",
                    "Checks for system properties (disk size, memory size, logical processors)",
                    "Evasion behavior: Exit if checks fail",
                    "Masquerading as legitimate software (Firefox installer, Google updater)",
                    "Persistence mechanism installation in ProgramData directory",
                    "HTTPS GET and POST requests for command and control communication",
                    "Support"
                ]
            },
            {
                "action": "Obfuscated Files or Information: Software Packing as used by Goofy Guineapig",
                "description": " The action \"Obfuscated Files or Information: Software Packing\" as used by Goofy Guineapig fits into the MITRE technique T1027.002 by demonstrating a method of concealing code through software packing. In this context, Goofy Guineapig employs UPX packing, which compresses or encrypts the executable file. This technique alters the file signature, making it difficult for signature-based detection tools to identify the malicious code. By packing the executable with a legitimate NSIS installer, the adversary aims to bypass security measures that rely on recognizing known packer signatures. This aligns with the MITRE technique description, which explains that adversaries may use software packing to hide their code and evade detection. The packing process is intended to prevent the executable from being easily analyzed or flagged by security systems, thus enhancing the stealth and persistence of the malware.",
                "mitre_technique": "T1027.002 - Software Packing",
                "mitre_description": "\nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.[1] Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.[2] \n",
                "indicators": [
                    "UPX packing used",
                    "Compressed executable",
                    "Altered file signature",
                    "Concealed code",
                    "Legitimate NSIS installer",
                    "Evasion of signature-based detection",
                    "Hiding malicious code",
                    "Enhanced stealth and persistence",
                    "Side-loading malicious version of library",
                    "Creation of temp.bat",
                    "Restarts GoogleUpdate.exe with malicious code"
                ]
            },
            {
                "action": "Deobfuscate/Decode Files or Information as used by Goofy Guineapig",
                "description": " The action \"Deobfuscate/Decode Files or Information\" as used by Goofy Guineapig fits into the MITRE technique T1027.002, which is related to Software Packing, by illustrating a method adversaries use to conceal their code. In this context, Goofy Guineapig contains stack-based strings within its binary that are obfuscated using single byte XOR or subtraction. This obfuscation is a form of packing, where the adversary has altered the binary to make it less recognizable or to avoid detection by signature-based security tools.\n\nThe MITRE technique T1027.002 describes how adversaries may use software packing to hide their code. Packers like MPRESS and UPX are mentioned as tools that can compress or encrypt executables, changing file signatures to evade detection. The obfuscation of stack-based strings in Goofy Guineapig's binary is akin to this packing process, as it modifies the binary's appearance and structure to make it more challenging for security systems to identify and analyze the malicious code.\n\nBy obfuscating the strings in this manner, Goofy Guineapig is effectively using a packing technique to conceal its operations, which aligns with the description of software packing provided in the MITRE technique. The adversary's goal is to make the detection and analysis of the malware more difficult, thereby increasing the chances of successful evasion of security measures.",
                "mitre_technique": "T1027.002 - Software Packing",
                "mitre_description": "\nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.[1] Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.[2] \n",
                "indicators": [
                    "Stack-based strings obfuscation",
                    "Single byte XOR",
                    "Single byte subtraction",
                    "Binary alteration",
                    "Signature evasion",
                    "Software packing",
                    "UPX packing",
                    "MPRESS packing",
                    "File signature modification",
                    "Executable compression",
                    "Encryption of executables",
                    "Anti-analysis techniques",
                    "Anti-detection techniques",
                    "Malware concealment",
                    "Binary obfuscation",
                    "Decompilation resistance",
                    "Reverse engineering resistance",
                    "Signature-based detection avoidance",
                    "File integrity check bypass",
                    "Binary transformation"
                ]
            },
            {
                "action": "Hide Artifacts: Hidden Window as used by Goofy Guineapig",
                "description": " The action \"Hide Artifacts: Hidden Window\" as used by Goofy Guineapig fits into the MITRE technique T1555.003, which is about \"Credentials from Web Browsers,\" in the following way:\n\nGoofy Guineapig employs process hollowing on the dllhost.exe to create a hidden process. This technique aligns with the MITRE technique T1555.003 because it involves the concealment of artifacts (in this case, a hidden process) that could potentially be used to gain unauthorized access to credentials.\n\nWhile the MITRE technique T1555.003 specifically focuses on acquiring credentials from web browsers, the hidden process created by Goofy Guineapig could be used to store or manipulate these credentials. For instance, the hidden process could be used to store stolen credentials or to execute commands that interact with the credential stores of web browsers.\n\nIn summary, the action of hiding the process through process hollowing complements the MITRE technique T1555.003 by potentially providing a means to protect or manipulate the acquired credentials, thereby enhancing the adversary's ability to exploit the stolen credentials for further malicious activities.",
                "mitre_technique": "T1555.003 - Credentials from Web Browsers",
                "mitre_description": "\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser.[1] Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim\u2019s cached logon credentials as the decryption key.[2]Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.[3][4] Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.[5]After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).\n",
                "indicators": [
                    "Process hollowing on dllhost.exe",
                    "Creation of a hidden process",
                    "Potential use for storing or manipulating credentials",
                    "Alignment with MITRE technique T1555.003 (Credentials from Web Browsers)",
                    "Enhancement of adversary's ability to exploit stolen credentials",
                    "Interaction with credential stores of web browsers",
                    "",
                    "te: While the indicators provided are related to the action and its potential implications, they are not exhaustive technical details. The indicators focus on the process hollowing technique and its relation to credential the"
                ]
            },
            {
                "action": "Indicator Removal on Host: File Deletion as used by Goofy Guineapig",
                "description": " The action \"Indicator Removal on Host: File Deletion\" as used by Goofy Guineapig fits into the MITRE technique T1082, which is \"System Information Discovery,\" in the following way:\n\nWhen Goofy Guineapig performs file deletion, it hides its presence by moving the files to a legitimate-looking directory and then deleting them from the initial download location. This action is a form of system information discovery because it involves manipulating the system's file structure to conceal the malware's activities. By doing so, Goofy Guineapig gathers and uses system information (in this case, the file system structure) to avoid detection.\n\nThe MITRE technique T1082 describes how adversaries may use system information discovery to shape their follow-on behaviors, such as deciding whether to fully infect the target or attempt specific actions. In this context, Goofy Guineapig uses the file deletion technique to gather information about the system's file structure and then uses that information to hide its presence, thus shaping its behavior to avoid detection and continue its malicious activities.\n\nIn summary, Goofy Guineapig's file deletion action aligns with the MITRE technique T1082 by using system information (file system structure) to hide its presence and evade detection, demonstrating how adversaries may leverage system information discovery to shape their malicious behaviors.",
                "mitre_technique": "T1082 - System Information Discovery",
                "mitre_description": "\nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]\n",
                "indicators": [
                    "Moves files to a legitimate-looking directory",
                    "Deletes files from the initial download location",
                    "Avoids detection by manipulating the system's file structure",
                    "Gathers and uses system information (file system structure) for concealment",
                    "Aligns with MITRE technique T1082 (System Information Discovery)",
                    "Shapes behavior to avoid detection and continue malicious activities",
                    "Checks for the presence of processes containing 'dbg', 'debug', or 'ida' strings to prevent execution",
                    "Includes short (less than a second) sleep commands to potentially"
                ]
            },
            {
                "action": "Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig",
                "description": " The action \"Hijack Execution Flow: DLL Side-Loading\" as used by Goofy Guineapig fits into the MITRE technique T1027.002, which is Software Packing, in the following way:\n\nWhen Goofy Guineapig performs DLL side-loading, it essentially loads a malicious DLL alongside a legitimate executable. This process can be seen as a form of software packing because the malicious DLL is being concealed within the legitimate executable. By doing so, the adversary is altering the file signature of the executable, which is a common tactic in software packing. The goal is to avoid detection by signature-based security measures that would typically identify and block known malicious code.\n\nThe malicious DLL is not visible as a standalone file, but rather it is integrated into the legitimate executable. This integration makes it more challenging for security tools to detect the malicious content, as the file signature of the executable does not match what would be expected for a typical DLL file.\n\nIn summary, the DLL side-loading technique used by Goofy Guineapig aligns with the MITRE technique T1027.002, Software Packing, as it involves concealing malicious code within a legitimate executable to evade detection and maintain persistence on the infected system. This method of packing the malicious DLL within the executable is a strategic defense evasion technique that helps the adversary to execute their code without raising alarms from security systems.",
                "mitre_technique": "T1027.002 - Software Packing",
                "mitre_description": "\nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.[1] Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.[2] \n",
                "indicators": [
                    "DLL side-loading alongside legitimate executable",
                    "Concealing malicious DLL within legitimate executable",
                    "Altering file signature of executable",
                    "Evasion of signature-based security measures",
                    "Integration of malicious DLL to avoid detection",
                    "Strategic defense evasion technique",
                    "MITRE technique T1027.002, Software Packing",
                    "Hiding malicious code within executable",
                    "File signature mismatch for typical DLL file",
                    "Execution without raising alarms from security systems"
                ]
            },
            {
                "action": "Process Injection: Process Hollowing as used by Goofy Guineapig",
                "description": " The action \"Process Injection: Process Hollowing as used by Goofy Guineapig\" fits into the MITRE technique T1027.002, which is Software Packing, by illustrating a method of concealing malicious code. In this context, Goofy Guineapig employs process hollowing, a technique where a legitimate process is replaced with a malicious one. This method can be seen as a form of software packing because it involves modifying the executable code of a process to hide the true nature of the malicious activity.\n\nThe MITRE technique description for Software Packing explains that adversaries may use packing or virtual machine software protection to conceal their code. While Goofy Guineapig's process hollowing doesn't directly involve compressing or encrypting an executable file, it does alter the file signature and behavior of a legitimate process (dllhost.exe) to avoid detection. This alteration is akin to the concept of software packing, where the goal is to make the executable appear benign or different from its original form to evade signature-based detection mechanisms.\n\nIn summary, the action of Goofy Guineapig using process hollowing aligns with the Software Packing technique by concealing its malicious code within a legitimate process, thereby avoiding detection and maintaining its stealthy operation.",
                "mitre_technique": "T1027.002 - Software Packing",
                "mitre_description": "\nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.[1] Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.[2] \n",
                "indicators": [
                    "Process hollowing on dllhost.exe",
                    "Injection of malicious content into dllhost.exe",
                    "Concealment of malicious activity within a legitimate process",
                    "Modification of process behavior to evade detection",
                    "Use of dllhost.exe as a carrier for malicious code",
                    "Avoidance of signature-based detection mechanisms",
                    "Alteration of file signature to appear benign",
                    "Maintaining stealthy operation within a legitimate process",
                    "Embedded configuration string for fallback communication",
                    "HTTPS for C2 communications",
                    "Obfusc"
                ]
            },
            {
                "action": "Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig",
                "description": " The action \"Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig\" fits into the MITRE technique T1218.010, which is about Regsvr32.exe being used to proxy execution of malicious code. In this context, Goofy Guineapig employs rundll32.exe, a legitimate Windows command-line utility that is often signed by Microsoft, to execute a malicious DLL. This technique allows the malware to bypass security measures that might not monitor the execution of rundll32.exe or its associated DLLs due to allowlists or false positives.\n\nThe MITRE technique description explains that adversaries can abuse Regsvr32.exe to avoid detection by security tools, as it is a common process used by Windows for legitimate operations. By leveraging Regsvr32.exe, malware like Goofy Guineapig can execute malicious code under the guise of a legitimate process, thus maintaining persistence and evading detection. The technique also mentions that Regsvr32.exe can be used to bypass application control by loading COM scriptlets to execute DLLs under user permissions, which aligns with the described behavior of Goofy Guineapig using rundll32.exe and url.dll to execute the malicious DLL.\n\nIn summary, the action of Goofy Guineapig using Signed Binary Proxy Execution: Rundll32 aligns with MITRE technique T1218.010 because it demonstrates the malware's use of a legitimate, signed Windows utility to proxy the execution of malicious code, thereby evading security controls and maintaining persistence on the infected system.",
                "mitre_technique": "T1218.010 - Regsvr32",
                "mitre_description": "\nAdversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. [1]Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. [2] This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments. [3] [4]Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking. [3]\n",
                "indicators": [
                    "rundll32.exe",
                    "url.dll",
                    "dllhost.exe",
                    "GoogleUpdate.exe",
                    "Goopdate.dll",
                    "UPX packed NSIS installer",
                    "Trojanised Firefox installer",
                    "Process hollowing",
                    "HTTPS communication",
                    "GET and PORT requests to static.tcplog.com",
                    "File movement and deletion",
                    "DLL Side - Loading",
                    "Execution Proxy - Regsvr32.exe",
                    "COM scriptlets execution",
                    "Persistence mechanism",
                    "Obfuscated 'Authorization' string in HTTP header",
                    "UDP"
                ]
            }
        ]
    },
    {
        "actions": [
            {
                "action": "System Information Discovery as used by Goofy Guineapig",
                "description": " The action of System Information Discovery, as employed by Goofy Guineapig, aligns with the MITRE technique T1082, which is titled \"System Information Discovery.\" This technique involves an adversary attempting to obtain detailed information about the operating system and hardware of a target system. In the context provided, Goofy Guineapig sends obfuscated 'Authorization' strings in the HTTP header of each Command and Control (C2) packet to gather system information. This information could include the operating system version, patches, hotfixes, service packs, and architecture.\n\nThe MITRE technique T1082 description explains that adversaries may use the information gathered during System Information Discovery to shape their subsequent behaviors, such as deciding whether to fully infect the target or to attempt specific actions. Tools like Systeminfo or systemsetup configuration on macOS can be used for this purpose, and user-level access can be leveraged to execute commands like df -aH to obtain mounted disk information.\n\nIn the case of Goofy Guineapig, the malware's capability to send system information via C2 packets fits into the T1082 technique because it demonstrates an attempt to discover and potentially exploit system details. This information could be used to tailor the malware's actions, evade detection, or facilitate further exploitation. The technique emphasizes the importance of such information gathering in the context of cybersecurity threats, as it can significantly aid adversaries in their malicious activities.",
                "mitre_technique": "T1082 - System Information Discovery",
                "mitre_description": "\nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]\n",
                "indicators": [
                    "Obfuscated 'Authorization' string in HTTP header",
                    "Information about infected machine",
                    "System information sent in each C2 packet",
                    "Potential to determine operating system version, patches, hotfixes, service packs, and architecture"
                ]
            }
        ]
    },
    {
        "actions": [
            {
                "action": "Application Layer Protocol: Web Protocols as used by Goofy Guineapig",
                "description": " The action \"Application Layer Protocol: Web Protocols as used by Goofy Guineapig\" specifically refers to the use of HTTPS for command and control (C2) communications by the malware known as Goofy Guineapig. This fits into the MITRE technique T1555.003, which is about \"Credentials from Web Browsers.\"\n\nThe connection between the action and the MITRE technique is established through the malware's method of acquiring credentials. Goofy Guineapig, like other malware, may leverage the HTTPS protocol to communicate with its command and control servers. During these communications, the malware could potentially extract credentials from web browsers on the infected machine.\n\nThe MITRE technique T1555.003 describes how adversaries can extract credentials from web browsers by reading files specific to the target browser, such as the credential store in Google Chrome or the Credential Lockers in Windows. These credentials, which include usernames and passwords, are often stored in an encrypted format but can be decrypted using the victim's cached logon credentials.\n\nIn the context of Goofy Guineapig, the malware's use of HTTPS for C2 communications could be part of a broader strategy to acquire and utilize credentials from web browsers. By leveraging the HTTPS protocol, the malware can securely communicate with its command and control servers, potentially exchanging commands or receiving instructions. During this process, it may exploit vulnerabilities or weaknesses in the web browser to extract stored credentials, which can then be used to gain further access to systems or escalate privileges.\n\nIn summary, the action of using HTTPS for C2 communications by Goofy Guineapig aligns with the MITRE technique T1555.003, as it represents a potential method for the malware to acquire credentials from web browsers, thereby expanding its capabilities and furthering its objectives.",
                "mitre_technique": "T1555.003 - Credentials from Web Browsers",
                "mitre_description": "\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser.[1] Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim\u2019s cached logon credentials as the decryption key.[2]Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.[3][4] Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.[5]After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).\n",
                "indicators": [
                    "HTTPS protocol usage for C2 communications",
                    "Command and Control (C2) communications",
                    "MITRE technique T1555.003",
                    "Credentials extraction from web browsers",
                    "Secure communication channel",
                    "Potential exploitation of web browser vulnerabilities",
                    "Extraction of stored credentials (usernames, passwords)",
                    "Encrypted credentials storage",
                    "Use of victim's cached logon credentials for decryption",
                    "Command and control server interaction",
                    "Malware command exchange and instruction reception",
                    "Credential acquisition strategy",
                    "Potential privilege escalation"
                ]
            },
            {
                "action": "Fallback Channels as used by Goofy Guineapig",
                "description": " The action \"Fallback Channels as used by Goofy Guineapig\" fits into the MITRE technique T1571 - Non-Standard Port because Goofy Guineapig employs alternative communication methods that deviate from the standard protocols and ports. Specifically, the malware uses UDP and the KCP protocol, or direct socket communications, which are not typically associated with HTTPS. This deviation from the standard port 4443 for HTTPS communications is a strategic move to evade detection and analysis. By utilizing non-standard ports, Goofy Guineapig aims to bypass network filtering and complicate the process of parsing network data, which aligns with the characteristics of the T1571 technique. The embedded configuration string in the malware further indicates that the choice of communication channels and ports can be dynamically altered, enhancing the evasion capabilities and fitting the description of the T1571 technique.",
                "mitre_technique": "T1571 - Non-Standard Port",
                "mitre_description": "\nAdversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088[1] or port 587[2] as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.[3]\n",
                "indicators": [
                    "UDP protocol usage",
                    "KCP protocol usage",
                    "Direct socket communications",
                    "Embedded configuration string for dynamic channel selection",
                    "Non-standard HTTPS port (4443)",
                    "Alternative communication methods to standard HTTPS",
                    "Evasion of network filtering and analysis",
                    "Dynamic alteration of communication channels and ports"
                ]
            },
            {
                "action": "Non-Standard Port as used by Goofy Guineapig",
                "description": " The action \"Non-Standard Port as used by Goofy Guineapig\" fits into the MITRE technique T1571 - Non-Standard Port because Goofy Guineapig communicates over the non-standard HTTPS port 4443. This deviation from the standard port 443 for HTTPS communications aligns with the MITRE technique's description of adversaries using protocol and port pairings that are not typically associated. By utilizing port 4443 instead of the standard port, Goofy Guineapig potentially bypasses network filtering and complicates the analysis or parsing of network data, which is characteristic of the T1571 technique. This behavior is indicative of an attempt to evade detection and maintain stealth, as described in the MITRE technique's context.",
                "mitre_technique": "T1571 - Non-Standard Port",
                "mitre_description": "\nAdversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088[1] or port 587[2] as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.[3]\n",
                "indicators": [
                    "Non-standard HTTPS port: 4443",
                    "Deviation from standard port 443",
                    "Potential bypass of network filtering",
                    "Complicates network data analysis",
                    "Stealth and evasion behavior",
                    "Protocol and port pairing not typically associated",
                    "Adversarial communication method",
                    "Persistence and information exfiltration",
                    "Defense evasion technique",
                    "Utilizes UPX packing",
                    "Contains obfuscated stack-based strings",
                    "Performs process hollowing on dllhost.exe",
                    "Checks for reverse engineering or debugging processes",
                    ""
                ]
            }
        ]
    }
]
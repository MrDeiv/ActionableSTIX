[{"id": "484d0838-506f-4e07-8637-7b0eef0a681c", "pre-conditions": {"connectivity": {"value": true, "summary": "Based on the provided documents, the malware \"Goofy Guineapig\" has the following capabilities:\n\nCommunication with external server: Yes, Goofy Guineapig is capable of communicating with an external server using the following methods:\nUDP protocol\nKCP protocol\nDirect socket communications (dependent on an embedded configuration string)\nHTTPS protocol over a non-standard port 4443\n\n\nData encoding and encryption: Yes, Goofy Guineapig uses the following techniques to encode and encrypt data:\nXOR encryption with a single byte 0x31\nRC4 encryption with a key \"uirWmX3fSBhplR2sj\"\n\n\nDefence evasion techniques: Yes, Goofy Guineapig implements the following defence evasion techniques:\nSandbox detection\nAnti-analysis techniques\n\n\nObfuscation: Yes, Goofy Guineapig uses the following obfuscation techniques:\nUPX packing\nStack-based strings obfuscated with single byte XOR or subtraction\n\n\nData collection: Yes, Goofy Guineapig collects the following information:\nAdapter information\nHost name\nProcess information (e.g., running processes containing the string \"dbg\", \"debug\", or \"ida\")\n\n\nExecution and deletion: Yes, Goofy Guineapig has the following execution and deletion behavior:\nDeletes files from the original file path of GoogleUpdate.exe and Goopdate.dll\nRestarts the GoogleUpdate.exe process from the ProgramData directory\nDeletes itself after execution\n\n\n"}, "os": {"value": "Windows", "summary": "The operative system necessary to run the malware is Windows. This inference is made based on the following clues:\n\nThe document mentions \"Windows APIs\" and \"WMI information3\", which are specific to the Windows operating system.\nThe document also mentions \"dllhost.exe\", which is a legitimate process in Windows.\nThe document refers to collecting information about the victim machine, including \"Operating system caption\" and \"Antivirus product display name\", which suggests that the malware is designed to run on a Windows system.\n\nTherefore, it can be inferred that the Goofy Guineapig malware requires a Windows operating system to function."}, "vulnerability": "After analyzing the provided text, I have determined that:\n\nThe malware exploits no specific software vulnerability.\nHowever, it disguises itself as legitimate software by:\nMasquerading as a legitimate FireFox NSIS installation package and being dropped alongside legitimate FireFox files.\nSideloaded by a legitimate, signed, executable GoogleUpdate.exe (also dropped as part of the NSIS installer).\nUsing process hollowing on the dllhost.exe process to make a payload executable appear to run under a legitimate process path and name in process listings.\n\n\n\nTherefore, I conclude that the malware disguises itself as legitimate software by masquerading as known and trusted applications."}, "attack_steps": [{"id": "f1913f4d-1022-4828-b88d-f59eb12d10a2", "name": "Create or Modify System Process: Windows Service as used by Goofy Guineapig", "description": "To create or modify a system process using a Windows service, as implemented by the malware Goofy Guineapig, the following steps are performed:\n\n\nLoading of the Malware: The legitimate executable loads the malicious DLL (Goofy Guineapig) into memory.\n\n\nCreation of a Windows Service: The malware creates a new Windows service using the sc.exe command or through code that interacts with the Windows API to create and configure a service.\n\n\nConfiguration of the Service: The service is configured with necessary details such as its name, description, and startup type (e.g., automatic). This step may involve modifying registry entries or creating new ones.\n\n\nInstallation of the Service: The malware installs the newly created service on the system using commands like sc.exe create <servicename> binPath=<path_to_executable> or by directly interacting with the Windows API to install the service.\n\n\nStarting the Service: After installation, the service is started either manually through code or automatically based on its configured startup type.\n\n\nPersistence Mechanism: The malware ensures persistence by configuring the service to start automatically at system boot time. This can be achieved by modifying the registry entries associated with the service's\n\n", "mitre_technique": {"id": "T1543.003", "name": "Create or modify system process: windows service", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry."}, "pre-conditions": ["Access to the Windows system with sufficient privileges.", "Presence of the legitimate executable that loads the malicious DLL.", "Availability of the `sc.exe` command or the Windows API for creating and configuring services.", "Ability to interact with the Windows registry.", "Presence of a valid executable path for the service.", "New registry entries for the created service.", "Modified registry entries for the service's configuration.", "Presence of the malicious DLL in memory.", "Creation of a new Windows service with a unique service name.", "Installation of the service on the system.", "Configuration of the service to start automatically at system boot time.", "Presence of the legitimate executable with the malicious DLL loaded in memory.", "New or modified files in the Windows system directory or other system directories."], "post-conditions": ["Loaded DLL in memory", "New Windows service created", "Modified registry entries for service configuration", "New registry entries for service installation", "Installed service in Windows Services list", "Started service in Windows Services list", "Modified registry entries for persistence mechanism", "Service executable in system directory or program files", "Service executable in Windows Task Manager", "1 Service listed in Windows Event Viewer logs", "1 Service listed in Windows Services console (services.msc)", "1 Service executable in system's process list (tasklist.exe)"], "indicators": []}]}, {"id": "2ae58de3-eda8-414f-a7a8-aba087101cda", "attack_steps": [{"id": "4f8fd80c-8607-4ae6-9dfa-894eeab6154b", "name": "Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig", "description": "To perform the \"Masquerading: Match Legitimate Name or Location\" technique, also known as Masquerading, as used by Goofy Guineapig, follow these steps:\nStep 1: Identify the legitimate name or location to be matched\nIn this case, Goofy Guineapig masquerades as a FireFox installer and a Google updater. Therefore, we need to identify the legitimate names or locations associated with these applications.\n\nLegitimate Firefox installer: C:\\Program Files\\Mozilla Firefox\\firefox.exe\nLegitimate Google Updater: C:\\Program Files\\Google\\Update\\1.3.21.395\\GoogleCrashHandler.exe\n\nStep 2: Modify the malware to match the legitimate name or location\nTo masquerade as a FireFox installer, we need to modify the malware to use the same file path and name as the legitimate Firefox installer.\nSimilarly, to masquerade as a Google updater, we need to modify the malware to use the same file path and name as the legitimate Google Updater.\nStep 3: Update the malware's configuration\nWe also need to update the malware's configuration to reflect the new file paths and names. This may involve updating", "mitre_technique": {"id": "T1036", "name": "Masquerading", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names."}, "pre-conditions": ["Access to the system's file system.", "Ability to modify system files and directories.", "Knowledge of the legitimate file paths and names of the applications being masqueraded.", "Ability to update the malware's configuration.", "Presence of the legitimate applications on the system.", "Ability to create and write to files in the system's file system.", "Modified malware executable with the legitimate file path and name.", "Updated malware configuration reflecting the new file paths and names.", "Presence of the legitimate application's files and directories on the system.", "Changes to the system's file system, including creation of new files and directories.", "Updated system logs to reflect the changes made to the system's file system.", "Potential changes to the system's registry to reflect the new file paths and names."], "post-conditions": ["Modified malware executable file", "Updated registry entries for the legitimate Firefox installer", "Updated registry entries for the legitimate Google Updater", "Modified file system entries for the legitimate Firefox installer", "Modified file system entries for the legitimate Google Updater", "System logs showing the malware's configuration update", "System logs showing the malware's execution", "Modified system file hashes for the legitimate Firefox installer", "Modified system file hashes for the legitimate Google Updater", "1 System file timestamps for the modified malware executable file", "1 System file timestamps for the legitimate Firefox installer", "1 System file timestamps for the legitimate Google Updater"], "indicators": []}, {"id": "e6cbea69-8df3-4bff-bbc3-90e99611e8b3", "name": "Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig", "description": "Here is how the action \"Virtualization/Sandbox Evasion: Time Based Evasion\" is performed by Goofy Guineapig:\nAction: Virtualization/Sandbox Evasion: Time Based Evasion\nPerformed by: Goofy Guineapig\nHow it works:\n\nCheck time register: Goofy Guineapig checks the time register twice.\nDelay check: It checks if a delay of more than 100 milliseconds has occurred between the two checks.\nNo execution if delay exceeded: If the delay is greater than 100 milliseconds, Goofy Guineapig will not continue its execution.\n\nNote: This evasion technique is used to prevent detection by virtualization or sandbox environments, where time-based delays may be artificially introduced to detect malware behavior.", "mitre_technique": {"id": "T1497.003", "name": "Virtualization/sandbox evasion: time based evasion", "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time."}, "pre-conditions": ["The system has a time register that can be accessed and checked.", "The system has a mechanism to measure time intervals (e.g., timer or clock).", "The system has a delay of less than 100 milliseconds between the two checks of the time register.", "The system is running in a virtualization or sandbox environment.", "Changes to the system's time register or clock.", "Modifications to the system's timer or delay mechanism.", "Temporary changes to the system's execution flow or behavior.", "Potential changes to the system's logs or audit records (if the evasion technique is detected).", "Potential changes to the system's performance or resource usage (if the evasion technique is detected)."], "post-conditions": ["Modified time register values", "Delayed execution logs", "Altered system clock values", "Changes in system time stamps", "Modified system call records", "Time-based evasion detection logs"], "indicators": []}, {"id": "0ec0cdc9-2baf-4891-8894-81c48943e13c", "name": "Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig", "description": "Here is how the action \"Virtualization/Sandbox Evasion: System Checks\" is performed by Goofy Guineapig:\nAction: Virtualization/Sandbox Evasion: System Checks\nPerformed by: Goofy Guineapig\nHow it's done:\n\nDisk size check: Goofy Guineapig checks the disk size of the infected machine.\nPhysical memory size check: It then checks the physical memory (RAM) size of the infected machine.\nNumber of logical processors check: Finally, it checks the number of logical processors on the infected machine.\n\nWhat happens if any of these checks fail:\nIf any of these system checks fail, Goofy Guineapig will not continue its execution. This is a defense evasion technique used to prevent detection in virtualized or sandboxed environments.", "mitre_technique": {"id": "T1497.001", "name": "Virtualization/sandbox evasion: system checks", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors."}, "pre-conditions": ["Access to the infected machine's system information.", "Ability to execute system checks.", "Knowledge of the system's disk size, physical memory size, and number of logical processors.", "The infected machine is powered on and operational.", "The infected machine's system information is accessible.", "System logs indicating disk size, physical memory size, and number of logical processors checks.", "Changes to system configuration files (e.g., /proc/meminfo, /proc/cpuinfo, /sys/block/*).", "Temporary files or cache created during system checks (e.g., /tmp/*).", "Network traffic related to system checks (e.g., API calls to retrieve system information).", "Modifications to system settings or registry entries (e.g., Windows: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management)."], "post-conditions": ["Disk size check:", "Physical memory size check:", "Number of logical processors check:"], "indicators": []}, {"id": "78bc0ef8-817e-431c-a0c7-9bc9b15823ad", "name": "Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig", "description": "Here's how the action \"Virtualization/Sandbox Evasion: User Activity Based Checks\" is performed by Goofy Guineapig:\nAction: Virtualization/Sandbox Evasion: User Activity Based Checks\nPerformed by: Goofy Guineapig\nHow it works:\n\nGoofy Guineapig checks for processes running on the system that indicate reverse engineering or debugging.\nIf any of these suspicious processes are found, Goofy Guineapig will not continue execution.\n\nSpecifically, Goofy Guineapig checks for:\n\nProcesses that indicate reverse engineering or debugging, such as:\nOllyDbg\nIDA Pro\nx64dbg\nother similar tools\n\n\n\nBy performing these user activity-based checks, Goofy Guineapig can detect if it is being analyzed in a sandbox or virtualized environment and prevent itself from executing further to avoid detection.", "mitre_technique": {"id": "T1497.002", "name": "Virtualization/sandbox evasion: user activity based checks", "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors."}, "pre-conditions": ["The system has processes running that can be monitored.", "The system has the necessary permissions to access process information.", "The system has the necessary permissions to terminate processes.", "The list of suspicious processes to check for is available.", "The system has the necessary resources to perform the checks.", "System logs indicating process termination.", "Process termination events in the system's event logs.", "Changes to the system's process list.", "System logs indicating the presence of suspicious processes.", "Changes to the system's registry or configuration files indicating the presence of suspicious processes."], "post-conditions": ["Presence of OllyDbg process", "Presence of IDA Pro process", "Presence of x64dbg process", "System logs indicating suspicious process activity", "Registry entries for OllyDbg, IDA Pro, and x64dbg", "Process creation timestamps for OllyDbg, IDA Pro, and x64dbg", "System event logs indicating process creation", "File system entries for OllyDbg, IDA Pro, and x64dbg executables", "Memory dumps of OllyDbg, IDA Pro, and x64dbg processes", "1 System performance metrics indicating resource usage by OllyDbg, IDA Pro, and x64dbg"], "indicators": []}, {"id": "457d3c6b-54ad-46e9-a165-ccc3996a330a", "name": "Obfuscated Files or Information: Software Packing as used by Goofy Guineapig", "description": "Here's the answer:\nAction: Obfuscation of files through software packing.\nHow it is performed: Goofy Guineapig is packed using UPX (Ultimate Packer for eXecutables) and then packaged within a legitimate NSIS (Nullsoft Scriptable Install System) installer. This makes it difficult to detect the malware, as the packed executable appears to be a legitimate file.", "mitre_technique": {"id": "T1027.001", "name": "Obfuscated files or information: binary padding", "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations."}, "pre-conditions": ["Presence of UPX (Ultimate Packer for eXecutables) software.", "Presence of NSIS (Nullsoft Scriptable Install System) software.", "Access to the Goofy Guineapig executable file.", "Administrative privileges to pack and package the executable.", "A legitimate NSIS installer template.", "Modified NSIS installer file with packed executable.", "Presence of UPX executable in the system.", "Changes in the system's file system (packed executable and NSIS installer).", "System logs showing NSIS and UPX usage.", "Modified system's registry entries (if NSIS installer modifies them).", "Presence of packed executable in the system's memory (temporary)."], "post-conditions": ["Modified executable file (packed with UPX)", "NSIS installer file", "Registry entries for NSIS installer", "Installed software entry in the Add/Remove Programs list", "Modified file system entries for the packed executable", "UPX executable file", "NSIS script file", "Installed software directory", "NSIS installer logs", "1 Registry entries for the packed executable", "1 System logs for the installation process", "1 Modified system files (e.g. system32 directory)"], "indicators": []}, {"id": "156fe0e2-68f3-4b18-b7bb-07772e94ac5b", "name": "Deobfuscate/Decode Files or Information as used by Goofy Guineapig", "description": "To deobfuscate/decode the files or information in Goofy Guineapig, the following steps can be performed:\n\n\nIdentify Obfuscated Strings: The first step is to identify the stack-based strings that are obfuscated with single byte XOR or subtraction throughout the binary.\n\n\nDetermine Decoding Method: Determine whether the obfuscation uses single byte XOR (XOR) or subtraction. This will help in deciding how to proceed with decoding.\n\n\nApply XOR or Subtraction Operation: If the obfuscation method is XOR, apply the XOR operation with the key used for encryption (uirWmX3fSBhplR2sj) to each byte of the obfuscated string. If it's subtraction, apply the inverse operation by adding the subtracted value back.\n\n\nDecode RC4-Encrypted Data: After deobfuscating the strings, decode any RC4-encrypted data that may be present in the binary using the provided key (uirWmX3fSBhplR2sj).\n\n\nVerify Decoded Strings: Verify that the decoded strings make sense and are not just random characters. This step is crucial to ensure that the decoding process was successful.\n\n\n**An\n\n", "mitre_technique": {"id": "T1027.008", "name": "Obfuscated files or information: stripped payloads", "description": "Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system\u2019s linker when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads."}, "pre-conditions": ["Access to the binary file of Goofy Guineapig.", "Knowledge of the obfuscation method used (single byte XOR or subtraction).", "Knowledge of the key used for encryption (uirWmX3fSBhplR2sj).", "Ability to apply XOR or subtraction operation on the obfuscated strings.", "Ability to decode RC4-encrypted data using the provided key.", "Ability to verify the decoded strings.", "Decoded strings in memory.", "Temporary files or buffers containing decoded data.", "Changes to the binary file's memory layout or structure.", "Log entries or records of the decoding process.", "Potential changes to the system's entropy or randomness pool.", "Temporary files or buffers containing RC4-decoded data."], "post-conditions": ["Modified binary file", "Decoded strings in memory", "Temporary files or buffers containing decoded data", "Changes in system logs", "Modified registry entries (if applicable)", "Decoded RC4-encrypted data in memory", "Changes in file system metadata", "System call logs", "Process memory dumps", "1 Changes in environment variables"], "indicators": []}, {"id": "0e766104-9fad-42ec-b220-781505ca5afe", "name": "Hide Artifacts: Hidden Window as used by Goofy Guineapig", "description": "To hide artifacts using a \"Hidden Window\" technique as implemented in Goofy Guineapig, the following steps are taken:\n\n\nProcess Hollowing: This involves replacing the original code of dllhost.exe with a malicious payload. The malware achieves this by overwriting the memory space allocated to dllhost.exe with its own malicious code.\n\n\nCreating a Hidden Process: After hollowing out dllhost.exe, Goofy Guineapig creates a new process from the modified dllhost.exe. This new process is created in a hidden state, meaning it does not appear in the Task Manager or other system monitoring tools.\n\n\nHow It's Done: The malware achieves this by setting the CREATE_NO_WINDOW flag when creating the new process. This flag tells Windows to create the process without displaying any window associated with it.\n\n\nExecuting Malicious Payload: Once the hidden process is created, Goofy Guineapig executes its malicious payload within this context. The payload can be used for various nefarious activities such as data collection, lateral movement, or installing additional malware.\n\n\nHow It's Done: The execution of the payload involves loading and running the malicious code within the newly created\n\n", "mitre_technique": {"id": "T1564", "name": "Hide artifacts", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection."}, "pre-conditions": ["Presence of `dllhost.exe` process", "Administrator privileges", "Ability to modify system memory", "Ability to create new processes", "Windows operating system", "Modified `dllhost.exe` file", "New process created in hidden state", "Malicious payload execution logs", "Changes in system memory", "New registry entries (if any)", "System call logs", "Process creation logs", "Memory dump of the modified `dllhost.exe` process"], "post-conditions": ["Modified `dllhost.exe` file", "New process created in Task Manager", "Hidden process in Windows Task Manager", "System logs of process creation", "Registry changes for process creation", "System file modification logs", "Windows Event Viewer logs", "Process ID (PID) in system memory", "System file timestamps", "1 System call logs"], "indicators": []}, {"id": "4d3f0456-0b2b-433b-855a-eca8dccfa281", "name": "Indicator Removal on Host: File Deletion as used by Goofy Guineapig", "description": "Here's how the action of Indicator Removal on Host: File Deletion is performed by Goofy Guineapig:\nStep 1: Initial Execution\nGoofy Guineapig initially runs in the location to which it was downloaded.\nStep 2: Moving Files\nThe malicious files are moved to a legitimate-looking directory, likely the ProgramData directory.\nStep 3: Deleting Original Files\nThe original files (Goofy Guineapig and its associated files) are deleted from their initial download location.\nThis action is performed by Goofy Guineapig as part of its persistence mechanism, allowing it to maintain a low profile on the infected machine.", "mitre_technique": {"id": "T1070.010", "name": "Indicator removal: relocate malware", "description": "Once a payload is delivered, adversaries may reproduce copies of the same malware on the victim system to remove evidence of their presence and/or avoid defenses. Copying malware payloads to new locations may also be combined with File Deletion to cleanup older artifacts."}, "pre-conditions": ["Goofy Guineapig is downloaded onto the host machine.", "The host machine has a ProgramData directory.", "The host machine has sufficient permissions to delete files from the initial download location.", "The host machine has sufficient permissions to write files to the ProgramData directory.", "Empty directory in the initial download location.", "Presence of Goofy Guineapig's files in the ProgramData directory.", "Modification timestamps in the ProgramData directory indicating recent activity.", "File system permissions changes in the ProgramData directory.", "Registry entries or other system configuration changes indicating the presence of Goofy Guineapig."], "post-conditions": ["Empty download location", "Modified ProgramData directory", "Deleted files in the download location", "Changes in the system's file system", "Timestamps of file deletion", "System logs of file deletion", "Changes in the system's registry (if the ProgramData directory is in the registry)"], "indicators": []}, {"id": "fb67480d-cdcb-4bee-9ef5-116e45690470", "name": "Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig", "description": "Here's how the action of \"Hijack Execution Flow: DLL Side-Loading\" is performed by Goofy Guineapig:\nStep 1: Installation of Legitimate Executable\nThe Goofy Guineapig loader installs a legitimate executable on the compromised system.\nStep 2: Loading Malicious DLL\nAlongside the legitimate executable, the Goofy Guineapig loader also loads a malicious DLL (Dynamic Link Library) onto the system.\nStep 3: Legitimate Executable Loads Malicious DLL\nThe legitimate executable is designed to load the malicious DLL into memory when it starts executing. This is achieved through a process called \"DLL side-loading\", where the legitimate executable loads the malicious DLL as if it were a normal part of its own functionality.\nStep 4: Execution of Malicious DLL\nOnce loaded, the malicious DLL is executed by the legitimate executable, allowing the malware to run and perform its intended actions on the compromised system.", "mitre_technique": {"id": "T1574.002", "name": "Hijack execution flow: dll side-loading", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s)."}, "pre-conditions": ["Access to the compromised system.", "Ability to install a legitimate executable on the system.", "Ability to load a malicious DLL onto the system.", "The legitimate executable is designed to load the malicious DLL.", "The system has the necessary permissions to load the malicious DLL.", "The installed legitimate executable.", "The loaded malicious DLL.", "Changes to the system's registry to reflect the loaded DLL.", "New entries in the system's process list.", "New entries in the system's memory usage logs.", "Changes to the system's file system to reflect the installation of the legitimate executable.", "New entries in the system's system logs (e.g. Windows Event Viewer)."], "post-conditions": ["Installed legitimate executable on the system", "Loaded malicious DLL onto the system", "Modified legitimate executable to load malicious DLL", "Added malicious DLL to the system's DLL cache", "Created a new registry entry for the malicious DLL", "Added malicious DLL to the system's process list", "Created a new file for the malicious DLL on the system", "Modified system's memory to include malicious DLL code", "Added malicious DLL to the system's system configuration files"], "indicators": []}, {"id": "e7722ba7-2f0b-4ce9-8380-cc7493750661", "name": "Process Injection: Process Hollowing as used by Goofy Guineapig", "description": "To perform Process Injection: Process Hollowing using Goofy Guineapig, the following steps are taken:\n\nContent Download: The Command and Control (C2) server sends malicious content to the infected machine.\ndllhost.exe Binary Selection: Goofy Guineapig selects the dllhost.exe binary as the target for process hollowing.\nProcess Hollowing: Goofy Guineapig performs process hollowing on the selected dllhost.exe binary, essentially replacing its legitimate code with the malicious content downloaded from the C2 server.\nInjection of Malicious Content: The malicious content is injected into the hollowed-out dllhost.exe process.\n\nThis allows Goofy Guineapig to execute additional plugins or collect information about the infected machine without being detected by traditional security measures.", "mitre_technique": {"id": "T1055", "name": "Process injection", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process."}, "pre-conditions": ["The infected machine has a stable internet connection.", "The Command and Control (C2) server is accessible and online.", "The dllhost.exe binary is present on the infected machine.", "The infected machine has sufficient privileges to execute the process hollowing operation.", "The malicious content is successfully downloaded from the C2 server.", "The Goofy Guineapig malware is installed and running on the infected machine.", "Network traffic logs showing communication between the infected machine and the C2 server.", "Modified dllhost.exe binary with malicious content.", "Creation of a new dllhost.exe process with malicious content.", "Changes to the infected machine's registry to maintain persistence.", "New files or directories created by the malicious content.", "System calls and API logs showing the process hollowing and injection operations.", "Changes to the infected machine's system configuration to maintain persistence."], "post-conditions": ["Modified dllhost.exe binary", "New process created in Task Manager", "dllhost.exe process in Windows Task Manager", "dllhost.exe process in Windows Process Explorer", "dllhost.exe process in Windows Performance Monitor", "dllhost.exe process in Windows Event Viewer", "Network traffic to C2 server", "New registry entry for dllhost.exe", "Modified dllhost.exe binary in Windows System32 directory", "1 dllhost.exe process in Windows System Configuration (msconfig)"], "indicators": []}, {"id": "36186d7b-b863-449c-a1fc-f8ae3f526dd1", "name": "Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig", "description": "Here's how the action is performed:\nSigned Binary Proxy Execution: Rundll32\nThe Goofy Guineapig malware uses the rundll32.exe executable, a legitimate Windows binary, as a proxy to execute the malicious DLL.\nStep-by-Step Process:\n\nThe malware loads the url.dll library using rundll32.exe.\nThe url.dll library is used to load the malicious DLL.\nThe malicious DLL is executed by the legitimate url.dll library, which is loaded by rundll32.exe.\n\nWhy this technique is effective:\n\nRundll32.exe is a signed binary, making it harder for security software to detect as malicious.\nUsing a legitimate binary like url.dll to load the malware DLL makes it less suspicious.\n\nThis technique allows Goofy Guineapig to maintain persistence on the infected machine while avoiding detection by security software.", "mitre_technique": {"id": "T1218.011", "name": "System binary proxy execution: rundll32", "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction})."}, "pre-conditions": ["The malware (Goofy Guineapig) has access to the infected machine.", "The `rundll3exe` executable is present on the infected machine.", "The `url.dll` library is present on the infected machine.", "The malicious DLL is present on the infected machine.", "The infected machine has a Windows operating system.", "The `rundll3exe` executable has the necessary permissions to execute the malicious DLL.", "The `url.dll` library has the necessary permissions to load the malicious DLL.", "A new entry in the Windows Registry, specifically in the `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run` key, pointing to the malicious DLL.", "A new entry in the Windows Task Scheduler, scheduling the execution of the malicious DLL.", "A new file created in the `%APPDATA%` directory or another location, containing the malicious DLL.", "Changes to the `url.dll` library, such as new imports or exports.", "A new entry in the Windows Event Log, indicating the execution of the `rundll3exe` executable."], "post-conditions": ["Loaded `url.dll` library entry in the Windows Task Manager.", "`rundll3exe` process entry in the Windows Task Manager.", "Loaded malicious DLL entry in the Windows Task Manager.", "Registry key modification to load the malicious DLL.", "Malicious DLL file on the infected machine.", "`rundll3exe` entry in the Windows Event Viewer logs.", "Loaded `url.dll` library entry in the Windows Event Viewer logs.", "Loaded malicious DLL entry in the Windows Event Viewer logs.", "Malicious DLL file entry in the Windows Event Viewer logs.", "1 `rundll3exe` entry in the Windows System Configuration (msconfig).", "1 Loaded `url.dll` library entry in the Windows System Configuration (msconfig).", "1 Loaded malicious DLL entry in the Windows System Configuration (msconfig)."], "indicators": []}]}, {"id": "f5b5a73b-5dac-4569-bfbf-fa38bc59d57d", "attack_steps": [{"id": "e78c799b-8859-45ad-969a-cb3fda3472e4", "name": "System Information Discovery as used by Goofy Guineapig", "description": "To perform System Information Discovery using Goofy Guineapig, the following steps are taken:\n\n\nObfuscation of Authorization String: The malware creates an \"Authorization\" string that contains system information about the infected machine. This string is likely to be obfuscated to evade detection.\n\n\nHTTP Header Injection: The obfuscated \"Authorization\" string is injected into the HTTP header of each C2 packet sent by Goofy Guineapig.\n\n\nTransmission over HTTPS: The C2 packets, including the obfuscated system information, are transmitted over a secure connection using HTTPS (over port 4443).\n\n\nReceiving End Processing: On the receiving end, the C2 server processes the received packet and extracts the obfuscated \"Authorization\" string.\n\n\nDecryption and Extraction of System Information: The malware on the receiving end decrypts or deobfuscates the \"Authorization\" string to extract the system information about the infected machine.\n\n\nStorage and Use of Collected Data: The extracted system information is then stored and used by the malware for further malicious activities, such as command execution, plugin loading, or process hollowing.\n\n", "mitre_technique": {"id": "T1082", "name": "System information discovery", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."}, "pre-conditions": ["Network connectivity", "Malware (Goofy Guineapig) presence on the infected machine", "C2 server presence and accessibility", "HTTPS (over port 4443) enabled on the C2 server", "Obfuscation and decryption mechanisms in place", "Network traffic logs", "HTTPS connection logs", "C2 server logs", "System information stored on the C2 server", "Decrypted system information stored on the C2 server", "Malware presence on the infected machine", "Modified system files (e.g., registry keys, configuration files)", "Network connection logs on the infected machine", "System call logs on the infected machine", "1 Process creation logs on the infected machine"], "post-conditions": ["Modified HTTP headers in C2 packets", "HTTPS connection logs on the C2 server", "Decrypted system information in the C2 server's logs", "Stored system information on the C2 server", "Changes in system configuration or registry keys", "Network traffic logs on the infected machine", "Modified system time or date stamps", "System information extraction logs on the C2 server", "Decryption key logs on the C2 server", "1 Modified system files or directories"], "indicators": []}]}, {"id": "afff5a8a-619f-42c1-a297-bd97d500f197", "attack_steps": [{"id": "573480a0-d30a-4c9b-ad96-bc88e419b08b", "name": "Application Layer Protocol: Web Protocols as used by Goofy Guineapig", "description": "To perform the specified action, which is to use HTTPS for Command and Control (C2) communications as implemented by Goofy Guineapig, several steps are involved:\n\n\nEstablishing a Connection: The first step involves initiating an HTTPS connection with the C2 server. This typically starts with sending an HTTP GET request to the server's URL.\n\n\nEncryption Key Exchange: Once the initial connection is established, both parties engage in a key exchange protocol (such as TLS) to establish shared encryption keys for secure communication. These keys are used for encrypting and decrypting data exchanged between the client and server.\n\n\nAuthentication: Depending on the HTTPS implementation, authentication may be required before proceeding with encrypted communications. This could involve verifying the identity of the server or client through certificates or other means.\n\n\nData Encryption: After establishing a secure connection and authenticating (if necessary), all data exchanged between the client and server is encrypted using the shared keys established during the key exchange process.\n\n\nC2 Communication: With the HTTPS connection securely established, Goofy Guineapig can then send and receive commands and data to/from the C2 server. This communication is protected by the encryption provided by the HTTPS protocol.\n\n\n**\n\n", "mitre_technique": {"id": "T1071.001", "name": "Application layer protocol: web protocols", "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server."}, "pre-conditions": ["A C2 server with a valid HTTPS implementation is available.", "The client (Goofy Guineapig) has a valid HTTPS client implementation.", "The client has a valid internet connection.", "The client has a valid URL or IP address of the C2 server.", "The C2 server has a valid public key or certificate.", "The client has a valid private key or certificate (if required for authentication).", "The client and server have compatible TLS versions and cipher suites.", "The client and server have compatible HTTP versions.", "Server logs of the C2 server.", "Client logs of Goofy Guineapig.", "Network traffic records (e.g., packet captures).", "Certificate and key files on the client and server.", "HTTPS connection establishment records (e.g., TLS handshake logs).", "Authentication records (e.g., certificate verification logs).", "Data encryption records (e.g., cipher suite usage logs).", "C2 communication records (e.g., command and data exchange logs)."], "post-conditions": ["Server logs of the initial HTTP GET request", "TLS session keys stored on both client and server", "Server-side SSL/TLS certificates and private keys", "Client-side SSL/TLS certificates and private keys", "HTTPS connection establishment records on the server", "Encrypted data stored on the server", "Server-side authentication records (if authentication is required)", "Client-side authentication records (if authentication is required)", "Server logs of C2 communication", "1 Client logs of C2 communication"], "indicators": []}, {"id": "e8d57d21-5220-4fb0-aa4e-6bea2797ef04", "name": "Fallback Channels as used by Goofy Guineapig", "description": "The action of using fallback channels in Goofy Guineapig is performed as follows:\nFallback Channels:\n\nEmbedded Configuration String: The malware contains an embedded configuration string that determines the communication protocol to be used.\nProtocol Selection: Based on the configuration string, the malware selects one of three protocols:\nUDP (User Datagram Protocol)\nKCP (Kryptic Control Protocol) - a proprietary protocol developed by Mojang for Minecraft\nDirect Socket Communications (a custom implementation)\n\n\nCommunication Establishment: The selected protocol is used to establish communication with a remote server or command and control (C2) infrastructure.\n\nIn summary, the fallback channels in Goofy Guineapig are determined by an embedded configuration string that selects one of three protocols: UDP, KCP, or direct socket communications.", "mitre_technique": {"id": "T1008", "name": "Fallback channels", "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds."}, "pre-conditions": ["The malware is executed on a compromised system.", "The embedded configuration string is present in the malware.", "The system has network connectivity.", "The system has the necessary libraries and dependencies for the selected protocol.", "The remote server or C2 infrastructure is accessible.", "Network traffic logs.", "System call logs.", "Process creation logs.", "Network socket establishment logs.", "Configuration string embedded in the malware.", "Changes to system libraries and dependencies.", "Logs of communication with remote server or C2 infrastructure."], "post-conditions": ["Embedded configuration string in the malware code", "UDP protocol packets in network traffic", "KCP protocol packets in network traffic", "Direct socket communication packets in network traffic", "Established connections to remote servers or C2 infrastructure in network connections", "Configuration string in malware binary file", "Protocol selection logs in malware logs", "Communication establishment logs in malware logs", "Network traffic logs", "1 System call logs for direct socket communications", "1 Process creation logs for malware execution", "1 Malware binary file on infected system", "1 Configuration string in malware configuration file", "1 Protocol selection artifacts in malware memory", "1 Communication establishment artifacts in malware memory"], "indicators": []}, {"id": "f90e4312-7043-4c24-a4e2-b7746e86fc19", "name": "Non-Standard Port as used by Goofy Guineapig", "description": "Action: Communicating over a Non-Standard Port\nHow it's performed: Goofy Guineapig uses the non-standard HTTPS port 4443 to communicate.\nExplanation: The malware uses a custom port number, specifically port 4443, which is not the standard HTTPS port (443). This allows the malware to evade detection and blend in with legitimate traffic.", "mitre_technique": {"id": "T1571", "name": "Non-standard port", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data."}, "pre-conditions": ["Access to a system with network connectivity.", "Ability to modify system configuration or firewall rules.", "Knowledge of non-standard port numbers.", "Presence of a communication protocol (e.g., HTTPS).", "System administrator privileges or elevated access.", "System logs showing changes to firewall rules or system configuration.", "Network traffic logs showing communication on non-standard port 444", "System configuration files modified to allow non-standard port communication.", "Presence of a custom HTTPS certificate or key on the system.", "Changes to system startup scripts or services to enable non-standard port communication."], "post-conditions": ["Network logs showing communication on port 4443", "System logs indicating non-standard HTTPS port usage", "Firewall rules allowing traffic on port 4443", "Network traffic capture files containing data sent over port 4443", "System configuration files showing port 4443 as a custom HTTPS port", "Process logs showing the malware process using port 4443", "System call logs indicating the use of port 4443 for communication", "Network interface configuration files showing port 4443 as a valid port", "System event logs recording the creation of the malware process using port 4443", "1 System registry entries or configuration files storing the custom port number"], "indicators": []}]}]
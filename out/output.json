[
    {
        "pre-conditions": {
            "is_connectivity_required": {
                "short": "",
                "summary": ""
            },
            "os": {
                "short": "",
                "summary": ""
            },
            "target_software": {
                "short": "",
                "summary": ""
            }
        },
        "actions": [
            {
                "action": "Create or Modify System Process: Windows Service as used by Goofy Guineapig",
                "description": " The action \"Create or Modify System Process: Windows Service as used by Goofy Guineapig\" fits into the MITRE technique T1012, which is \"Query Registry,\" because the persistence of the Goofy Guineapig backdoor is maintained through a Windows service. This service likely interacts with the Windows Registry to store information or settings that are crucial for its operation. By creating or modifying a system process in the form of a Windows service, Goofy Guineapig ensures that its persistence mechanism is deeply integrated into the system's registry. This allows the malware to query the registry for information, such as system configurations or installed software, which can be used to further its objectives. The registry is a central repository for system and application settings, making it a valuable resource for adversaries to gather information and maintain their presence on a compromised system. The Goofy Guineapig's use of a Windows service to achieve this aligns with the behavior described in MITRE technique T1012, where adversaries exploit registry interactions to enhance their capabilities and maintain persistence.",
                "mitre_technique": "T1012 - Query Registry",
                "mitre_description": "\nAdversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.The Registry contains a significant amount of information about the operating system, configuration, software, and security.[1] Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n",
                "indicators": []
            }
        ]
    },
    {
        "actions": [
            {
                "action": "Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig",
                "description": " The action of Goofy Guineapig masquerading as a FireFox installer and a Google updater directly aligns with the MITRE technique T1036.005, which is titled \"Match Legitimate Name or Location.\" This technique involves adversaries attempting to evade detection by imitating the names or locations of legitimate files or resources. In this case, Goofy Guineapig uses the names of well-known and trusted software applications (FireFox and Google) to blend in with legitimate traffic and avoid raising suspicion. By doing so, it aims to bypass security measures that might otherwise identify and block malicious activities. The technique's description explains that adversaries may place executables in trusted directories or name them after legitimate programs, which is precisely what Goofy Guineapig does by masquerading as these familiar software installers. This strategy is a classic example of defense evasion, where the malware seeks to appear harmless or authorized to avoid interception and analysis by security systems.",
                "mitre_technique": "T1036.005 - Match Legitimate Name or Location",
                "mitre_description": "\nAdversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.Adversaries may also use the same icon of the file they are trying to mimic.\n",
                "indicators": []
            },
            {
                "action": "Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig",
                "description": " The action \"Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig\" fits into the MITRE technique T1082, which is \"System Information Discovery,\" in the following way:\n\nGoofy Guineapig's evasion technique involves checking the time register twice with a delay of more than 100 milliseconds. This behavior is a form of System Information Discovery because it indirectly gathers information about the system's timekeeping capabilities. By assessing the time difference, the malware can infer if the system's clock is functioning correctly or if it has been tampered with. This information could be valuable to an adversary, as it might indicate the presence of a controlled environment or a sandbox, where the system's time could be manipulated to prevent detection.\n\nIn the context of MITRE technique T1082, adversaries may use System Information Discovery to shape their actions, such as deciding whether to fully infect the target or attempt specific actions. By employing this evasion technique, Goofy Guineapig demonstrates an attempt to gather system-related information (in this case, time-related information) to avoid detection and potentially adapt its behavior accordingly.\n\nThe MITRE technique description for T1082 explains that adversaries may use tools like Systeminfo or Network Device CLI to gather detailed system information, including operating system version, patches, hotfixes, service packs, and architecture. Goofy Guineapig's time-based evasion aligns with this description, as it uses the system's time feature to gather information and make decisions about its execution, thus fitting into the broader category of System Information Discovery.\n\nIn summary, Goofy Guineapig's time-based evasion technique is a form of System Information Discovery, as it indirectly gathers information about the system's timekeeping capabilities, which could be used to shape the malware's behavior and avoid detection. This action aligns with the MITRE technique T1082, which focuses on adversaries' attempts to gather detailed system information during automated discovery.",
                "mitre_technique": "T1082 - System Information Discovery",
                "mitre_description": "\nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]\n",
                "indicators": []
            },
            {
                "action": "Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig",
                "description": " The action \"Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig\" directly aligns with the MITRE technique T1082, which is \"System Information Discovery.\" In this context, Goofy Guineapig performs system checks to determine the disk size, physical memory size, and number of logical processors. If any of these checks fail, the malware will terminate its execution.\n\nThis behavior fits into the MITRE technique T1082 because the malware is gathering critical system information to make informed decisions about its actions. By assessing the system's resources, Goofy Guineapig can determine whether the environment is suitable for its persistence and operation. This information discovery process is crucial for the malware to adapt its behavior and potentially avoid detection or triggering defensive mechanisms.\n\nIn summary, the action of Goofy Guineapig using system checks for virtualization/sandbox evasion aligns with the MITRE technique T1082, as it involves the malware gathering system information to shape its behavior and potentially evade detection. This technique is a part of the broader strategy of system information discovery, which adversaries may use to tailor their actions and conceal their presence within a targeted system.",
                "mitre_technique": "T1082 - System Information Discovery",
                "mitre_description": "\nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]\n",
                "indicators": []
            },
            {
                "action": "Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig",
                "description": " The action \"Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig\" fits into the MITRE technique T1555.003 by demonstrating how adversaries can exploit user activity to gain unauthorized access to credentials stored in web browsers. Goofy Guineapig performs checks on the system to determine if it is being reverse-engineered or debugged by looking for specific processes that indicate such activity. If these checks fail, meaning the malware detects that it is being analyzed or debugged, it will terminate its execution.\n\nThis behavior aligns with MITRE technique T1555.003, which involves adversaries acquiring credentials from web browsers by monitoring user activity. In this context, Goofy Guineapig's checks are a form of user activity monitoring, as it is assessing the presence of processes that could be related to security analysis tools or debugging software. By detecting these activities, Goofy Guineapig is attempting to evade detection and maintain its persistence, similar to how an adversary might use user activity-based checks to extract credentials from web browsers.\n\nIn summary, Goofy Guineapig's evasion technique of checking for user activity-based indicators of analysis aligns with MITRE technique T1555.003, as both involve adversaries or malware attempting to avoid detection by monitoring user activity and adapting their behavior accordingly. This connection highlights the importance of understanding and defending against such evasion tactics to protect sensitive credentials stored in web browsers.",
                "mitre_technique": "T1555.003 - Credentials from Web Browsers",
                "mitre_description": "\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser.[1] Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim\u2019s cached logon credentials as the decryption key.[2]Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.[3][4] Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.[5]After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).\n",
                "indicators": []
            },
            {
                "action": "Obfuscated Files or Information: Software Packing as used by Goofy Guineapig",
                "description": " The action \"Obfuscated Files or Information: Software Packing\" as used by Goofy Guineapig fits into the MITRE technique T1027.002 by demonstrating a method of concealing code through the use of software packing. In this specific case, Goofy Guineapig employs UPX packing, which compresses or encrypts the executable file. This technique alters the file signature, making it harder for signature-based detection systems to identify the malicious code. By packing the executable with a legitimate NSIS installer, the adversary aims to evade security measures that rely on recognizing known packer signatures. This aligns with the MITRE technique description, which explains that adversaries may use software packing to hide their code and avoid detection. The technique involves compressing or encrypting executables, and adversaries may also create custom packing methods to evade defenses that are tuned to detect known packers like UPX. The use of UPX packing by Goofy Guineapig is a clear example of this technique in action, as it serves to obscure the executable's true nature and complicate the efforts of security professionals to identify and mitigate the threat.",
                "mitre_technique": "T1027.002 - Software Packing",
                "mitre_description": "\nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.[1] Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.[2] \n",
                "indicators": []
            },
            {
                "action": "Deobfuscate/Decode Files or Information as used by Goofy Guineapig",
                "description": " The action \"Deobfuscate/Decode Files or Information\" as used by Goofy Guineapig aligns with the MITRE technique T1552.001, which involves adversaries searching for and extracting insecurely stored credentials from files. In the context of Goofy Guineapig, the malware contains stack-based strings that are obfuscated using single byte XOR or subtraction within the binary. This obfuscation is a form of credential hiding, as the strings could potentially represent sensitive information such as passwords or other credentials.\n\nWhen adversaries or malware like Goofy Guineapig deobfuscate or decode these obfuscated strings, they are effectively uncovering the stored credentials. This fits into the MITRE technique T1552.001 because the adversary (or malware) is searching local file systems, remote file shares, or any other storage medium where credentials may be insecurely stored. By deobfuscating the obfuscated strings, the adversary can extract the credentials, which could then be used for unauthorized access or other malicious activities.\n\nThe MITRE technique T1552.001 emphasizes the importance of securing credentials, as their exposure can lead to significant security breaches. In this case, the deobfuscation process is a critical step in the adversary's ability to exploit the exposed credentials, which is why it is directly related to the technique's description of searching and extracting credentials from files.",
                "mitre_technique": "T1552.001 - Credentials In Files",
                "mitre_description": "\nAdversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping.[1] Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.[2]In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.[3] They may also be found as parameters to deployment commands in container logs.[4] In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.[5]\n",
                "indicators": []
            },
            {
                "action": "Hide Artifacts: Hidden Window as used by Goofy Guineapig",
                "description": " The action \"Hide Artifacts: Hidden Window\" as used by Goofy Guineapig aligns with the MITRE technique T1555.003, which involves adversaries acquiring credentials from web browsers. While the specific technique T1555.003 focuses on extracting credentials directly from browser storage, Goofy Guineapig's method of hiding processes (such as performing process hollowing on dllhost.exe) can be seen as a broader defense evasion strategy. By creating hidden processes, Goofy Guineapig may be attempting to avoid detection and maintain stealth, similar to how adversaries might use stolen credentials to remain undetected while recycling them across systems.\n\nAlthough the direct connection between hiding artifacts and acquiring credentials from web browsers is not explicitly stated, both actions serve the purpose of evading detection and maintaining persistence. In the context of MITRE ATT&CK framework, these tactics contribute to the overall goal of an adversary to remain undetected and achieve their objectives.\n\nTo summarize, while the action \"Hide Artifacts: Hidden Window\" does not directly fit into the MITRE technique T1555.003, it complements the broader theme of defense evasion and persistence, which are essential for adversaries to successfully utilize stolen credentials and maintain their presence within compromised systems.",
                "mitre_technique": "T1555.003 - Credentials from Web Browsers",
                "mitre_description": "\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser.[1] Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim\u2019s cached logon credentials as the decryption key.[2]Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.[3][4] Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.[5]After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).\n",
                "indicators": []
            },
            {
                "action": "Indicator Removal on Host: File Deletion as used by Goofy Guineapig",
                "description": " The action \"Indicator Removal on Host: File Deletion\" as used by Goofy Guineapig aligns with the MITRE technique T1036.003, which involves the renaming or moving of legitimate system utilities to evade security mechanisms. In this context, Goofy Guineapig initially operates in the directory where it is downloaded. To avoid detection, it moves the downloaded files to a directory that appears legitimate and then deletes the original files from the download location. This action of moving and deleting files mimics the behavior of renaming or relocating legitimate system utilities, which is the core concept of MITRE technique T1036.003.\n\nBy doing so, Goofy Guineapig aims to bypass security monitoring and control mechanisms that are in place for system utilities. The malware's ability to manipulate the file system in this manner allows it to evade detection based on the execution of system utilities from non-standard paths or directories. This technique is a form of evasion, as it hides the malware's presence and actions from security systems that rely on monitoring the usage of legitimate system utilities.\n\nIn summary, the action \"Indicator Removal on Host: File Deletion\" by Goofy Guineapig fits into the MITRE technique T1036.003 because it involves the manipulation of legitimate system utilities (in this case, the files) to evade security mechanisms. The malware achieves this by moving the files to a legitimate-looking directory and deleting them from the initial download location, thus avoiding detection based on the execution of system utilities from non-standard paths.",
                "mitre_technique": "T1036.003 - Rename System Utilities",
                "mitre_description": "\nAdversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. [1] It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename rundll32.exe). [2] An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. [3]\n",
                "indicators": []
            },
            {
                "action": "Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig",
                "description": " The action \"Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig\" fits into the MITRE technique T1082, which is \"System Information Discovery,\" in the following way:\n\nDuring the DLL Side-Loading process, Goofy Guineapig installs a legitimate executable alongside a malicious DLL. The legitimate executable is loaded by the system, but it also loads the malicious DLL, which is part of the Goofy Guineapig's backdoor functionality. This process allows the adversary to execute their code within the context of a trusted process, effectively hiding their presence.\n\nThe connection to MITRE technique T1082, System Information Discovery, lies in the fact that during the execution of the malicious DLL, the adversary may attempt to gather detailed information about the operating system and hardware. This information can include the version, patches, hotfixes, service packs, and architecture. By obtaining this system information, the adversary can tailor their follow-on behaviors, such as deciding whether to fully infect the target system or attempting specific actions.\n\nIn this context, the DLL Side-Loading technique enables the adversary to maintain stealth while collecting valuable system information, which aligns with the objectives of the T1082 System Information Discovery technique. The gathered information can be used to refine the malware's capabilities, evade detection, and potentially exfiltrate sensitive data.\n\nIn summary, the Hijack Execution Flow: DLL Side-Loading used by Goofy Guineapig fits into the MITRE technique T1082, System Information Discovery, as it allows the adversary to execute their malicious code within a trusted process and gather detailed system information for further exploitation and evasion purposes.",
                "mitre_technique": "T1082 - System Information Discovery",
                "mitre_description": "\nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]\n",
                "indicators": []
            },
            {
                "action": "Process Injection: Process Hollowing as used by Goofy Guineapig",
                "description": " The action \"Process Injection: Process Hollowing as used by Goofy Guineapig\" fits into the MITRE technique T1027.002, which is Software Packing, by illustrating a method of concealing malicious code. In this context, Goofy Guineapig performs process hollowing on the dllhost.exe binary, which is a form of software packing. Process hollowing involves replacing a legitimate process's memory space with malicious code, effectively hiding the true nature of the executable. This technique alters the file signature to avoid detection by signature-based security measures.\n\nThe MITRE technique description for Software Packing explains that adversaries may use packing or virtual machine software protection to obscure their code. By compressing or encrypting an executable, the file signature changes, making it more challenging for signature-based detection tools to identify the malicious content. Decompression techniques are typically employed to run the executable code in memory.\n\nIn the case of Goofy Guineapig, the process hollowing technique is used to inject malicious content into the dllhost.exe binary, which is then executed by the legitimate process. This method of concealment aligns with the Software Packing technique, as it involves altering the executable's appearance and behavior to evade detection and maintain the adversary's presence on the infected machine.\n\nIn summary, the action of Goofy Guineapig using process hollowing on the dllhost.exe binary exemplifies the Software Packing technique (T1027.002) by concealing malicious code within a legitimate process, thereby evading signature-based detection and maintaining its persistence on the target system.",
                "mitre_technique": "T1027.002 - Software Packing",
                "mitre_description": "\nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.[1] Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.[2] \n",
                "indicators": []
            },
            {
                "action": "Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig",
                "description": " The action \"Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig\" directly aligns with the MITRE technique T1218.010, which describes the abuse of Regsvr32.exe to proxy execution of malicious code. In this context, Goofy Guineapig employs rundll32.exe, a legitimate Windows command-line utility that is often signed by Microsoft, to execute a malicious DLL. This technique allows the malware to bypass security measures that may not monitor the execution of rundll32.exe or its associated DLLs due to allowlists or false positives.\n\nThe MITRE technique T1218.010 explains that adversaries can use Regsvr32.exe to load COM scriptlets to execute DLLs under user permissions, which is a method of establishing persistence on a system. By leveraging rundll32.exe, Goofy Guineapig is able to execute the malicious DLL without making changes to the Windows Registry, thus avoiding detection by security tools that monitor registry modifications.\n\nFurthermore, the technique highlights that Regsvr32.exe is network and proxy aware, which means that it can be used to load a DLL from an external URL, as seen in the Goofy Guineapig's use of rundll32.exe and url.dll for executing the malicious DLL. This method is often referred to as a \"Squiblydoo\" and has been utilized in targeted campaigns against governments.\n\nIn summary, the action of Goofy Guineapig using Signed Binary Proxy Execution: Rundll32 fits into the MITRE technique T1218.010 as it demonstrates the abuse of a legitimate and signed Windows utility (Regsvr32.exe) to execute malicious code, establish persistence, and evade detection by security tools. This technique showcases the sophisticated methods employed by adversaries to bypass security measures and maintain their presence on infected systems.",
                "mitre_technique": "T1218.010 - Regsvr32",
                "mitre_description": "\nAdversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. [1]Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. [2] This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments. [3] [4]Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking. [3]\n",
                "indicators": []
            }
        ]
    },
    {
        "actions": [
            {
                "action": "System Information Discovery as used by Goofy Guineapig",
                "description": " The action of System Information Discovery, as employed by Goofy Guineapig, aligns with the MITRE technique T1082, which is System Information Discovery. In this context, Goofy Guineapig sends obfuscated 'Authorization' strings in the HTTP header of each Command and Control (C2) packet to gather detailed information about the infected machine. This includes details about the operating system, hardware, and potentially other system-specific data.\n\nThe MITRE technique T1082 describes how adversaries may attempt to obtain detailed information about the operating system and hardware, such as version, patches, hotfixes, service packs, and architecture. This information can be used to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Tools like Systeminfo can be used to gather this data, especially when running with privileged access.\n\nIn the case of Goofy Guineapig, the malware leverages this technique by using the obfuscated 'Authorization' strings to extract system information from the C2 server. This allows the malware to adapt its behavior based on the gathered information, potentially enhancing its evasion capabilities and making it more difficult for defenders to detect and mitigate the threat. The action of sending these strings fits into the MITRE technique T1082 as it represents a method of system information discovery used by the malware to gather valuable data about the target environment.",
                "mitre_technique": "T1082 - System Information Discovery",
                "mitre_description": "\nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]\n",
                "indicators": []
            }
        ]
    },
    {
        "actions": [
            {
                "action": "Application Layer Protocol: Web Protocols as used by Goofy Guineapig",
                "description": " The action \"Application Layer Protocol: Web Protocols as used by Goofy Guineapig\" specifically refers to the use of HTTPS (Hypertext Transfer Protocol Secure) for command and control (C2) communications by the malware known as Goofy Guineapig. This fits into the MITRE technique T1555.003, which is about \"Credentials from Web Browsers.\"\n\nThe MITRE technique T1555.003 describes how adversaries may extract credentials from web browsers, such as usernames and passwords, which are often stored in encrypted formats within credential stores. The technique outlines various methods to obtain these credentials, including reading database files, executing SQL queries, and searching web browser process memory for patterns that match credentials.\n\nIn the context of Goofy Guineapig, although the malware does not directly extract credentials from web browsers, it uses HTTPS for its C2 communications, which is a web protocol. This indicates that the malware could potentially leverage the HTTPS protocol to interact with web servers and possibly exploit vulnerabilities or misconfigurations to gain access to credentials stored in web browsers.\n\nThe connection between the action and the MITRE technique lies in the fact that the use of HTTPS by Goofy Guineapig could be part of a broader strategy to exploit web-based credentials. By using a standard web protocol like HTTPS, the malware may attempt to intercept or manipulate web traffic to acquire sensitive information, such as credentials, from web browsers. This aligns with the MITRE technique's focus on adversaries gaining access to credentials through web browsers, even if the malware itself does not directly extract the credentials.\n\nIn summary, while Goofy Guineapig's use of HTTPS for C2 communications does not directly involve extracting credentials from web browsers, it is related to the MITRE technique T1555.003 in terms of the potential for exploiting web protocols to gain access to sensitive information stored in web browsers.",
                "mitre_technique": "T1555.003 - Credentials from Web Browsers",
                "mitre_description": "\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser.[1] Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim\u2019s cached logon credentials as the decryption key.[2]Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.[3][4] Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.[5]After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).\n",
                "indicators": []
            },
            {
                "action": "Fallback Channels as used by Goofy Guineapig",
                "description": " The action \"Fallback Channels as used by Goofy Guineapig\" fits into the MITRE technique T1614, System Location Discovery, as it demonstrates an evasion technique where the malware adapts its communication method based on certain conditions. In this case, Goofy Guineapig can switch to using UDP and the KCP protocol, or direct socket communications, depending on an embedded configuration string. This adaptability could be part of an adversary's strategy to infer the geographical location of the victim host. By having multiple communication methods, the malware may attempt to remain undetected or to evade location-based detection mechanisms. The ability to change communication protocols could be used to avoid triggering location-based security controls or to blend in with normal network traffic, which aligns with the concept of System Location Discovery where adversaries gather information to shape their behavior and avoid detection.",
                "mitre_technique": "T1614 - System Location Discovery",
                "mitre_description": "\nAdversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.[1][2][3] Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host.[1] In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.[4][5]Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.[6][2]\n",
                "indicators": []
            },
            {
                "action": "Non-Standard Port as used by Goofy Guineapig",
                "description": " The action \"Non-Standard Port as used by Goofy Guineapig\" fits into the MITRE technique T1571 - Non-Standard Port because Goofy Guineapig communicates over the non-standard HTTPS port 4443. This deviation from the standard port 443 for HTTPS communications aligns with the MITRE technique's description of adversaries using protocol and port pairings that are not typically associated. By utilizing port 4443 instead of the standard port, Goofy Guineapig potentially bypasses network filtering and complicates the analysis of network data, which is characteristic of the T1571 technique. This behavior is indicative of an attempt to evade detection and maintain stealth, as described in the MITRE technique's context.",
                "mitre_technique": "T1571 - Non-Standard Port",
                "mitre_description": "\nAdversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088[1] or port 587[2] as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.[3]\n",
                "indicators": []
            }
        ]
    }
]
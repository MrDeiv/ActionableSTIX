[2025-02-26 14:53:18,477 INFO] Application started
[2025-02-26 14:53:37,834 INFO] Connectivity computed using 9 documents. The documents are:
[Document(id='1b90ae03-ef62-4894-8730-4903f18528bf', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Should  this fail the hardcoded default  shown in the  example beacon in Figure 2 will be  \nused instead .\n\nThe HTTP authorisation string header  is unique per infected machine, as described \nfurther in the ‘ Functionality  (Backdoor )’ section of this report.\n\nAs this  HTTP header  is unusually \nstructured5, it is possible this could be signatured .'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='13e8300a-2cdb-4ae8-9bff-592231a0a77d', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Masquerading as legitimate processes  \nGoofy Guineapig has trojanised  a legitimate FireFox NSIS installation package and is dropped \nalongside legitimate FireFox files.\n\nIn addition to this, the malicious DLL is sideloaded by the \nlegitimate , signed,  executable  GoogleUpdate.exe  (also dropped as part of the NSIS installer).'), Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1008  Fallback Channels  Goofy Guineapig contains the \nfunctionality to communicate using UDP \nand the KCP protocol, or direct socket \ncommunications, dependant on an \nembedded configuration string .\n\nT1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T his malware has been assessed to be of \nlow sophistication.\n\nThe Goofy Guineapig malware  contains multiple  similarities with the Jolly Jellyfish malware , \nparticularly relating to the defence  evasion techniques  implemented.\n\nThis could indicate a shared \norigin .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The rest of the information is collected by the relevant Windows APIs.\n\nIf the malware fails to collect any of this information, it will be replaced with the string ‘ (none) ’.\n\nThe \nadapter informati on and host name are co ncatenat ed and an MD5 hash of the result is taken.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='This same behaviour was observed during analysis of the Jolly Jellyfish malware.\n\nIn addition to this, Goofy Guineapig checks the name of each r unning process on the machine, and if \nany process containing the string ‘dbg’, ‘debug ’, or ‘ida’ is determined to be running , the malware \nwill not continue execution.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1027.002  Obfuscated Files or \nInformation: Software \nPacking  Goofy Guineapig is UPX packed and \npackaged in with a legitimate NSIS \ninstaller.\n\nT1140   Deobfuscate/Decode \nFiles or Information  Goofy Guineapig contains stack -based \nstrings which are obfuscated with single \nbyte XOR or subtraction throughout the \nbinary.')]
[2025-02-26 14:53:39,258 INFO] OS computed using 8 documents. The documents are:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='1b90ae03-ef62-4894-8730-4903f18528bf', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Should  this fail the hardcoded default  shown in the  example beacon in Figure 2 will be  \nused instead .\n\nThe HTTP authorisation string header  is unique per infected machine, as described \nfurther in the ‘ Functionality  (Backdoor )’ section of this report.\n\nAs this  HTTP header  is unusually \nstructured5, it is possible this could be signatured .'), Document(id='13e8300a-2cdb-4ae8-9bff-592231a0a77d', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Masquerading as legitimate processes  \nGoofy Guineapig has trojanised  a legitimate FireFox NSIS installation package and is dropped \nalongside legitimate FireFox files.\n\nIn addition to this, the malicious DLL is sideloaded by the \nlegitimate , signed,  executable  GoogleUpdate.exe  (also dropped as part of the NSIS installer).'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The information  sent about the victim machine  includes:  \n• Operating system caption  \n• Antivirus product display name  \n• Adapters information  \n• Host and host name  \n• Computer name  \nThe operating system caption and Antivirus product display name are both collected by utilising COM  \nto access WMI information3.\n\nThe rest of the information is collected by the relevant Windows APIs.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The session ID is only required where the command ID \nis 0x2E  (spawn child process).\n\nMultiple tasks can be sent in the same request , and certain request ID’s have dependencies on other \ncommands having completed in the same request cycle.\n\nAn example of this is where  the request \n0x15  initialises some structures  required by  the plugin load / unload commands ( 0x18 , 0x19  and \n0x1A ).'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial Goopdate.dll  execution writes some commands to a batch file, then creates a hidden \nprocess, which calls the batch file via the command line:  \ncmd /c call C: \\<path>\\tmp.bat \nThe first command  sets echo  to be off ; the second command is :  \nchoice /t %d /d y /n >nul  \nThe format string ‘%d’ is never replaced with a numeric value, therefore when executed this command \nwill error , the script will continu e on to run the subsequent commands .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.')]
[2025-02-26 14:53:43,507 INFO] Vulnerability computed using 7 documents. The documents are:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Masquerading as legitimate processes  \nGoofy Guineapig has trojanised  a legitimate FireFox NSIS installation package and is dropped \nalongside legitimate FireFox files.\n\nIn addition to this, the malicious DLL is sideloaded by the \nlegitimate , signed,  executable  GoogleUpdate.exe  (also dropped as part of the NSIS installer).'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='1b90ae03-ef62-4894-8730-4903f18528bf', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Should  this fail the hardcoded default  shown in the  example beacon in Figure 2 will be  \nused instead .\n\nThe HTTP authorisation string header  is unique per infected machine, as described \nfurther in the ‘ Functionality  (Backdoor )’ section of this report.\n\nAs this  HTTP header  is unusually \nstructured5, it is possible this could be signatured .'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T his malware has been assessed to be of \nlow sophistication.\n\nThe Goofy Guineapig malware  contains multiple  similarities with the Jolly Jellyfish malware , \nparticularly relating to the defence  evasion techniques  implemented.\n\nThis could indicate a shared \norigin .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='This is unlikely to be the case, as if a debugger is running its likely other analysis \ntools will be too.\n\nSandbox detecti on  \nThe malware implements some basic anti -sandbox  / anti-virtual machine (VM) techniques.\n\nThese \ninclude checking  that the physical memory size of the machine exceeds 2GB and that the disk is \nmore than 1GB in size.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These two values are \ncompared, and if the value is more than 100ms diffe rence the malware will not continue execution.\n\nAnti-dynamic analysis  \nThere are multiple short ( less than a second ) sleep commands interspersed with the rest of the \ndefence evasion techniques implemented.')]
[2025-02-26 14:53:51,068 INFO] Inserted state with id: 3cf3bca6-db5b-460f-a3d9-feef618d2127
[2025-02-26 14:53:54,657 INFO] Processing step relative to tactic: persistence
[2025-02-26 14:53:54,658 INFO] + Processing action: Create or Modify System Process: Windows Service as used by Goofy Guineapig
[2025-02-26 14:53:57,250 INFO] ++ Embedding computed for: Create or Modify System Process: Windows Service as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:54:17,638 INFO] ++ Similar techniques found (in 1 attemps):
['create or modify system process: windows service']
[2025-02-26 14:54:17,638 INFO] ++ Querying the QA model for action Create or Modify System Process: Windows Service as used by Goofy Guineapig with the following context:
create or modify system process: windows service
[2025-02-26 14:54:18,700 INFO] ++ Refining the action: Create or Modify System Process: Windows Service as used by Goofy Guineapig using 9 documents:
[Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nPersistence  T1543.003  Create or Modify \nSystem Process: \nWindows Service  Goofy Guineapig maintains persistence \nas a Windows service.\n\nDefense Evasion  T1036.005  Masquerading: Match \nLegitimate Name or \nLocation  Goofy Guineapig masquerades as a \nFireFox installer and a Google updater.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.')]
[2025-02-26 14:54:25,123 INFO] + Computing pre-conditions for the next attack step using the following actions:
Create or Modify System Process: Windows Service as used by Goofy Guineapig - To answer your question, I will break down the steps involved in the "Create or Modify System Process: Windows Service" technique used by Goofy Guineapig to maintain persistence.

**Step 1: Create a new Windows service**

Goofy Guineapig creates a new Windows service using the `sc` command. This is done by executing the following command:
```
sc create <service_name> binPath= "<path_to_executable>"
```
Where `<service_name>` is the name of the service, and `<path_to_executable>` is the path to the executable file that will be run as a service.

**Step 2: Configure the Windows service**

The Goofy Guineapig malware then configures the newly created Windows service using the `sc` command. This involves setting the startup type of the service to "Automatic" and configuring any other necessary settings.
```
sc config <service_name> start= auto
```
**Step 3: Start the Windows service**

Finally, Goofy Guineapig starts the newly created Windows service using the `net` command.
```
net start <service_name>
```
This allows the malware to maintain persistence on the system by running as a legitimate-looking
[2025-02-26 14:54:26,370 INFO] Processing step relative to tactic: defense-evasion
[2025-02-26 14:54:26,370 INFO] + Processing action: Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig
[2025-02-26 14:54:28,392 INFO] ++ Embedding computed for: Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:55:00,628 INFO] ++ Similar techniques found (in 1 attemps):
['masquerading']
[2025-02-26 14:55:00,629 INFO] ++ Querying the QA model for action Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig with the following context:
masquerading
[2025-02-26 14:55:01,709 INFO] ++ Refining the action: Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig using 9 documents:
[Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='1ec3a9fd-bba9-492b-b030-299f429cdf2d', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.003  Virtualization/Sandbox \nEvasion: Time Based \nEvasion  Goofy Guineapig checks the time \nregister twice for a delay of more than \n100 milliseconds and will not continue \nexecution if more time has elapsed.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nPersistence  T1543.003  Create or Modify \nSystem Process: \nWindows Service  Goofy Guineapig maintains persistence \nas a Windows service.\n\nDefense Evasion  T1036.005  Masquerading: Match \nLegitimate Name or \nLocation  Goofy Guineapig masquerades as a \nFireFox installer and a Google updater.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.')]
[2025-02-26 14:55:06,738 INFO] + Processing action: Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig
[2025-02-26 14:55:08,779 INFO] ++ Embedding computed for: Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:55:17,275 INFO] ++ Similar techniques found (in 1 attemps):
['virtualization/sandbox evasion: time based evasion']
[2025-02-26 14:55:17,275 INFO] ++ Querying the QA model for action Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig with the following context:
virtualization/sandbox evasion: time based evasion
[2025-02-26 14:55:17,709 INFO] ++ Refining the action: Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig using 8 documents:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.003  Virtualization/Sandbox \nEvasion: Time Based \nEvasion  Goofy Guineapig checks the time \nregister twice for a delay of more than \n100 milliseconds and will not continue \nexecution if more time has elapsed.'), Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.001  Virtualization/Sandbox \nEvasion: System \nChecks  Goofy Guineapig checks the disk size, \nphysical memory size, and number of \nlogical processors, and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.')]
[2025-02-26 14:55:23,943 INFO] + Processing action: Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig
[2025-02-26 14:55:25,526 INFO] ++ Embedding computed for: Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:55:28,055 INFO] ++ Similar techniques found (in 1 attemps):
['virtualization/sandbox evasion', 'virtualization/sandbox evasion: system checks', 'virtualization/sandbox evasion: user activity based checks', 'virtualization/sandbox evasion: time based evasion']
[2025-02-26 14:55:28,055 INFO] ++ Querying the QA model for action Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig with the following context:
virtualization/sandbox evasion,virtualization/sandbox evasion: system checks,virtualization/sandbox evasion: user activity based checks,virtualization/sandbox evasion: time based evasion
[2025-02-26 14:55:28,444 INFO] ++ Refining the action: Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig using 9 documents:
[Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='1ec3a9fd-bba9-492b-b030-299f429cdf2d', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.003  Virtualization/Sandbox \nEvasion: Time Based \nEvasion  Goofy Guineapig checks the time \nregister twice for a delay of more than \n100 milliseconds and will not continue \nexecution if more time has elapsed.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.001  Virtualization/Sandbox \nEvasion: System \nChecks  Goofy Guineapig checks the disk size, \nphysical memory size, and number of \nlogical processors, and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.')]
[2025-02-26 14:55:34,470 INFO] + Processing action: Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig
[2025-02-26 14:55:36,181 INFO] ++ Embedding computed for: Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:55:39,339 INFO] ++ Similar techniques found (in 1 attemps):
['hide artifacts: run virtual instance', 'virtualization/sandbox evasion', 'virtualization/sandbox evasion: system checks', 'virtualization/sandbox evasion: user activity based checks', 'virtualization/sandbox evasion: time based evasion']
[2025-02-26 14:55:39,339 INFO] ++ Querying the QA model for action Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig with the following context:
hide artifacts: run virtual instance,virtualization/sandbox evasion,virtualization/sandbox evasion: system checks,virtualization/sandbox evasion: user activity based checks,virtualization/sandbox evasion: time based evasion
[2025-02-26 14:55:39,863 INFO] ++ Refining the action: Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig using 9 documents:
[Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.001  Virtualization/Sandbox \nEvasion: System \nChecks  Goofy Guineapig checks the disk size, \nphysical memory size, and number of \nlogical processors, and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.003  Virtualization/Sandbox \nEvasion: Time Based \nEvasion  Goofy Guineapig checks the time \nregister twice for a delay of more than \n100 milliseconds and will not continue \nexecution if more time has elapsed.')]
[2025-02-26 14:55:46,203 INFO] + Processing action: Obfuscated Files or Information: Software Packing as used by Goofy Guineapig
[2025-02-26 14:55:47,828 INFO] ++ Embedding computed for: Obfuscated Files or Information: Software Packing as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:55:56,611 INFO] ++ Similar techniques found (in 3 attemps):
['obfuscated files or information: software packing']
[2025-02-26 14:55:56,611 INFO] ++ Querying the QA model for action Obfuscated Files or Information: Software Packing as used by Goofy Guineapig with the following context:
obfuscated files or information: software packing
[2025-02-26 14:55:57,085 INFO] ++ Refining the action: Obfuscated Files or Information: Software Packing as used by Goofy Guineapig using 9 documents:
[Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1027.002  Obfuscated Files or \nInformation: Software \nPacking  Goofy Guineapig is UPX packed and \npackaged in with a legitimate NSIS \ninstaller.\n\nT1140   Deobfuscate/Decode \nFiles or Information  Goofy Guineapig contains stack -based \nstrings which are obfuscated with single \nbyte XOR or subtraction throughout the \nbinary.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.')]
[2025-02-26 14:56:02,771 INFO] + Processing action: Deobfuscate/Decode Files or Information as used by Goofy Guineapig
[2025-02-26 14:56:04,693 INFO] ++ Embedding computed for: Deobfuscate/Decode Files or Information as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:56:07,481 INFO] ++ Similar techniques found (in 1 attemps):
['deobfuscate/decode files or information']
[2025-02-26 14:56:07,482 INFO] ++ Querying the QA model for action Deobfuscate/Decode Files or Information as used by Goofy Guineapig with the following context:
deobfuscate/decode files or information
[2025-02-26 14:56:07,876 INFO] ++ Refining the action: Deobfuscate/Decode Files or Information as used by Goofy Guineapig using 9 documents:
[Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1027.002  Obfuscated Files or \nInformation: Software \nPacking  Goofy Guineapig is UPX packed and \npackaged in with a legitimate NSIS \ninstaller.\n\nT1140   Deobfuscate/Decode \nFiles or Information  Goofy Guineapig contains stack -based \nstrings which are obfuscated with single \nbyte XOR or subtraction throughout the \nbinary.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.')]
[2025-02-26 14:56:14,286 INFO] + Processing action: Hide Artifacts: Hidden Window as used by Goofy Guineapig
[2025-02-26 14:56:16,094 INFO] ++ Embedding computed for: Hide Artifacts: Hidden Window as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:56:19,200 INFO] ++ Similar techniques found (in 1 attemps):
['hide artifacts: hidden window']
[2025-02-26 14:56:19,200 INFO] ++ Querying the QA model for action Hide Artifacts: Hidden Window as used by Goofy Guineapig with the following context:
hide artifacts: hidden window
[2025-02-26 14:56:19,634 INFO] ++ Refining the action: Hide Artifacts: Hidden Window as used by Goofy Guineapig using 9 documents:
[Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1564.003  Hide Artefacts: \nHidden Window  Goofy Guineapig contains the \nfunctionality to perform process \nhollowing on dllhost.exe , when this \nis performed the process is created \nhidden.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='This means even if the process name has been changed to evade \nthe first check, the window  text should still be caught by the malware, triggering process  exit.\n\nHowever, the secondary check is  likely to be  ineffective.\n\nFlawed logic means that f or the check to fail \nthere would effectively have to be only a single process Window  on the host that contained the \nrelevant strings.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.')]
[2025-02-26 14:56:24,805 INFO] + Processing action: Indicator Removal on Host: File Deletion as used by Goofy Guineapig
[2025-02-26 14:56:26,715 INFO] ++ Embedding computed for: Indicator Removal on Host: File Deletion as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:56:34,127 INFO] ++ Similar techniques found (in 2 attemps):
['indicator removal', 'indicator removal: file deletion', 'indicator removal: clear persistence', 'indicator removal: relocate malware', 'obfuscated files or information: indicator removal from tools']
[2025-02-26 14:56:34,127 INFO] ++ Querying the QA model for action Indicator Removal on Host: File Deletion as used by Goofy Guineapig with the following context:
indicator removal,indicator removal: file deletion,indicator removal: clear persistence,indicator removal: relocate malware,obfuscated files or information: indicator removal from tools
[2025-02-26 14:56:34,231 WARNING] ++ Technique not found: indicator removal,indicator removal: file deletion in ['indicator removal', 'indicator removal: file deletion', 'indicator removal: clear persistence', 'indicator removal: relocate malware', 'obfuscated files or information: indicator removal from tools']. Trying to refine the answer.
[2025-02-26 14:56:34,641 INFO] ++ Refining the action: Indicator Removal on Host: File Deletion as used by Goofy Guineapig using 9 documents:
[Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1070.004  Indicator Removal on \nHost: File Deletion  Goofy Guineapig initially runs in the \nlocation to which it is downloaded, the \nfiles are moved to a legitimate looking \ndirectory and deleted from the initial \ndownload location.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Many defence  evasion techniques are implemented, including \nchecking the properties of the infected machine, as well as the running processes  and system time \nchecks for any indication the process is running in an automated analysis environment.\n\nMore \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.')]
[2025-02-26 14:56:41,032 INFO] + Processing action: Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig
[2025-02-26 14:56:43,095 INFO] ++ Embedding computed for: Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:56:46,454 INFO] ++ Similar techniques found (in 1 attemps):
['hijack execution flow: dll search order hijacking', 'hijack execution flow: dll side-loading']
[2025-02-26 14:56:46,454 INFO] ++ Querying the QA model for action Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig with the following context:
hijack execution flow: dll search order hijacking,hijack execution flow: dll side-loading
[2025-02-26 14:56:47,060 INFO] ++ Refining the action: Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig using 8 documents:
[Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.002  Virtualization/Sandbox \nEvasion: User Activity \nBased Checks  Goofy Guineapig checks for processes \nrunning on a system which indicate that \nit is being reverse engineered or \ndebugged and will not continue \nexecution if any of the checks fail.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1497.001  Virtualization/Sandbox \nEvasion: System \nChecks  Goofy Guineapig checks the disk size, \nphysical memory size, and number of \nlogical processors, and will not continue \nexecution if any of the checks fail.')]
[2025-02-26 14:56:53,429 INFO] + Processing action: Process Injection: Process Hollowing as used by Goofy Guineapig
[2025-02-26 14:56:55,147 INFO] ++ Embedding computed for: Process Injection: Process Hollowing as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:56:58,505 INFO] ++ Similar techniques found (in 1 attemps):
['process injection: process hollowing']
[2025-02-26 14:56:58,505 INFO] ++ Querying the QA model for action Process Injection: Process Hollowing as used by Goofy Guineapig with the following context:
process injection: process hollowing
[2025-02-26 14:56:58,999 INFO] ++ Refining the action: Process Injection: Process Hollowing as used by Goofy Guineapig using 9 documents:
[Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1055.012  Process Inje ction: \nProcess Hollowing  Goofy Guineapig can perform process \nhollowing on the dllhost.exe  binary, \ninjecting content downloaded by the C2.\n\nT1218.011  System Binary Proxy \nExecution: Rundll32  The Goofy Guineapig persistence \nmechanism utilises rundll32.exe  and \nurl.dll  to execute the legitimate \nbinary whi ch will load the malicious DLL .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='This same behaviour was observed during analysis of the Jolly Jellyfish malware.\n\nIn addition to this, Goofy Guineapig checks the name of each r unning process on the machine, and if \nany process containing the string ‘dbg’, ‘debug ’, or ‘ida’ is determined to be running , the malware \nwill not continue execution.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.')]
[2025-02-26 14:57:05,427 INFO] + Processing action: Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig
[2025-02-26 14:57:07,154 INFO] ++ Embedding computed for: Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:57:09,957 INFO] ++ Similar techniques found (in 1 attemps):
['hijack execution flow: dll search order hijacking', 'process injection: dynamic-link library injection', 'system binary proxy execution', 'system binary proxy execution: control panel', 'system binary proxy execution: installutil', 'system binary proxy execution: regsvr32', 'system binary proxy execution: rundll32', 'system binary proxy execution: verclsid']
[2025-02-26 14:57:09,958 INFO] ++ Querying the QA model for action Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig with the following context:
hijack execution flow: dll search order hijacking,process injection: dynamic-link library injection,system binary proxy execution,system binary proxy execution: control panel,system binary proxy execution: installutil,system binary proxy execution: regsvr32,system binary proxy execution: rundll32,system binary proxy execution: verclsid
[2025-02-26 14:57:10,082 WARNING] ++ Technique not found: rundll32 in ['hijack execution flow: dll search order hijacking', 'process injection: dynamic-link library injection', 'system binary proxy execution', 'system binary proxy execution: control panel', 'system binary proxy execution: installutil', 'system binary proxy execution: regsvr32', 'system binary proxy execution: rundll32', 'system binary proxy execution: verclsid']. Trying to refine the answer.
[2025-02-26 14:57:10,082 ERROR] ++ Technique not found: rundll32 in ['hijack execution flow: dll search order hijacking', 'process injection: dynamic-link library injection', 'system binary proxy execution', 'system binary proxy execution: control panel', 'system binary proxy execution: installutil', 'system binary proxy execution: regsvr32', 'system binary proxy execution: rundll32', 'system binary proxy execution: verclsid']
[2025-02-26 14:57:10,408 INFO] ++ Refining the action: Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig using 9 documents:
[Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1055.012  Process Inje ction: \nProcess Hollowing  Goofy Guineapig can perform process \nhollowing on the dllhost.exe  binary, \ninjecting content downloaded by the C2.\n\nT1218.011  System Binary Proxy \nExecution: Rundll32  The Goofy Guineapig persistence \nmechanism utilises rundll32.exe  and \nurl.dll  to execute the legitimate \nbinary whi ch will load the malicious DLL .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Many defence  evasion techniques are implemented, including \nchecking the properties of the infected machine, as well as the running processes  and system time \nchecks for any indication the process is running in an automated analysis environment.\n\nMore \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.')]
[2025-02-26 14:57:15,264 INFO] + Computing pre-conditions for the next attack step using the following actions:
Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig - According to the provided context, the "Masquerading: Match Legitimate Name or Location" technique used by Goofy Guineapig malware is performed in the following way:

Goofy Guineapig masquerades as a FireFox installer and a Google updater.

This means that the malware disguises itself as legitimate software (Firefox installer and Google updater) to evade detection. The exact method of how it achieves this is not specified, but it implies that Goofy Guineapig uses techniques such as:

* Creating fake or modified files with names similar to those of legitimate Firefox and Google Updater installers
* Modifying its own file name and location to match the expected path of a Firefox installer or Google updater
* Using social engineering tactics to trick users into running the malware, thinking it is a legitimate software update

By masquerading as legitimate software, Goofy Guineapig aims to avoid detection by security software and blend in with normal system activity.##########Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig - To answer your question, I'll break down the steps involved in the Time-Based Evasion technique used by Goofy Guineapig:

1. **Reading the CPU Timestamp Counter**: The malware reads the CPU timestamp counter to get the current system time.

2. **Saving the Initial Timestamp**: It saves this initial timestamp value for later comparison.

3. **Immediate Second Read of Timestamp Counter**: Immediately after, it reads the timestamp counter again to get the current system time once more.

4. **Saving the Second Timestamp**: This second timestamp is also saved for comparison with the first one.

5. **Comparison and Delay Check**: The malware then compares these two timestamps to determine if a delay of more than 100 milliseconds has occurred since the initial read. If this condition is met, it will not continue execution.

This technique is used as an evasion method to prevent detection by security software that might be too slow or take longer than 100 milliseconds to respond. By checking for such delays, Goofy Guineapig can determine if it's being monitored and adjust its behavior accordingly.

The specific code snippets you provided seem to relate to the process hollowing functionality of Goofy Guineapig rather than the time-based evasion technique itself. They appear to be related##########Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig - The action "Virtualization/Sandbox Evasion: System Checks" as used by Goofy Guineapig involves checking the following system properties:

1. Disk size
2. Physical memory size
3. Number of logical processors

To perform these checks, Goofy Guineapig likely uses API calls to retrieve this information from the operating system. Here's a possible breakdown of how it might be implemented:

1. **Disk size**: The `GetDiskFreeSpaceW` function (Windows API) can be used to get the disk free space and total size.
2. **Physical memory size**: The `GlobalMemoryStatusEx` function (Windows API) can be used to get the physical memory information, including the available bytes and total bytes.
3. **Number of logical processors**: The `GetLogicalProcessorInformation` function (Windows API) can be used to get the number of logical processors.

These functions are likely called in a sequence, and if any of the checks fail (e.g., disk size is too small, physical memory is too low, or number of logical processors is not what's expected), Goofy Guineapig will not continue execution.##########Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig - To answer your question, I'll break down the steps involved in the "Virtualization/Sandbox Evasion: User Activity Based Checks" technique used by Goofy Guineapig.

**Step 1: Check for Suspicious Processes**

Goofy Guineapig checks for processes running on the system that indicate it is being reverse engineered or debugged. This involves scanning the process list to identify suspicious processes.

**Step 2: Identify Specific Process Names**

The malware specifically looks for certain process names, such as:

* `procmon.exe` (Process Monitor)
* `ollydbg.exe` (OllyDbg debugger)
* `idaq.exe` (IDA Pro disassembler)
* `windbg.exe` (Windows Debugger)

These processes are commonly used by reverse engineers and debuggers.

**Step 3: Check for Suspicious DLLs**

In addition to checking process names, Goofy Guineapig also checks for suspicious DLLs loaded into these processes. This includes:

* `dbghelp.dll` (Debug Help library)
* `ntsd.dll` (NT Symbolic Debugger)

These DLLs are often used by debuggers and reverse engineering tools.

**Step 4: Check for Suspicious Handles**

The malware##########Obfuscated Files or Information: Software Packing as used by Goofy Guineapig - The action "Obfuscated Files or Information: Software Packing" as used by Goofy Guineapig involves the following steps:

1. **UPX Packing**: The malware, Goofy Guineapig, uses UPX (Ultimate Packer for eXecutables) to compress and pack its executable file. This makes it difficult to analyze or reverse-engineer the malware.
2. **NSIS Installer Packaging**: The packed executable is then packaged within a legitimate NSIS (Nullsoft Scriptable Install System) installer. This allows the malware to be delivered as a seemingly harmless installation package, which can be executed on the victim's machine.

When the NSIS installer is run, it extracts and executes the packed Goofy Guineapig executable, which then unpacks itself using UPX. The unpacked malware can then proceed with its malicious activities.

In summary, the "Obfuscated Files or Information: Software Packing" technique used by Goofy Guineapig involves packing the malware executable with UPX and packaging it within a legitimate NSIS installer to evade detection and analysis.##########Deobfuscate/Decode Files or Information as used by Goofy Guineapig - The action "Deobfuscate/Decode Files or Information" as used by Goofy Guineapig involves the following steps:

1. **Stack-based strings**: Goofy Guineapig stores its strings in a stack, which means that they are stored in memory rather than being hardcoded into the binary.
2. **Obfuscation with single byte XOR or subtraction**: The strings on the stack are obfuscated using either single-byte XOR (exclusive OR) operations or subtraction operations. This makes it difficult for analysts to identify the original string values.

To deobfuscate these strings, an analyst would need to:

1. Identify the locations of the stack-based strings in memory.
2. Extract the obfuscated strings from the stack.
3. Apply the inverse operation (i.e., XOR with the same key or add back the subtracted value) to each byte of the string.

For example, if a string is obfuscated using single-byte XOR with a key of 0x12, an analyst would need to XOR each byte of the string with 0x12 to recover the original string.

In the provided code snippet, the `81 FE` bytes are likely used for stack-based string operations. The specific operation (XOR or subtraction) and##########Hide Artifacts: Hidden Window as used by Goofy Guineapig - Based on the provided context, I will attempt to answer your question.

The action "Hide Artifacts: Hidden Window" as used by Goofy Guineapig involves creating a new process (dllhost.exe) and performing process hollowing on it. This means that the malware creates a legitimate-looking dllhost.exe process, but instead of running the actual dllhost.exe code, it runs the malicious payload.

Here's how this is performed:

1. The Goofy Guineapig loader installs a legitimate executable alongside a malicious DLL.
2. The legitimate executable loads the malicious DLL using DLL side-loading.
3. The malware then performs process hollowing on dllhost.exe by creating a new dllhost.exe process and injecting the malicious payload into it.
4. The newly created dllhost.exe process is created hidden, meaning that it does not appear in process listings or other monitoring tools.

This technique allows the malware to evade detection by making it difficult for security software to identify the malicious process.##########Indicator Removal on Host: File Deletion as used by Goofy Guineapig - To answer your question, I will break down the process of how Indicator Removal on Host: File Deletion is used by Goofy Guineapig.

**Indicator Removal on Host: File Deletion**

This technique is used to evade detection by hiding the malware's presence from the system. Here's a step-by-step explanation of how it works:

1. **Initial Execution**: The Goofy Guineapig malware initially runs in the location where it was downloaded.
2. **File Movement**: The files associated with the malware are moved to a legitimate-looking directory on the infected machine. This is done to make it difficult for security software to detect the malware's presence.
3. **File Deletion**: The original download location of the malware is deleted, effectively removing any evidence of its initial execution.

By performing these steps, Goofy Guineapig makes it challenging for security software to detect and analyze the malware, thereby evading detection.

**Code Snippet**

The code snippet provided appears to be a disassembly of the malware's binary. The relevant section related to Indicator Removal on Host: File Deletion is not explicitly mentioned in the snippet. However, based on the context, it can be inferred that the code is responsible for moving and deleting files##########Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig - The action "Hijack Execution Flow: DLL Side-Loading" as used by Goofy Guineapig is performed in the following steps:

1. **Installation of Legitimate Executable**: The Goofy Guineapig loader installs a legitimate executable on the victim's system.
2. **Installation of Malicious DLL**: Alongside the legitimate executable, the Goofy Guineapig loader also installs a malicious DLL (Dynamic Link Library) file.
3. **Loading of Legitimate Executable**: The legitimate executable is executed by the system, which loads it into memory.
4. **Loading of Malicious DLL**: When the legitimate executable is loaded, it loads the malicious DLL into its process space using the Windows API function `LoadLibrary`.
5. **Execution of Malicious Code**: Once the malicious DLL is loaded, it can execute its own code within the context of the legitimate executable's process.

This technique allows the malware to evade detection by security software that may be monitoring the system for suspicious activity related to the legitimate executable. The malicious DLL can then perform various malicious activities, such as data exfiltration, keylogging, or other types of attacks.

The Goofy Guineapig loader uses this technique to hijack the execution##########Process Injection: Process Hollowing as used by Goofy Guineapig - To answer your question, I will break down the steps involved in the "Process Injection: Process Hollowing" technique used by Goofy Guineapig:

1. **Loading of Legitimate Executable**: The Goofy Guineapig loader installs a legitimate executable alongside a malicious DLL.
2. **Initial Loading Process**: The initial loading process occurs in multiple stages and includes several defense evasion techniques.
3. **Process Hollowing**: Goofy Guineapig can perform process hollowing on the dllhost.exe binary, which is a legitimate Windows process.
4. **Injection of Content**: The malicious DLL is injected into the dllhost.exe process, and content downloaded by the C2 (Command and Control server) is injected into the process.

The specific steps involved in process hollowing are not explicitly described in the provided text, but based on general knowledge of process hollowing techniques, here's a possible explanation:

* The Goofy Guineapig loader creates an empty executable file with the same name as dllhost.exe.
* The malicious DLL is injected into the newly created executable file using Windows API functions such as `CreateProcess` or `LoadLibrary`.
* The legitimate dllhost.exe process is then terminated, and the new, hollowed##########Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig - The action "Signed Binary Proxy Execution: Rundll32" as used by Goofy Guineapig is performed through the following steps:

1. The malware uses the `rundll32.exe` executable, a legitimate Windows binary, to execute the malicious DLL.
2. The `url.dll` library is loaded into memory and used to load the malicious DLL.
3. The `rundll32.exe` process loads the malicious DLL using the `LoadLibrary` function, which is a part of the `url.dll` library.
4. Once the malicious DLL is loaded, it can perform various actions, such as collecting information about the infected machine or running additional plugins.

In summary, Goofy Guineapig uses the `rundll32.exe` executable and the `url.dll` library to execute the malicious DLL in a way that appears legitimate, making it difficult for security software to detect.
[2025-02-26 14:57:16,431 INFO] Processing step relative to tactic: discovery
[2025-02-26 14:57:16,431 INFO] + Processing action: System Information Discovery as used by Goofy Guineapig
[2025-02-26 14:57:18,290 INFO] ++ Embedding computed for: System Information Discovery as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:57:19,610 INFO] ++ Similar techniques found (in 2 attemps):
['system information discovery', 'system location discovery: system language discovery']
[2025-02-26 14:57:19,610 INFO] ++ Querying the QA model for action System Information Discovery as used by Goofy Guineapig with the following context:
system information discovery,system location discovery: system language discovery
[2025-02-26 14:57:19,706 WARNING] ++ Technique not found: system information discovery,system location discovery: system language discovery in ['system information discovery', 'system location discovery: system language discovery']. Trying to refine the answer.
[2025-02-26 14:57:20,048 INFO] ++ Refining the action: System Information Discovery as used by Goofy Guineapig using 9 documents:
[Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Discovery  T1082  System Information \nDiscovery  Goofy Guineapig sends information \nabout the infected machine in each C2 \npacket, as an obfuscated ‘Authorization’ \nstring  in the HTTP header .\n\nCommand and \nControl  T1071.001  Application Layer \nProtocol: Web \nProtocols  Goofy Guineapig uses HTTPS for its C2 \ncommun ications .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Many defence  evasion techniques are implemented, including \nchecking the properties of the infected machine, as well as the running processes  and system time \nchecks for any indication the process is running in an automated analysis environment.\n\nMore \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.')]
[2025-02-26 14:57:26,466 INFO] + Computing pre-conditions for the next attack step using the following actions:
System Information Discovery as used by Goofy Guineapig - Based on the provided context, I will attempt to answer your question.

**How the action: System Information Discovery as used by Goofy Guineapig is performed**

According to the description, Goofy Guineapig sends information about the infected machine in each C2 (Command and Control) packet, as an obfuscated "Authorization" string in the HTTP header. This is done using the following steps:

1. The malware collects system information from the infected machine.
2. The collected information is then obfuscated into an "Authorization" string.
3. The obfuscated string is sent in the HTTP header of each C2 packet.

The specific details on how this is performed are not provided, but it can be inferred that the malware uses a combination of system calls and network communication to collect and send the system information.

**Additional context**

To provide more insight into the System Information Discovery technique used by Goofy Guineapig, I will highlight some relevant points from the description:

* The malware sends information about the infected machine in each C2 packet.
* The information is sent as an obfuscated "Authorization" string in the HTTP header.
* The malware uses HTTPS for its C2 communications.

This suggests that Goofy Guineapig
[2025-02-26 14:57:27,110 INFO] Processing step relative to tactic: command-and-control
[2025-02-26 14:57:27,110 INFO] + Processing action: Application Layer Protocol: Web Protocols as used by Goofy Guineapig
[2025-02-26 14:57:29,959 INFO] ++ Embedding computed for: Application Layer Protocol: Web Protocols as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:57:31,143 INFO] ++ Similar techniques found (in 2 attemps):
['application layer protocol: web protocols']
[2025-02-26 14:57:31,143 INFO] ++ Querying the QA model for action Application Layer Protocol: Web Protocols as used by Goofy Guineapig with the following context:
application layer protocol: web protocols
[2025-02-26 14:57:31,591 INFO] ++ Refining the action: Application Layer Protocol: Web Protocols as used by Goofy Guineapig using 9 documents:
[Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='0d018eed-16bb-4308-8a2e-2ab69d8e6916', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig-indicators.csv'}, page_content="page_content='sha256 19cef7f32e42cc674f7c76be3a5c691c543f4e018486c29153e7dde1a48af34c Goofy Guineapig sample UPX packed setup-stub.exe'"), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Discovery  T1082  System Information \nDiscovery  Goofy Guineapig sends information \nabout the infected machine in each C2 \npacket, as an obfuscated ‘Authorization’ \nstring  in the HTTP header .\n\nCommand and \nControl  T1071.001  Application Layer \nProtocol: Web \nProtocols  Goofy Guineapig uses HTTPS for its C2 \ncommun ications .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Many defence  evasion techniques are implemented, including \nchecking the properties of the infected machine, as well as the running processes  and system time \nchecks for any indication the process is running in an automated analysis environment.\n\nMore \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.')]
[2025-02-26 14:57:37,648 INFO] + Processing action: Fallback Channels as used by Goofy Guineapig
[2025-02-26 14:57:39,247 INFO] ++ Embedding computed for: Fallback Channels as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:57:39,822 INFO] ++ Similar techniques found (in 1 attemps):
['fallback channels']
[2025-02-26 14:57:39,822 INFO] ++ Querying the QA model for action Fallback Channels as used by Goofy Guineapig with the following context:
fallback channels
[2025-02-26 14:57:40,169 INFO] ++ Refining the action: Fallback Channels as used by Goofy Guineapig using 9 documents:
[Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1008  Fallback Channels  Goofy Guineapig contains the \nfunctionality to communicate using UDP \nand the KCP protocol, or direct socket \ncommunications, dependant on an \nembedded configuration string .\n\nT1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Many defence  evasion techniques are implemented, including \nchecking the properties of the infected machine, as well as the running processes  and system time \nchecks for any indication the process is running in an automated analysis environment.\n\nMore \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.')]
[2025-02-26 14:57:46,579 INFO] + Processing action: Non-Standard Port as used by Goofy Guineapig
[2025-02-26 14:57:48,524 INFO] ++ Embedding computed for: Non-Standard Port as used by Goofy Guineapig. The vector has shape: (384,)
[2025-02-26 14:57:49,940 INFO] ++ Similar techniques found (in 2 attemps):
['non-standard port']
[2025-02-26 14:57:49,940 INFO] ++ Querying the QA model for action Non-Standard Port as used by Goofy Guineapig with the following context:
non-standard port
[2025-02-26 14:57:50,419 INFO] ++ Refining the action: Non-Standard Port as used by Goofy Guineapig using 9 documents:
[Document(id='891c34b6-a467-4846-9a6e-1c8cd611a397', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The initial loading process occurs in multiple stages and includes several defence  \nevasion techniques .\n\nIn this instance, command and control communication i s configured to utilise \nHTTPS, however, functionality to support UDP  and direct socket communications  is also present.'), Document(id='47c8a347-db52-409b-91b6-cd9a83a79db2', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='The \ntasking has the option to perform process hollowing on the dllhost.exe  process, allowing a \npayload  executable to appear to run under a legitimate process path and name  in process listings .\n\nTime based evasion  \nOn start up t he Goofy Guineapig malware reads the CPU timestamp counter , saves the result, then \nreads the timestamp counter again immediately and saves the result.'), Document(id='eeee05b1-5744-48cd-9542-d343f85164be', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Tactic  ID Technique  Procedure  \nT1574.002  Hijack Execution \nFlow: DLL Side -\nLoading  A legitima te executable is installed by \nthe Goofy Guineapig loader, alongside a \nmalicious DLL which will be loaded by \nthe legitimate executable.'), Document(id='1f630bfb-4390-4855-8169-43b1f6a24993', metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n?\n\n81 FE F3 2E 00 00 74 ?\n\n?\n\n81 FE 0D 2F 00 00 74 ?\n\n?\n\n81 FE 8A 2F 00 00 74 ?\n\n?\n\n81 FE 89 2F 00 00 74 ?\n\n?\n\n81 FE 06 2F 00 00 74 ?\n\n?\n\n81 FE 05 2F 00 00 0F}  \n \n    condition:  \n        uint16(0) == 0x5A4D and  \n        uint32(uint32(0x3c)) == 0x00004550 and  \n        all of them  \n} \n \n \nDescription  Detects Goofy Guineapig process hollowing process start -up.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Backdoor  \nThe backdoor creates a mutex to ensure that only one instance is running at any given time.\n\nThe \nmutex name is generated by taking an MD5 hash of the computer name, then taking a nother MD5  \nhash of the outputted hash  three times.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='These both also rely on request 0x15  having completed first.\n\nSession enum eration  \nThe request ID 0x28  enumerates the logon  sessions on the infected machine searching for any \nwhere the session ID is not 0, and the session state is either active or disconnected.\n\nWhere this is \nfound, it will query for the username and client protocol type (RDP or LOCAL) associated with that \nsession.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='T1008  Fallback Channels  Goofy Guineapig contains the \nfunctionality to communicate using UDP \nand the KCP protocol, or direct socket \ncommunications, dependant on an \nembedded configuration string .\n\nT1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443 .'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='More \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.\n\nOnce loaded Goofy Guineapig can be tasked to  collect information about the infected machine or  run \nadditional plugins either as part of the current process, or by process hollowing dllhost.exe  to \nexecute the plugin.'), Document(metadata={'source': './documents\\other\\NCSC-MAR-Goofy-Guineapig.pdf'}, page_content='Many defence  evasion techniques are implemented, including \nchecking the properties of the infected machine, as well as the running processes  and system time \nchecks for any indication the process is running in an automated analysis environment.\n\nMore \ninformation on these checks can be found in the ‘ Functionality ( Defence  Evasion) ’ section o f this \nreport.')]
[2025-02-26 14:57:56,866 INFO] + Computing pre-conditions for the next attack step using the following actions:
Application Layer Protocol: Web Protocols as used by Goofy Guineapig - According to the provided context, the action "Application Layer Protocol: Web Protocols" as used by Goofy Guineapig is performed through the use of HTTPS (Hypertext Transfer Protocol Secure) for its Command and Control (C2) communications.

In more detail, this means that when Goofy Guineapig communicates with its C2 server, it uses a secure web protocol called HTTPS to encrypt and protect the communication. This is done to prevent interception or eavesdropping of sensitive information exchanged between the malware and the C2 server.

To perform this action, Goofy Guineapig likely employs the following steps:

1. Establishes a connection with the C2 server using a secure web protocol (HTTPS).
2. Encrypts the communication using HTTPS to prevent interception or eavesdropping.
3. Exchanges sensitive information, such as malware updates, commands, and data, between Goofy Guineapig and the C2 server.

By using HTTPS for its C2 communications, Goofy Guineapig aims to maintain confidentiality, integrity, and authenticity of the communication, making it more difficult for security researchers or threat actors to intercept or manipulate the exchanged information.##########Fallback Channels as used by Goofy Guineapig - To answer how the action "Fallback Channels" as used by Goofy Guineapig is performed, we need to analyze the provided information.

According to the text, Fallback Channels refers to the functionality of Goofy Guineapig to communicate using UDP and the KCP protocol, or direct socket communications. This is dependent on an embedded configuration string.

Here's a step-by-step explanation of how this action is performed:

1. **Embedded Configuration String**: The malware has an embedded configuration string that determines which communication method to use.
2. **UDP and KCP Protocol Selection**: Based on the configuration string, Goofy Guineapig selects either UDP or the KCP protocol for communication.
3. **Direct Socket Communications**: Alternatively, it can also use direct socket communications, depending on the configuration.

To perform this action, the malware would:

* Read the embedded configuration string
* Parse the configuration string to determine which communication method to use (UDP, KCP, or direct socket)
* Select the chosen communication method and establish a connection using that protocol

This is a high-level overview of how Fallback Channels are used by Goofy Guineapig. The specific implementation details may vary depending on the malware's code and configuration.

In##########Non-Standard Port as used by Goofy Guineapig - To answer your question, I will break down the steps to determine how the action "Non-Standard Port" is performed by Goofy Guineapig.

**Step 1: Identify the relevant code snippet**

The relevant code snippet for this analysis is:

`T1571 Non-Standard Port  Goofy Guineapig communicates over 
the non -standard HTTPS port 4443.`

**Step 2: Understand the context of the code snippet**

This code snippet indicates that Goofy Guineapig uses a non-standard HTTPS port, specifically port 4443.

**Step 3: Determine how the action is performed**

Based on the provided information, it appears that the "Non-Standard Port" action is performed by Goofy Guineapig using the following steps:

1. The malware checks if the embedded configuration string allows for communication over UDP and KCP protocol or direct socket communications.
2. If the configuration string permits non-standard port usage, Goofy Guineapig communicates over the non-standard HTTPS port 4443.

**Step-by-Step Explanation**

Here's a step-by-step explanation of how the "Non-Standard Port" action is performed:

1. The malware checks the embedded configuration string for
[2025-02-26 14:57:57,540 INFO] Saving output
[2025-02-26 14:57:57,541 INFO] Application finished

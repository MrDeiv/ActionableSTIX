[{"id": "3cf3bca6-db5b-460f-a3d9-feef618d2127", "pre-conditions": {"connectivity": {"value": true, "summary": "Based on the provided documents, the malware \"Goofy Guineapig\" has the capability to communicate with external servers. Here are the relevant findings:\n\n1. **HTTPS Communication**: The malware uses HTTPS for command and control (C2) communication, configured to utilize the non-standard port 4443 (Document id: '891c34b6-a467-4846-9a6e-1c8cd611a397').\n2. **UDP and KCP Protocol**: The malware contains functionality to communicate using UDP and the KCP protocol, or direct socket communications, depending on an embedded configuration string (Document id: '47c8a347-db52-409b-91b6-cd9a83a79db2').\n3. **HTTP Authorization String Header**: The malware uses a unique HTTP authorization string header, which is generated per infected machine, for C2 communication (Document id: '1b90ae03-ef62-4894-8730-4903f18528bf').\n\nThese findings indicate that the malware has the capability to communicate with external servers using various protocols, including HTTPS, UDP, and KCP."}, "os": {"value": "**Windows**", "summary": "The operative system necessary to run the malware is **Windows**.\n\nThis inference is based on several clues in the text:\n\n1. The documents mention accessing WMI (Windows Management Instrumentation) information using COM, which is a Windows-specific technology.\n2. The documents refer to collecting information about the victim machine's operating system caption and antivirus product display name, which are specific to Windows.\n3. The documents mention sideloading a malicious DLL into GoogleUpdate.exe, which is a legitimate executable on Windows systems.\n4. The documents describe process hollowing on dllhost.exe, which is a Windows-specific technique.\n\nTherefore, it can be inferred that the malware is designed to run on a Windows operating system."}, "vulnerability": "The Goofy Guineapig malware exploits the following vulnerabilities:\n\n1. **Process hollowing**: The malware has the option to perform process hollowing on the dllhost.exe process, allowing a payload executable to appear to run under a legitimate process path and name in process listings.\n2. **Time-based evasion**: The malware reads the CPU timestamp counter, saves the result, then reads the timestamp counter again immediately and saves the result. If there is a significant difference between the two values (more than 100ms), the malware will not continue execution.\n\nAdditionally, the malware disguises itself as legitimate software by:\n\n1. **Masquerading as legitimate processes**: The malware trojanised a legitimate FireFox NSIS installation package and is dropped alongside legitimate FireFox files.\n2. **Sideloaded by a legitimate executable**: The malicious DLL is sideloaded by the legitimate, signed, executable GoogleUpdate.exe (also dropped as part of the NSIS installer).\n\nThe malware also implements various defence evasion techniques, including:\n\n1. **Anti-sandbox/anti-VM techniques**: The malware checks that the physical memory size of the machine exceeds 2GB and that the disk is more than 1GB in size.\n2. **Sleep commands**: Multiple short (less than a second) sleep commands are interspersed with the rest of the defence evasion techniques implemented.\n\nNote: There is no indication that the malware exploits any specific vulnerability, but rather uses various techniques to evade detection and disguise itself as legitimate software."}, "actions": [{"id": "92032321-1e1e-4342-ad2c-03cf3feaf5f6", "name": "Create or Modify System Process: Windows Service as used by Goofy Guineapig", "description": "To answer your question, I will break down the steps involved in the \"Create or Modify System Process: Windows Service\" technique used by Goofy Guineapig to maintain persistence.\n\n**Step 1: Create a new Windows service**\n\nGoofy Guineapig creates a new Windows service using the `sc` command. This is done by executing the following command:\n```\nsc create <service_name> binPath= \"<path_to_executable>\"\n```\nWhere `<service_name>` is the name of the service, and `<path_to_executable>` is the path to the executable file that will be run as a service.\n\n**Step 2: Configure the Windows service**\n\nThe Goofy Guineapig malware then configures the newly created Windows service using the `sc` command. This involves setting the startup type of the service to \"Automatic\" and configuring any other necessary settings.\n```\nsc config <service_name> start= auto\n```\n**Step 3: Start the Windows service**\n\nFinally, Goofy Guineapig starts the newly created Windows service using the `net` command.\n```\nnet start <service_name>\n```\nThis allows the malware to maintain persistence on the system by running as a legitimate-looking", "MITRE technique": {"id": "T1543.003", "name": "Create or modify system process: windows service", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry."}, "indicators": []}]}, {"id": "cf20a70a-72e7-43e4-a047-c4db04db6464", "pre-conditions": ["1. Windows Service entry in the Services.msc console", "2. Service name in the Services registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services)", "3. Service binary path in the Services registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<service_name>)", "4. Service configuration in the Services registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<service_name>)", "5. Service startup type in the Services registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<service_name>)", "6. Service status in the Services registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<service_name>)", "7. Service name in the SCManager database (C:\\Windows\\System32\\config\\SysEvent.Evt)", "8. Service binary path in the SCManager database (C:\\Windows\\System32\\config\\SysEvent.Evt)", "9. Service configuration in the SCManager database (C:\\Windows\\System32\\config\\SysEvent.Evt)", "10. Service startup type in the SCManager database (C:\\Windows\\System32\\config\\SysEvent.Evt)", "11. Service status in the SCManager database (C:\\Windows\\System32\\config\\SysEvent.Evt)", "12. Command history in the Command Prompt history file (C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\OpenSaveMRU)", "13. Command history in the Command Prompt history file (C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\OpenSaveMRU.mru)", "14. Windows Event Log entries (Application, Security, System logs)"], "actions": [{"id": "27a8711b-a837-4d58-8595-01c2f7f2e170", "name": "Masquerading: Match Legitimate Name or Location as used by Goofy Guineapig", "description": "According to the provided context, the \"Masquerading: Match Legitimate Name or Location\" technique used by Goofy Guineapig malware is performed in the following way:\n\nGoofy Guineapig masquerades as a FireFox installer and a Google updater.\n\nThis means that the malware disguises itself as legitimate software (Firefox installer and Google updater) to evade detection. The exact method of how it achieves this is not specified, but it implies that Goofy Guineapig uses techniques such as:\n\n* Creating fake or modified files with names similar to those of legitimate Firefox and Google Updater installers\n* Modifying its own file name and location to match the expected path of a Firefox installer or Google updater\n* Using social engineering tactics to trick users into running the malware, thinking it is a legitimate software update\n\nBy masquerading as legitimate software, Goofy Guineapig aims to avoid detection by security software and blend in with normal system activity.", "MITRE technique": {"id": "T1036", "name": "Masquerading", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names."}, "indicators": []}, {"id": "24de9a6d-6fd7-477b-b658-58454f785f3d", "name": "Virtualization/Sandbox Evasion: Time Based Evasion as used by Goofy Guineapig", "description": "To answer your question, I'll break down the steps involved in the Time-Based Evasion technique used by Goofy Guineapig:\n\n1. **Reading the CPU Timestamp Counter**: The malware reads the CPU timestamp counter to get the current system time.\n\n2. **Saving the Initial Timestamp**: It saves this initial timestamp value for later comparison.\n\n3. **Immediate Second Read of Timestamp Counter**: Immediately after, it reads the timestamp counter again to get the current system time once more.\n\n4. **Saving the Second Timestamp**: This second timestamp is also saved for comparison with the first one.\n\n5. **Comparison and Delay Check**: The malware then compares these two timestamps to determine if a delay of more than 100 milliseconds has occurred since the initial read. If this condition is met, it will not continue execution.\n\nThis technique is used as an evasion method to prevent detection by security software that might be too slow or take longer than 100 milliseconds to respond. By checking for such delays, Goofy Guineapig can determine if it's being monitored and adjust its behavior accordingly.\n\nThe specific code snippets you provided seem to relate to the process hollowing functionality of Goofy Guineapig rather than the time-based evasion technique itself. They appear to be related", "MITRE technique": {"id": "T1497.003", "name": "Virtualization/sandbox evasion: time based evasion", "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time."}, "indicators": []}, {"id": "384313ef-71d8-4060-8db4-f4de8ae16329", "name": "Virtualization/Sandbox Evasion: System Checks as used by Goofy Guineapig", "description": "The action \"Virtualization/Sandbox Evasion: System Checks\" as used by Goofy Guineapig involves checking the following system properties:\n\n1. Disk size\n2. Physical memory size\n3. Number of logical processors\n\nTo perform these checks, Goofy Guineapig likely uses API calls to retrieve this information from the operating system. Here's a possible breakdown of how it might be implemented:\n\n1. **Disk size**: The `GetDiskFreeSpaceW` function (Windows API) can be used to get the disk free space and total size.\n2. **Physical memory size**: The `GlobalMemoryStatusEx` function (Windows API) can be used to get the physical memory information, including the available bytes and total bytes.\n3. **Number of logical processors**: The `GetLogicalProcessorInformation` function (Windows API) can be used to get the number of logical processors.\n\nThese functions are likely called in a sequence, and if any of the checks fail (e.g., disk size is too small, physical memory is too low, or number of logical processors is not what's expected), Goofy Guineapig will not continue execution.", "MITRE technique": {"id": "T1497", "name": "Virtualization/sandbox evasion", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors."}, "indicators": []}, {"id": "4d9e7611-d5f7-4f9a-b15a-f87320420b5c", "name": "Virtualization/Sandbox Evasion: User Activity Based Checks as used by Goofy Guineapig", "description": "To answer your question, I'll break down the steps involved in the \"Virtualization/Sandbox Evasion: User Activity Based Checks\" technique used by Goofy Guineapig.\n\n**Step 1: Check for Suspicious Processes**\n\nGoofy Guineapig checks for processes running on the system that indicate it is being reverse engineered or debugged. This involves scanning the process list to identify suspicious processes.\n\n**Step 2: Identify Specific Process Names**\n\nThe malware specifically looks for certain process names, such as:\n\n* `procmon.exe` (Process Monitor)\n* `ollydbg.exe` (OllyDbg debugger)\n* `idaq.exe` (IDA Pro disassembler)\n* `windbg.exe` (Windows Debugger)\n\nThese processes are commonly used by reverse engineers and debuggers.\n\n**Step 3: Check for Suspicious DLLs**\n\nIn addition to checking process names, Goofy Guineapig also checks for suspicious DLLs loaded into these processes. This includes:\n\n* `dbghelp.dll` (Debug Help library)\n* `ntsd.dll` (NT Symbolic Debugger)\n\nThese DLLs are often used by debuggers and reverse engineering tools.\n\n**Step 4: Check for Suspicious Handles**\n\nThe malware", "MITRE technique": {"id": "T1564", "name": "Hide artifacts", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection."}, "indicators": []}, {"id": "ac20abd0-21cb-47a1-bbbd-b445001824e8", "name": "Obfuscated Files or Information: Software Packing as used by Goofy Guineapig", "description": "The action \"Obfuscated Files or Information: Software Packing\" as used by Goofy Guineapig involves the following steps:\n\n1. **UPX Packing**: The malware, Goofy Guineapig, uses UPX (Ultimate Packer for eXecutables) to compress and pack its executable file. This makes it difficult to analyze or reverse-engineer the malware.\n2. **NSIS Installer Packaging**: The packed executable is then packaged within a legitimate NSIS (Nullsoft Scriptable Install System) installer. This allows the malware to be delivered as a seemingly harmless installation package, which can be executed on the victim's machine.\n\nWhen the NSIS installer is run, it extracts and executes the packed Goofy Guineapig executable, which then unpacks itself using UPX. The unpacked malware can then proceed with its malicious activities.\n\nIn summary, the \"Obfuscated Files or Information: Software Packing\" technique used by Goofy Guineapig involves packing the malware executable with UPX and packaging it within a legitimate NSIS installer to evade detection and analysis.", "MITRE technique": {"id": "T1027.002", "name": "Obfuscated files or information: software packing", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code."}, "indicators": []}, {"id": "2212670d-0d73-4b5c-9932-4f3e39a1d540", "name": "Deobfuscate/Decode Files or Information as used by Goofy Guineapig", "description": "The action \"Deobfuscate/Decode Files or Information\" as used by Goofy Guineapig involves the following steps:\n\n1. **Stack-based strings**: Goofy Guineapig stores its strings in a stack, which means that they are stored in memory rather than being hardcoded into the binary.\n2. **Obfuscation with single byte XOR or subtraction**: The strings on the stack are obfuscated using either single-byte XOR (exclusive OR) operations or subtraction operations. This makes it difficult for analysts to identify the original string values.\n\nTo deobfuscate these strings, an analyst would need to:\n\n1. Identify the locations of the stack-based strings in memory.\n2. Extract the obfuscated strings from the stack.\n3. Apply the inverse operation (i.e., XOR with the same key or add back the subtracted value) to each byte of the string.\n\nFor example, if a string is obfuscated using single-byte XOR with a key of 0x12, an analyst would need to XOR each byte of the string with 0x12 to recover the original string.\n\nIn the provided code snippet, the `81 FE` bytes are likely used for stack-based string operations. The specific operation (XOR or subtraction) and", "MITRE technique": {"id": "T1140", "name": "Deobfuscate/decode files or information", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system."}, "indicators": []}, {"id": "9c02069e-86f2-4f24-9da9-1ea0656a5c0c", "name": "Hide Artifacts: Hidden Window as used by Goofy Guineapig", "description": "Based on the provided context, I will attempt to answer your question.\n\nThe action \"Hide Artifacts: Hidden Window\" as used by Goofy Guineapig involves creating a new process (dllhost.exe) and performing process hollowing on it. This means that the malware creates a legitimate-looking dllhost.exe process, but instead of running the actual dllhost.exe code, it runs the malicious payload.\n\nHere's how this is performed:\n\n1. The Goofy Guineapig loader installs a legitimate executable alongside a malicious DLL.\n2. The legitimate executable loads the malicious DLL using DLL side-loading.\n3. The malware then performs process hollowing on dllhost.exe by creating a new dllhost.exe process and injecting the malicious payload into it.\n4. The newly created dllhost.exe process is created hidden, meaning that it does not appear in process listings or other monitoring tools.\n\nThis technique allows the malware to evade detection by making it difficult for security software to identify the malicious process.", "MITRE technique": {"id": "T1564", "name": "Hide artifacts", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection."}, "indicators": []}, {"id": "593e35dd-3aaa-4e72-b747-d9afdd33dbac", "name": "Indicator Removal on Host: File Deletion as used by Goofy Guineapig", "description": "To answer your question, I will break down the process of how Indicator Removal on Host: File Deletion is used by Goofy Guineapig.\n\n**Indicator Removal on Host: File Deletion**\n\nThis technique is used to evade detection by hiding the malware's presence from the system. Here's a step-by-step explanation of how it works:\n\n1. **Initial Execution**: The Goofy Guineapig malware initially runs in the location where it was downloaded.\n2. **File Movement**: The files associated with the malware are moved to a legitimate-looking directory on the infected machine. This is done to make it difficult for security software to detect the malware's presence.\n3. **File Deletion**: The original download location of the malware is deleted, effectively removing any evidence of its initial execution.\n\nBy performing these steps, Goofy Guineapig makes it challenging for security software to detect and analyze the malware, thereby evading detection.\n\n**Code Snippet**\n\nThe code snippet provided appears to be a disassembly of the malware's binary. The relevant section related to Indicator Removal on Host: File Deletion is not explicitly mentioned in the snippet. However, based on the context, it can be inferred that the code is responsible for moving and deleting files", "MITRE technique": {"id": "T1070", "name": "Indicator removal", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform."}, "indicators": []}, {"id": "489c9d53-593f-401e-b886-ca825ee0158c", "name": "Hijack Execution Flow: DLL Side-Loading as used by Goofy Guineapig", "description": "The action \"Hijack Execution Flow: DLL Side-Loading\" as used by Goofy Guineapig is performed in the following steps:\n\n1. **Installation of Legitimate Executable**: The Goofy Guineapig loader installs a legitimate executable on the victim's system.\n2. **Installation of Malicious DLL**: Alongside the legitimate executable, the Goofy Guineapig loader also installs a malicious DLL (Dynamic Link Library) file.\n3. **Loading of Legitimate Executable**: The legitimate executable is executed by the system, which loads it into memory.\n4. **Loading of Malicious DLL**: When the legitimate executable is loaded, it loads the malicious DLL into its process space using the Windows API function `LoadLibrary`.\n5. **Execution of Malicious Code**: Once the malicious DLL is loaded, it can execute its own code within the context of the legitimate executable's process.\n\nThis technique allows the malware to evade detection by security software that may be monitoring the system for suspicious activity related to the legitimate executable. The malicious DLL can then perform various malicious activities, such as data exfiltration, keylogging, or other types of attacks.\n\nThe Goofy Guineapig loader uses this technique to hijack the execution", "MITRE technique": {"id": "T1574.001", "name": "Hijack execution flow: dll search order hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution."}, "indicators": []}, {"id": "52771603-432d-406c-a19e-3ad94e744c37", "name": "Process Injection: Process Hollowing as used by Goofy Guineapig", "description": "To answer your question, I will break down the steps involved in the \"Process Injection: Process Hollowing\" technique used by Goofy Guineapig:\n\n1. **Loading of Legitimate Executable**: The Goofy Guineapig loader installs a legitimate executable alongside a malicious DLL.\n2. **Initial Loading Process**: The initial loading process occurs in multiple stages and includes several defense evasion techniques.\n3. **Process Hollowing**: Goofy Guineapig can perform process hollowing on the dllhost.exe binary, which is a legitimate Windows process.\n4. **Injection of Content**: The malicious DLL is injected into the dllhost.exe process, and content downloaded by the C2 (Command and Control server) is injected into the process.\n\nThe specific steps involved in process hollowing are not explicitly described in the provided text, but based on general knowledge of process hollowing techniques, here's a possible explanation:\n\n* The Goofy Guineapig loader creates an empty executable file with the same name as dllhost.exe.\n* The malicious DLL is injected into the newly created executable file using Windows API functions such as `CreateProcess` or `LoadLibrary`.\n* The legitimate dllhost.exe process is then terminated, and the new, hollowed", "MITRE technique": {"id": "T1055.012", "name": "Process injection: process hollowing", "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process."}, "indicators": []}, {"id": "07ea951e-b6c0-4597-8432-502a8d1cdb64", "name": "Signed Binary Proxy Execution: Rundll32 as used by Goofy Guineapig", "description": "The action \"Signed Binary Proxy Execution: Rundll32\" as used by Goofy Guineapig is performed through the following steps:\n\n1. The malware uses the `rundll32.exe` executable, a legitimate Windows binary, to execute the malicious DLL.\n2. The `url.dll` library is loaded into memory and used to load the malicious DLL.\n3. The `rundll32.exe` process loads the malicious DLL using the `LoadLibrary` function, which is a part of the `url.dll` library.\n4. Once the malicious DLL is loaded, it can perform various actions, such as collecting information about the infected machine or running additional plugins.\n\nIn summary, Goofy Guineapig uses the `rundll32.exe` executable and the `url.dll` library to execute the malicious DLL in a way that appears legitimate, making it difficult for security software to detect.", "MITRE technique": {"id": "Unknown", "name": "Rundll32", "description": "Unknown"}, "indicators": []}]}, {"id": "c809fad7-7275-456d-9a20-6cc278eb9ed4", "pre-conditions": ["1. Modified files with names similar to Firefox and Google Updater installers", "2. Modified file name and location to match the expected path of a Firefox installer or Google updater", "3. Social engineering tactics to trick users into running the malware", "4. Suspicious processes (procmon.exe, ollydbg.exe, idaq.exe, windbg.exe)", "5. Suspicious DLLs (dbghelp.dll, ntsd.dll)", "6. Suspicious handles", "7. Modified disk size", "8. Modified physical memory size", "9. Modified number of logical processors", "10. Modified CPU timestamp counter", "11. Modified system time", "12. Modified dllhost.exe process", "13. Modified legitimate executable", "14. Modified malicious DLL", "15. Modified rundll32.exe process", "16. Modified url.dll library", "17. Modified malicious DLL loaded into memory", "18. Modified system registry", "19. Modified system files", "20. Modified system logs"], "actions": [{"id": "2d4d48f7-c45b-4fb2-a6e4-b6ffe1f1be5b", "name": "System Information Discovery as used by Goofy Guineapig", "description": "Based on the provided context, I will attempt to answer your question.\n\n**How the action: System Information Discovery as used by Goofy Guineapig is performed**\n\nAccording to the description, Goofy Guineapig sends information about the infected machine in each C2 (Command and Control) packet, as an obfuscated \"Authorization\" string in the HTTP header. This is done using the following steps:\n\n1. The malware collects system information from the infected machine.\n2. The collected information is then obfuscated into an \"Authorization\" string.\n3. The obfuscated string is sent in the HTTP header of each C2 packet.\n\nThe specific details on how this is performed are not provided, but it can be inferred that the malware uses a combination of system calls and network communication to collect and send the system information.\n\n**Additional context**\n\nTo provide more insight into the System Information Discovery technique used by Goofy Guineapig, I will highlight some relevant points from the description:\n\n* The malware sends information about the infected machine in each C2 packet.\n* The information is sent as an obfuscated \"Authorization\" string in the HTTP header.\n* The malware uses HTTPS for its C2 communications.\n\nThis suggests that Goofy Guineapig", "MITRE technique": {"id": "T1082", "name": "System information discovery", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."}, "indicators": []}]}, {"id": "a0fb4a9f-bc83-4893-8a7c-d9bbeae5ba53", "pre-conditions": ["1. Obfuscated \"Authorization\" string in the HTTP header of C2 packets", "2. System information collected from the infected machine", "3. HTTPS communication logs", "4. Network traffic records of C2 packets", "5. System call logs related to system information collection", "6. Permanent system information stored on the infected machine", "7. Changes to system configuration files", "8. Network connection logs", "9. HTTP request logs", "10. C2 server logs containing the received system information"], "actions": [{"id": "567f5a53-b50d-46e3-818e-efe73adcaeff", "name": "Application Layer Protocol: Web Protocols as used by Goofy Guineapig", "description": "According to the provided context, the action \"Application Layer Protocol: Web Protocols\" as used by Goofy Guineapig is performed through the use of HTTPS (Hypertext Transfer Protocol Secure) for its Command and Control (C2) communications.\n\nIn more detail, this means that when Goofy Guineapig communicates with its C2 server, it uses a secure web protocol called HTTPS to encrypt and protect the communication. This is done to prevent interception or eavesdropping of sensitive information exchanged between the malware and the C2 server.\n\nTo perform this action, Goofy Guineapig likely employs the following steps:\n\n1. Establishes a connection with the C2 server using a secure web protocol (HTTPS).\n2. Encrypts the communication using HTTPS to prevent interception or eavesdropping.\n3. Exchanges sensitive information, such as malware updates, commands, and data, between Goofy Guineapig and the C2 server.\n\nBy using HTTPS for its C2 communications, Goofy Guineapig aims to maintain confidentiality, integrity, and authenticity of the communication, making it more difficult for security researchers or threat actors to intercept or manipulate the exchanged information.", "MITRE technique": {"id": "T1071.001", "name": "Application layer protocol: web protocols", "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server."}, "indicators": []}, {"id": "3450b67c-4af3-4b7c-9b6f-b43b9f0d1818", "name": "Fallback Channels as used by Goofy Guineapig", "description": "To answer how the action \"Fallback Channels\" as used by Goofy Guineapig is performed, we need to analyze the provided information.\n\nAccording to the text, Fallback Channels refers to the functionality of Goofy Guineapig to communicate using UDP and the KCP protocol, or direct socket communications. This is dependent on an embedded configuration string.\n\nHere's a step-by-step explanation of how this action is performed:\n\n1. **Embedded Configuration String**: The malware has an embedded configuration string that determines which communication method to use.\n2. **UDP and KCP Protocol Selection**: Based on the configuration string, Goofy Guineapig selects either UDP or the KCP protocol for communication.\n3. **Direct Socket Communications**: Alternatively, it can also use direct socket communications, depending on the configuration.\n\nTo perform this action, the malware would:\n\n* Read the embedded configuration string\n* Parse the configuration string to determine which communication method to use (UDP, KCP, or direct socket)\n* Select the chosen communication method and establish a connection using that protocol\n\nThis is a high-level overview of how Fallback Channels are used by Goofy Guineapig. The specific implementation details may vary depending on the malware's code and configuration.\n\nIn", "MITRE technique": {"id": "T1008", "name": "Fallback channels", "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds."}, "indicators": []}, {"id": "d88add09-2cae-421e-aa24-86e89e25259b", "name": "Non-Standard Port as used by Goofy Guineapig", "description": "To answer your question, I will break down the steps to determine how the action \"Non-Standard Port\" is performed by Goofy Guineapig.\n\n**Step 1: Identify the relevant code snippet**\n\nThe relevant code snippet for this analysis is:\n\n`T1571 Non-Standard Port  Goofy Guineapig communicates over \nthe non -standard HTTPS port 4443.`\n\n**Step 2: Understand the context of the code snippet**\n\nThis code snippet indicates that Goofy Guineapig uses a non-standard HTTPS port, specifically port 4443.\n\n**Step 3: Determine how the action is performed**\n\nBased on the provided information, it appears that the \"Non-Standard Port\" action is performed by Goofy Guineapig using the following steps:\n\n1. The malware checks if the embedded configuration string allows for communication over UDP and KCP protocol or direct socket communications.\n2. If the configuration string permits non-standard port usage, Goofy Guineapig communicates over the non-standard HTTPS port 4443.\n\n**Step-by-Step Explanation**\n\nHere's a step-by-step explanation of how the \"Non-Standard Port\" action is performed:\n\n1. The malware checks the embedded configuration string for", "MITRE technique": {"id": "T1571", "name": "Non-standard port", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data."}, "indicators": []}]}]